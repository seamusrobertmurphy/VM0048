[
  {
    "objectID": "baseline.html#introduction",
    "href": "baseline.html#introduction",
    "title": "Baseline Emissions",
    "section": "1. Introduction",
    "text": "1. Introduction\nThis workflow establishes baseline emissions estimates through systematic processing of satellite remote sensing data using cloud-based Earth Engine catalog and python API functions. The methodology integrates Analysis Ready Data (ARD) products with standardized atmospheric correction and quality assessment protocols to support jurisdictional REDD+ baseline development.\n\nStudy Area\nThe analysis focuses on a jurisdictional study area within the Upper Guinea Forest biodiversity hotspot, encompassing critical forest landscapes under conservation management. The region’s tropical climate and complex forest-agricultural mosaics present typical challenges for satellite-based forest monitoring in West Africa. Spatial boundaries were derived from authoritative administrative datasets to ensure compatibility with national forest monitoring systems.\nThe region features:\n\nTropical humid climate with distinct wet and dry seasons\nElevation gradients from coastal plains to interior highlands\nMixed forest-agricultural landscapes with varying management intensities\nComplex hydrology including major river systems and wetland areas\n\nSpatial boundaries were established using the Global Administrative Unit Layers (GAUL) dataset, providing standardized administrative boundaries for consistent geographic analysis.\n\n\nNA Deleting source `./assets/AOI/aoi_country.shp' using driver `ESRI Shapefile'\nNA Writing layer `aoi_country' to data source \nNA   `./assets/AOI/aoi_country.shp' using driver `ESRI Shapefile'\nNA Writing 1 features with 2 fields and geometry type Multi Polygon.\n\n\nNA Deleting source `./assets/AOI/aoi_states.shp' using driver `ESRI Shapefile'\nNA Writing layer `aoi_states' to data source \nNA   `./assets/AOI/aoi_states.shp' using driver `ESRI Shapefile'\nNA Writing 1 features with 11 fields and geometry type Polygon.\n\n\n\n\n\n\n\naoi_country = ee.FeatureCollection('FAO/GAUL/2015/level1').filter(\n    ee.Filter.equals(\"ADM0_NAME\", \"Liberia\"))\naoi_states_all = country.aggregate_array('ADM1_NAME').distinct().getInfo()\naoi_states =  ee.FeatureCollection('FAO/GAUL/2015/level1').filter(\n    ee.Filter.equals('ADM1_NAME', \"Barima Waini (region N°1)\"))\n\nred = {\"color\": \"red\", \"width\": 1, \"lineType\": \"solid\", \"fillColor\": \"00000000\"}\npurple = {\"color\": \"purple\", \"width\": 2, \"lineType\": \"solid\", \"fillColor\": \"00000000\"}\ncountry_label = ee.FeatureCollection([ee.Feature(\n    country.geometry().centroid(), \n    {'country_name': country.first().get(\"ADM0_NAME\").getInfo()})])\n\nMap = geemap.Map()\nMap.centerObject(country, 6)\nMap.add_basemap('OpenTopoMap')\nMap.addLayer(aoi_country.style(**purple), {}, \"Guyana\")\nMap.addLayer(aoi_state.style(**red), {}, \"Barima Waini (region N°1)\")\nMap\n\nFigure 1: Interactive map showing area of interest polygons",
    "crumbs": [
      "Home",
      "Baseline"
    ]
  },
  {
    "objectID": "baseline.html#method",
    "href": "baseline.html#method",
    "title": "Baseline Emissions",
    "section": "2. Method",
    "text": "2. Method\n\nTraining Samples\nTraining samples were developed from the global land cover time series dataset (GLanCE) (Stanimirova et al. 2023). This approach addresses class migration and temporal consistency requirements for baseline period analysis. Although not mandatory (verraVM0048ReducingEmissions2023a?; verraVMD0055EstimationEmission2024?; Verra 2021), we recommend incorporating processing steps or training sample sources that include feature class migration checks. The following showcases improvements in accuracy metrics due to this remote sensing best practice.\nLevel-1 classes in the GLanCE datasets were documented below to match class labels cited in the countries reference level report titled “Liberia’s Forest Reference Emission Level Submission to the UNFCCC (Government of Liberia 2019).\nTable 1 Class conversions applied to GLanCE training samples\n\n\n\n\n\n\n\n\nGLanCE classes\nConverted classes\nGLanCE definitions\n\n\nBarren (4)\nBareground (0)\nAreas of soils, sand, or rocks where &lt;10% is vegetated\n\n\nHerbaceous (7)\nRegrowth (1)\nAreas of &lt;30% tree, &gt;10% vegetation, but &lt;10% shrub\n\n\nShrublands (6)\nFarmbush (2)\nAreas of &lt;30% tree, &gt;10% vegetation, & &gt;10% shrub\n\n\nTree Cover (5)\nForest (3)\nAreas of tree cover &gt; 30%.\n\n\nWater (1)\nWater (4)\nAreas covered with water year-round (lakes & streams)\n\n\nDeveloped (3)\nUrban (99)\nAreas covered with structures, built-up\n\n\nIce/Snow (2)\nIce/Snow (88)\nAreas of snow cover &gt; 50% year-round\n\n\n\n\n# import & tidy samples\nsamples_raw = read.csv(\"./assets/LULC/inputs/training_samples/glance_training.csv\")\nsamples_clean = samples_raw |&gt;\n  dplyr::select(Lon, Lat, Glance_Class_ID_level1, Start_Year, End_Year)|&gt;\n  dplyr::rename(longitude = Lon) |&gt;\n  dplyr::rename(latitude = Lat) |&gt;\n  dplyr::rename(label_old = Glance_Class_ID_level1) |&gt;\n  dplyr::mutate(start_date = as.Date(paste(Start_Year,\"01\",\"01\",sep = \"-\")))|&gt;\n  dplyr::mutate(end_date = as.Date(paste(End_Year, \"01\", \"01\", sep = \"-\")))|&gt;\n  dplyr::select(longitude, latitude, start_date, end_date, label_old)|&gt;\n  dplyr::mutate(code = case_when(\n    label_old == '4' ~ 0, \n    label_old == '7' ~ 1, \n    label_old == '6' ~ 2, \n    label_old == '5' ~ 3, \n    label_old == '1' ~ 4, \n    label_old == '3' ~ 99, \n    label_old == '2' ~ 88)\n    ) |&gt;\n  dplyr::mutate(label = case_when(\n    code == '0'  ~ \"Bareground\", \n    code == '1'  ~ \"Regrowth\", \n    code == '2'  ~ \"Farmbush\", \n    code == '3'  ~ \"Forest\", \n    code == '4'  ~ \"Water\", \n    code == '99' ~ \"Urban\", \n    code == '88' ~ \"Snow\")\n    ) |&gt; \n  dplyr::mutate(label = as.factor(label)) |&gt;\n  dplyr::mutate(id = row_number()) |&gt; \n  dplyr::select(-label_old) |&gt;\n  dplyr::select(-code)\n# filter to project\nsamples_sf       = sf::st_as_sf(samples_clean, crs = 4326, coords = c(\"longitude\", \"latitude\"))\nsamples_clipped  = sf::st_intersection(samples_sf, aoi_country) \nsamples_country  = samples_sf[samples_clipped, ] |&gt; sf::st_transform(4326)\nsamples          = sf::st_crop(samples_country, st_bbox(aoi_country))\nwrite.csv(samples, \"./assets/LULC/inputs/training_samples/glance_spatial_clip.csv\", row.names = F)\nst_write(samples, \"./assets/LULC/inputs/training_samples/glance_spatial_clip.shp\", delete_dsn = T)\ndplyr::count(samples, label)\n\n\n\n\n\n\n\nlabel\nn\ngeometry\n\n\n\n\nFarmbush\n4\nMULTIPOINT ((-11.35816 6.81…\n\n\nForest\n309\nMULTIPOINT ((-11.25993 7.02…\n\n\nRegrowth\n9\nMULTIPOINT ((-9.780878 6.16…\n\n\nUrban\n37\nMULTIPOINT ((-10.78342 6.36…\n\n\nWater\n3\nMULTIPOINT ((-11.26555 6.76…\n\n\n\n\n\n\n\n\nRaster Collection\nThe dataset of STAC-formatted Landsat Collection-2-Level-2 was extracted from the Google Earth Engine Catalog and processed using a cloudless and pixel quality ranking mask before back-filling with median normalization. Landsat data was acquired instead of Sentinel imagery due to start date of project’s 10-year baseline occurring before the launch of the Sentinel 2 satellite. This was implemented in a Colab python runtime here, and replicated in the chunk below using quarto’s python functions.\nRobust cloud masking is essential for tropical forest monitoring where persistent cloud cover poses significant challenges. The implemented approach uses Landsat Collection-2 QA_PIXEL and QA_RADSAT bands to identify and remove cloud-contaminated observations. In the following, pixel quality assessment was implemented using:\n\nQA_PIXEL: Pixel quality flags for cloud/shadow detection\nQA_RADSAT: Radiometric saturation assessment\nSurface reflectance scaling with Collection-2 coefficients\nThermal band scaling for surface temperature\nNDVI calculation for vegetation assessment\n\n\n# Activate Earth Engine\n!earthengine authenticate\n#!ee.Authenticate() # deprecated in certain Colab environments\nee.Initialize(project = \"murphys-deforisk\")\n\n# derive masking, scaling, and ndvi function\ndef maskL8sr(image):\n    qaMask = image.select('QA_PIXEL').bitwiseAnd(int('11111', 2)).eq(0)\n    saturationMask = image.select('QA_RADSAT').eq(0)\n    opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2)\n    thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0)\n    ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI').toFloat()\n    image = image.addBands(opticalBands, None, True) \\\n                 .addBands(thermalBands, None, True) \\\n                 .addBands(ndvi)\n    return image.select(\n        ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'NDVI'],\n        ['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']\n    ).updateMask(qaMask).updateMask(saturationMask)\n\n# create collections for 2014 and 2024\ncollection_2014 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') \\\n                    .filterDate('2014-01-01', '2014-12-31') \\\n                    .filterBounds(country) \\\n                    .map(maskL8sr)\n\ncollection_2019 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') \\\n                    .filterDate('2019-01-01', '2019-12-31') \\\n                    .filterBounds(country) \\\n                    .map(maskL8sr)\n\ncollection_2024 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') \\\n                    .filterDate('2024-01-01', '2024-12-31') \\\n                    .filterBounds(country) \\\n                    .map(maskL8sr)\n\n# median composites for 2014 and 2024\ncomposite_2014 = collection_2014.select(['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']).median().clip(country).toFloat()\ncomposite_2019 = collection_2019.select(['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']).median().clip(country).toFloat()\ncomposite_2024 = collection_2024.select(['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']).median().clip(country).toFloat()\n\n\n# Visualization parameters\nndviVis = {'min': 0.2, 'max': 0.8, 'palette': ['red', 'yellow', 'green']}\n\n# Create histogram for 2014\nplt.figure()\nplt.hist(composite_2014.select('NDVI'), color='springgreen', edgecolor='black')\nplt.title('NDVI Distribution, 2014')\nplt.xlabel('NDVI Value')\nplt.ylabel('Frequency')\nplt.savefig('NDVI_2014_histogram.png')\nplt.close()\n\n# Create histogram for 2019\nplt.figure()\nplt.hist(composite_2019.select('NDVI'), color='springgreen', edgecolor='black')\nplt.title('NDVI Distribution, 2019')\nplt.xlabel('NDVI Value')\nplt.ylabel('Frequency')\nplt.savefig('NDVI_2019_histogram.png')\nplt.close()\n\n# Create histogram for 2024\nplt.figure()\nplt.hist(composite_2024.select('NDVI'), color='springgreen', edgecolor='black')\nplt.title('NDVI Distribution, 2024')\nplt.xlabel('NDVI Value')\nplt.ylabel('Frequency')\nplt.savefig('NDVI_2024_histogram.png')\nplt.close()\n\n# --- Plot Rasters ---\n# The xlim/ylim parameters in R's `plot` function are equivalent to `bounds` or `extent` in Python.\n# You need to manually calculate the extent for the desired output.\n# The `plot` function in `rasterio` and `matplotlib.pyplot` handle the visualization.\nwith rasterio.open(composite_2014.select('NDVI')) as src:\n    raster_data = src.read(1)\n    extent = [src.bounds.left, src.bounds.right, src.bounds.bottom, src.bounds.top]\n    axes[1, 0].imshow(raster_data, cmap='viridis', extent=extent)\n    axes[1, 0].set_title(\"NDVI, 2014\")\n    axes[1, 0].set_xlim(-11.5, -7.5)\n    axes[1, 0].set_ylim(4.1, 8.6)\n    axes[1, 0].set_xlabel(\"Longitude\")\n    axes[1, 0].set_ylabel(\"Latitude\")\n\nwith rasterio.open(composite_2019.select('NDVI')) as src:\n    raster_data = src.read(1)\n    extent = [src.bounds.left, src.bounds.right, src.bounds.bottom, src.bounds.top]\n    axes[1, 1].imshow(raster_data, cmap='viridis', extent=extent)\n    axes[1, 1].set_title(\"NDVI, 2019\")\n    axes[1, 1].set_xlim(-11.5, -7.5)\n    axes[1, 1].set_ylim(4.1, 8.6)\n    axes[1, 1].set_xlabel(\"Longitude\")\n    axes[1, 1].set_ylabel(\"Latitude\")\n\nwith rasterio.open(composite_2024.select('NDVI')) as src:\n    raster_data = src.read(1)\n    extent = [src.bounds.left, src.bounds.right, src.bounds.bottom, src.bounds.top]\n    axes[1, 2].imshow(raster_data, cmap='viridis', extent=extent)\n    axes[1, 2].set_title(\"NDVI, 2024\")\n    axes[1, 2].set_xlim(-11.5, -7.5)\n    axes[1, 2].set_ylim(4.1, 8.6)\n    axes[1, 2].set_xlabel(\"Longitude\")\n    axes[1, 2].set_ylabel(\"Latitude\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Multi-temporal satellite composites showing NDVI composites across the baseline period.\n\nMetadata QA/QC\nMetadata extraction ensures data provenance and enables quality control throughout the processing workflow. This steps comes in handy before exporting large collections from earth engine to personal drive, such as this one (&gt;10GB).\n\n# confirm dates, scene IDs, band names of images\nfirstImage_2014 = collection_2014.first()\nsceneId_2014 = firstImage_2014.get('system:index').getInfo()\nprint(f\"Scene ID for collection_2014: {sceneId_2014}\")\n\nfirstImage_2019 = collection_2019.first()\nsceneId_2019 = firstImage_2019.get('system:index').getInfo()\nprint(f\"Scene ID for collection_2019: {sceneId_2019}\")\n\nfirstImage_2024 = collection_2024.first()\nsceneId_2024 = firstImage_2024.get('system:index').getInfo()\nprint(f\"Scene ID for collection_2024: {sceneId_2024}\")\n\nbandNames_2014 = composite_2014.bandNames().getInfo()\nprint(f\"Band names: {bandNames_2014}\")\n\nbandNames_2019 = composite_2019.bandNames().getInfo()\nprint(f\"Band names: {bandNames_2019}\")\n\nbandNames_2024 = composite_2024.bandNames().getInfo()\nprint(f\"Band names: {bandNames_2024}\")\n\nScene ID for collection_2014: LC08_198055_20140104\nScene ID for collection_2019: LC08_198055_20190102\nScene ID for collection_2024: LC08_198055_20240116\nBand names: ['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']\nBand names: ['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']\nBand names: ['BLUE', 'GREEN', 'RED', 'NIR08', 'SWIR16', 'SWIR22', 'NDVI']\nResults confirm consistent band availability and standardized naming conventions across all periods.\n\n\nExport Rasters\nCloud-optimized GeoTIFF format ensures efficient data access and interoperability with downstream analysis tools. The following export workflow also implements systematic file naming conventions suitable for metadata parsing required in remote sensing packages.\n\nfrom datetime import datetime\n\n# extract pathrow and date from scene ID\ndef get_pathrow_date(image_collection):\n  first_image = image_collection.first()\n  scene_id = first_image.get('system:index').getInfo()\n  parts = scene_id.split('_')\n  pathrow = parts[1]\n  date_str = parts[2]\n  date_obj = datetime.strptime(date_str, '%Y%m%d')\n  date = date_obj.strftime('%Y-%m-%d')\n  return pathrow, date\n\n# define export parameters\ndef define_export_params(image, pathrow, date, band_name):\n  description = f'composite_{date}_{band_name if isinstance(band_name, str) else \"RGB\"}_export'[:100]\n  return {\n    'image': image.select(band_name),\n    'description': description,\n    'folder': 'VT0007-deforestation-map',\n    'fileNamePrefix': f'LANDSAT_TM-ETM-OLI_{pathrow}_{band_name if isinstance(band_name, str) else \"RGB\"}_{date}',\n    'scale': 30,\n    'region': country.geometry(),\n    'maxPixels': 1e13,\n    'fileFormat': 'GeoTIFF',\n    'formatOptions': {'cloudOptimized': True}\n  }\n\n# get pathrow and date for each collection\npathrow_2014, date_2014 = get_pathrow_date(collection_2014)\npathrow_2019, date_2019 = get_pathrow_date(collection_2019)\npathrow_2024, date_2024 = get_pathrow_date(collection_2024)\n\n# get band names\nbandNames_2014 = composite_2014.bandNames().getInfo()\nbandNames_2019 = composite_2019.bandNames().getInfo()\nbandNames_2024 = composite_2024.bandNames().getInfo()\n\n# export to cloud bucket\nfor band_name in bandNames_2014:\n    export_params_2014 = define_export_params(composite_2014, pathrow_2014, date_2014, band_name)\n    task_2014 = ee.batch.Export.image.toDrive(**export_params_2014)\n    task_2014.start()\n    print(f\"Exporting 2014 image for band {band_name}. Task ID: {task_2014.id}\")\n\nfor band_name in bandNames_2019:\n    export_params_2019 = define_export_params(composite_2019, pathrow_2019, date_2019, band_name)\n    task_2019 = ee.batch.Export.image.toDrive(**export_params_2019)\n    task_2019.start()\n    print(f\"Exporting 2019 image for band {band_name}. Task ID: {task_2019.id}\")\n\nfor band_name in bandNames_2024:\n    export_params_2024 = define_export_params(composite_2024, pathrow_2024, date_2024, band_name)\n    task_2024 = ee.batch.Export.image.toDrive(**export_params_2024)\n    task_2024.start()\n    print(f\"Exporting 2024 image for band {band_name}. Task ID: {task_2024.id}\")\n\nexport_params_2014_rgb = define_export_params(composite_2014, pathrow_2014, date_2014, ['RED', 'GREEN', 'BLUE'])\nexport_params_2014_rgb['image'] = composite_2014.visualize(**rgbVis)\ntask_2014_rgb = ee.batch.Export.image.toDrive(**export_params_2014_rgb)\ntask_2014_rgb.start()\nprint(f\"Exporting 2014 RGB image. Task ID: {task_2014_rgb.id}\")\n\nexport_params_2019_rgb = define_export_params(composite_2019, pathrow_2019, date_2019, ['RED', 'GREEN', 'BLUE'])\nexport_params_2019_rgb['image'] = composite_2019.visualize(**rgbVis)\ntask_2019_rgb = ee.batch.Export.image.toDrive(**export_params_2019_rgb)\ntask_2019_rgb.start()\nprint(f\"Exporting 2019 RGB image. Task ID: {task_2019_rgb.id}\")\n\nexport_params_2024_rgb = define_export_params(composite_2024, pathrow_2024, date_2024, ['RED', 'GREEN', 'BLUE'])\nexport_params_2024_rgb['image'] = composite_2024.visualize(**rgbVis)\ntask_2024_rgb = ee.batch.Export.image.toDrive(**export_params_2024_rgb)\ntask_2024_rgb.start()\nprint(f\"Exporting 2024 RGB image. Task ID: {task_2024_rgb.id}\")\n\nExporting 2014 image for band BLUE. Task ID: IRDIBYVEMKUAVGKZQ5HXKPBC\nExporting 2014 image for band GREEN. Task ID: EEWSBCRWWKUPRQWV4TQZ3B6C\nExporting 2014 image for band RED. Task ID: WXC6RRPJFOILRBYH5C3WOKTP\nExporting 2014 image for band NIR08. Task ID: 6PKRX3FP7ABDPURUHPZYDPWE\nExporting 2014 image for band SWIR16. Task ID: XK6EE5UFGWCCG7QSIDKKTJF5\nExporting 2014 image for band SWIR22. Task ID: W57UBUFB7HRB3EKMLJHNEW6H\nExporting 2014 image for band NDVI. Task ID: ZY7IGAO2K3CIVCUGRXKDNXVA\nExporting 2019 image for band BLUE. Task ID: E3J5YYQM2ZI2HSRDCBPRBWI4\nExporting 2019 image for band GREEN. Task ID: XVQICHKGYHHCLCFS2H4DEVUK\nExporting 2019 image for band RED. Task ID: 7ISMPTUBERKDVN2OZ2DR7U56\nExporting 2019 image for band NIR08. Task ID: 5QGL7XCZ6QPT2NKXEZFKXIPR\nExporting 2019 image for band SWIR16. Task ID: 4TDZ3QLG3JXJ5DXGZIIPPQAX\nExporting 2019 image for band SWIR22. Task ID: SK4Q6PS6IXIVWUICHTRX55UL\nExporting 2019 image for band NDVI. Task ID: 4XWVQ4UNRFEA4JV25IL22THI\nExporting 2024 image for band BLUE. Task ID: BITRT6BI7PKM6P6Z3FWPTEEL\nExporting 2024 image for band GREEN. Task ID: 2VUH34ENCZVIAYSRD3BJQG2G\nExporting 2024 image for band RED. Task ID: 2U5PRUP3VUAJIIC6WPR7L4IG\nExporting 2024 image for band NIR08. Task ID: Y2M2FPLUNIDRRKMEYTWWDBPD\nExporting 2024 image for band SWIR16. Task ID: WPGNYNGXEOCB67CX6VGCPOLG\nExporting 2024 image for band SWIR22. Task ID: L43YZOYPUYVWUMGJCCHS46UA\nExporting 2024 image for band NDVI. Task ID: 3LRYV6LDKHOGQ2TJ4Z3FV4QT\nExporting 2014 RGB image. Task ID: WWHVXMWV2RUT5IKPZNVCFQLA\nExporting 2024 RGB image. Task ID: DA6UDTKJM5NG4QQHHLQ7S2KZ\nThe export generates 18 individual band files plus 2 RGB and 3 NDVI composites, totaling 23 data products spanning the 10-year baseline period. Each file maintains consistent 30-meter spatial resolution and geographic projection for seamless integration with subsequent analysis workflows.\n\n\nStack Rasters\n\nBLUE_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_BLUE_2014-01-04.tif\") \nBLUE_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_BLUE_2019-01-02.tif\")\nBLUE_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_BLUE_2024-01-16.tif\")\nGREEN_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_GREEN_2014-01-04.tif\")\nGREEN_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_GREEN_2019-01-02.tif\")\nGREEN_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_GREEN_2024-01-16.tif\")\nNIR08_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_NIR08_2014-01-04.tif\")\nNIR08_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_NIR08_2019-01-02.tif\")\nNIR08_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_NIR08_2024-01-16.tif\")\nRED_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_RED_2014-01-04.tif\")\nRED_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_RED_2019-01-02.tif\")\nRED_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_RED_2024-01-16.tif\")\nSWIR16_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_SWIR16_2014-01-04.tif\")\nSWIR16_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_SWIR16_2019-01-02.tif\")\nSWIR16_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_SWIR16_2024-01-16.tif\")\nSWIR22_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_SWIR22_2014-01-04.tif\")\nSWIR22_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_SWIR22_2019-01-02.tif\")\nSWIR22_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_SWIR22_2024-01-16.tif\")\nNDVI_2014=terra::rast(\"./data/cube_2014/LANDSAT_TM-ETM-OLI_198055_NDVI_2014-01-04.tif\")*0.0001 \nNDVI_2019=terra::rast(\"./data/cube_2019/LANDSAT_TM-ETM-OLI_198055_NDVI_2019-01-02.tif\")*0.0001 \nNDVI_2024=terra::rast(\"./data/cube_2024/LANDSAT_TM-ETM-OLI_198055_NDVI_2024-01-16.tif\")*0.0001 \nDEM=terra::rast(\"./data/DEM/DEM_SRTMGL1_1ARCSEC_30M.tif\")\n\nNDVI_2014 = terra::project(NDVI_2014, \"EPSG:4326\")\nNDVI_2019 = terra::project(NDVI_2019, \"EPSG:4326\")\nNDVI_2024 = terra::project(NDVI_2024, \"EPSG:4326\")\n\nBLUE_2014 = terra::resample(BLUE_2014, NDVI_2014) |&gt; raster::raster() \nBLUE_2019 = terra::resample(BLUE_2019, NDVI_2014) |&gt; raster::raster() \nBLUE_2024 = terra::resample(BLUE_2024, NDVI_2014) |&gt; raster::raster() \nGREEN_2014 = terra::resample(GREEN_2014, NDVI_2014) |&gt; raster::raster() \nGREEN_2019 = terra::resample(GREEN_2019, NDVI_2014) |&gt; raster::raster() \nGREEN_2024 = terra::resample(GREEN_2024, NDVI_2014) |&gt; raster::raster() \nNIR08_2014 = terra::resample(NIR08_2014, NDVI_2014) |&gt; raster::raster() \nNIR08_2019 = terra::resample(NIR08_2019, NDVI_2014) |&gt; raster::raster() \nNIR08_2024 = terra::resample(NIR08_2024, NDVI_2014) |&gt; raster::raster() \nRED_2014 = terra::resample(RED_2014, NDVI_2014) |&gt; raster::raster() \nRED_2019 = terra::resample(RED_2019, NDVI_2014) |&gt; raster::raster() \nRED_2024 = terra::resample(RED_2024, NDVI_2014) |&gt; raster::raster() \nSWIR16_2014 = terra::resample(SWIR16_2014, NDVI_2014) |&gt; raster::raster() \nSWIR16_2019 = terra::resample(SWIR16_2019, NDVI_2014) |&gt; raster::raster() \nSWIR16_2024 = terra::resample(SWIR16_2024, NDVI_2014) |&gt; raster::raster() \nSWIR22_2014 = terra::resample(SWIR22_2014, NDVI_2014) |&gt; raster::raster() \nSWIR22_2019 = terra::resample(SWIR22_2019, NDVI_2014) |&gt; raster::raster() \nSWIR22_2024 = terra::resample(SWIR22_2024, NDVI_2014) |&gt; raster::raster()\nNDVI_2014 = raster::raster(NDVI_2014) \nNDVI_2019 = raster::raster(NDVI_2019) \nNDVI_2024 = raster::raster(NDVI_2024) \n\nraster::writeRaster(BLUE_2014, \"./data/STACK/BLUE_2014.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(BLUE_2019, \"./data/STACK/BLUE_2019.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(BLUE_2024, \"./data/STACK/BLUE_2024.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(GREEN_2014, \"./data/STACK/GREEN_2014.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(GREEN_2019, \"./data/STACK/GREEN_2019.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(GREEN_2024, \"./data/STACK/GREEN_2024.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(NIR08_2014, \"./data/STACK/NIR08_2014.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(NIR08_2019, \"./data/STACK/NIR08_2019.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(NIR08_2024, \"./data/STACK/NIR08_2024.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(RED_2014, \"./data/STACK/RED_2014.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(RED_2019, \"./data/STACK/RED_2019.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(RED_2024, \"./data/STACK/RED_2024.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(SWIR16_2014, \"./data/STACK/SWIR16_2014.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(SWIR16_2019, \"./data/STACK/SWIR16_2019.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(SWIR16_2024, \"./data/STACK/SWIR16_2024.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(SWIR22_2014, \"./data/STACK/SWIR22_2014.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(SWIR22_2019, \"./data/STACK/SWIR22_2019.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(SWIR22_2024, \"./data/STACK/SWIR22_2024.tif\", format = \"GTiff\",overwrite=T)\nraster::writeRaster(NDVI_2014, \"./data/STACK/NDVI_2014.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(NDVI_2019, \"./data/STACK/NDVI_2019.tif\", format = \"GTiff\", overwrite = T)\nraster::writeRaster(NDVI_2024, \"./data/STACK/NDVI_2024.tif\", format = \"GTiff\", overwrite = T)\n\n# https://github.com/tilezen/joerd/blob/master/docs/data-sources.md#what-is-the-ground-resolution\nDEM=elevatr::get_elev_raster(aoi_country, z = 12) \nDEM=terra::rast(\"./data/DEM/DEM_SRTMGL1_1ARCSEC_30M.tif\") |&gt; terra::project(crs(NDVI_2014))\nDEM=terra::resample(DEM, NDVI_2014)\nDEM=terra::crop(DEM, NDVI_2014)\nDEM=terra::mask(DEM, NDVI_2014)\nDEM_raster=raster::raster(DEM)\nraster::writeRaster(DEM_raster, \"./data/STACK/DEM.tif\", format = \"GTiff\", overwrite = T)\n\nBLUE_2014=raster::raster(\"./data/STACK/BLUE_2014.tif\")\nBLUE_2019=raster::raster(\"./data/STACK/BLUE_2019.tif\")\nBLUE_2024=raster::raster(\"./data/STACK/BLUE_2024.tif\")\nGREEN_2014=raster::raster(\"./data/STACK/GREEN_2014.tif\")\nGREEN_2019=raster::raster(\"./data/STACK/GREEN_2019.tif\")\nGREEN_2024=raster::raster(\"./data/STACK/GREEN_2024.tif\")\nNIR08_2014=raster::raster(\"./data/STACK/NIR08_2014.tif\")\nNIR08_2019=raster::raster(\"./data/STACK/NIR08_2019.tif\")\nNIR08_2024=raster::raster(\"./data/STACK/NIR08_2024.tif\")\nRED_2014=raster::raster(\"./data/STACK/RED_2014.tif\")\nRED_2019=raster::raster(\"./data/STACK/RED_2019.tif\")\nRED_2024=raster::raster(\"./data/STACK/RED_2024.tif\")\nSWIR16_2014=raster::raster(\"./data/STACK/SWIR16_2014.tif\")\nSWIR16_2019=raster::raster(\"./data/STACK/SWIR16_2019.tif\")\nSWIR16_2024=raster::raster(\"./data/STACK/SWIR16_2024.tif\")\nSWIR22_2014=raster::raster(\"./data/STACK/SWIR22_2014.tif\")\nSWIR22_2019=raster::raster(\"./data/STACK/SWIR22_2019.tif\")\nSWIR22_2024=raster::raster(\"./data/STACK/SWIR22_2024.tif\")\nNDVI_2014=raster::raster(\"./data/STACK/NDVI_2014.tif\")\nNDVI_2019=raster::raster(\"./data/STACK/NDVI_2019.tif\")\nNDVI_2024=raster::raster(\"./data/STACK/NDVI_2024.tif\")\nDEM=raster::raster(\"./data/STACK/DEM.tif\")\n\nSTACK = brick(NDVI_2014, NDVI_2019, NDVI_2024,\n          BLUE_2014, BLUE_2019, BLUE_2024, \n          GREEN_2014, GREEN_2019, GREEN_2024,\n          NIR08_2014, NIR08_2019, NIR08_2024, \n          RED_2014, RED_2019, RED_2024, \n          SWIR16_2014, SWIR16_2019, SWIR16_2024, \n          SWIR22_2014, SWIR22_2019, SWIR22_2024,\n          DEM)\n\nraster::writeRaster(STACK,\n  \"./assets/LULC/inputs/STACK/LANDSAT_TM-ETM-OLI_198055_STACK-&-DEM_2014-01-04_2024-01-16.tif\",\n  format = \"GTiff\", \n  bandorder = \"BIL\", \n  overwrite = T)\n\n\n\n\nImage Classification\nWe trained a Random Forest model fitted with 500 decision trees. The dataset was partitioned using a 70:30 ratio which was which was trained using Monte Carlo resampling regime (k=100). Accuracy assessments were reported using a confusion matrix. Uncertainty metrics were then used to explore best subset of variables according to magnitude and performances of recursive modeling, which informed final model selection.\n\nSTACK=raster::brick(\"./assets/LULC/inputs/LANDSAT_TM-ETM-OLI_198055_STACK-&-DEM_2014-01-04_2024-01-16.tif\")\nnames(STACK[[1]]) = \"NDVI_2014\"\nnames(STACK[[2]]) = \"NDVI_2019\"\nnames(STACK[[3]]) = \"NDVI_2024\"\nnames(STACK[[4]]) = \"BLUE_2014\"\nnames(STACK[[5]]) = \"BLUE_2019\"\nnames(STACK[[6]]) = \"BLUE_2024\"\nnames(STACK[[7]]) = \"GREEN_2014\"\nnames(STACK[[8]]) = \"GREEN_2019\"\nnames(STACK[[9]]) = \"GREEN_2024\"\nnames(STACK[[10]]) = \"NIR08_2014\"\nnames(STACK[[11]]) = \"NIR08_2019\"\nnames(STACK[[12]]) = \"NIR08_2024\"\nnames(STACK[[13]]) = \"RED_2014\"\nnames(STACK[[14]]) = \"RED_2019\"\nnames(STACK[[15]]) = \"RED_2024\"\nnames(STACK[[16]]) = \"SWIR16_2014\"\nnames(STACK[[17]]) = \"SWIR16_2019\"\nnames(STACK[[18]]) = \"SWIR16_2024\"\nnames(STACK[[19]]) = \"SWIR22_2014\"\nnames(STACK[[20]]) = \"SWIR22_2019\"\nnames(STACK[[21]]) = \"SWIR22_2024\"\nnames(STACK[[22]]) = \"DEM\"\n\n# extract yearly layers\nSTACK_2014=subset(STACK, c(\"NDVI_2014\",\"BLUE_2014\",\"GREEN_2014\",\"NIR08_2014\",\n                           \"RED_2014\",\"SWIR16_2014\",\"SWIR22_2014\",\"DEM\"))\n# extract signatures\nsignatures_2014 = raster::extract(STACK_2014, samples ,df=T) # watch for data formats\nsamples_signatures_2014 &lt;- dplyr::inner_join(signatures_2014, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2014$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\ntrainIndex_2014 &lt;- caret::createDataPartition(samples_signatures_2014$ID,list=F,p=0.7)\ntrainData_2014  &lt;- samples_signatures_2014[trainIndex_2014,]  \ntestData_2014   &lt;- samples_signatures_2014[-trainIndex_2014,] \n\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2014 &lt;- trainData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2014 &lt;- testData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2014 &lt;- c(\n  \"NDVI_2014\", \"BLUE_2014\", \"GREEN_2014\", \"RED_2014\", \n  \"NIR08_2014\", \"SWIR16_2014\", \"SWIR22_2014\", \"DEM\"\n  )\n# set training parameters\ncv_regime &lt;- caret::trainControl(\n  method          = 'cv',\n  number          = 10,\n  savePredictions = T,\n  verboseIter     = F\n  )\n\n# train classifier\nrf_model_2014 &lt;- caret::train(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\n\n\nAccuracy Assessment\nResults suggested a moderate concordance between observed and predicted classes with optimal model performance during cross-validation at mtry of 3. Overall statistics reported Kappa Index of 71.04%, Accuracy of 88.61% (0.95CI 84.46%, 95.71%), and a smaller No Information Rate of 0.8158 (p&lt;0.01). In addition, key classes of Forest were predicted with robust Sensitivity (98.92%) and Specificity (76.16%).\nTo address model weaknesses, the team recommends sourcing additional verified training samples, or alternatively applying a weighted Random Forest, Gradient Boosting or Support Vector Machines kernels (SVM) to improve performance of underrepresented classes. Note, these modeling updates will require substantial runtimes.\n\nrf_test_2014 &lt;- predict(rf_model_2014, testData_2014)\nprint(rf_model_2014) # cv results\ncaret::confusionMatrix(rf_test_2014,testData_2014$label) # blind test results\n\nRandom Forest \n\n1862 samples\n   8 predictor\n   7 classes: 'Bareground', 'Farmbush', 'Forest', 'Regrowth', 'Swamp', 'Urban', 'Water' \n\nNo pre-processing\nResampling: Repeated Train/Test Splits Estimated (100 reps, 75%) \nSummary of sample sizes: 1399, 1399, 1399, 1399, 1399, 1399, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n  2     0.9976674  0.9935532\n  3     0.9976674  0.9935535\n  4     0.9976674  0.9935553\n  5     0.9976674  0.9935596\n  6     0.9976674  0.9935626\n  8     0.9976674  0.9935652\n\nKappa was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 8.\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         28        8      0        0     0     3     0\n  Farmbush            0       10      0        0     0     0     0\n  Forest              4        0    696        8     0     0     0\n  Regrowth            0        0      8       41     0     0     0\n  Swamp               0        0      0        0    31     0     0\n  Urban               0        4      0        0     0    80     0\n  Water               0        0      0        0     0     0    10\n\nOverall Statistics\n                                          \n               Accuracy : 0.9624          \n                 95% CI : (0.9481, 0.9737)\n    No Information Rate : 0.7562          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.9086        \n\n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest Class: Regrowth Class: Swamp Class: Urban\nSensitivity                    0.87500         0.45455        0.9886         0.83673       1.0000      0.96386\nSpecificity                    0.98776         1.00000        0.9471         0.99093       1.0000      0.99528\nPos Pred Value                 0.71795         1.00000        0.9831         0.83673       1.0000      0.95238\nNeg Pred Value                 0.99552         0.98697        0.9641         0.99093       1.0000      0.99646\nPrevalence                     0.03437         0.02363        0.7562         0.05263       0.0333      0.08915\nDetection Rate                 0.03008         0.01074        0.7476         0.04404       0.0333      0.08593\nDetection Prevalence           0.04189         0.01074        0.7605         0.05263       0.0333      0.09023\nBalanced Accuracy              0.93138         0.72727        0.9679         0.91383       1.0000      0.97957\n                     Class: Water\nSensitivity               1.00000\nSpecificity               1.00000\nPos Pred Value            1.00000\nNeg Pred Value            1.00000\nPrevalence                0.01074\nDetection Rate            0.01074\nDetection Prevalence      0.01074\nBalanced Accuracy         1.00000\n\nModel Calibration\nWe employed recursive predictor subsetting to identify predictors of greatest magnitude and non-informative features to enhance model performance and reduce model complexity, respectively. This aims to limit potential of multicollinearity, despite inherent robustness of randomForest algorithms against such violations. The subsetted model was evaluated on the test dataset. The confusion matrix and performance metrics are summarized below.\n\nindex_feature_2014 &lt;- createMultiFolds(trainData_2014$label, times=5) \npredictor_seq_2014 &lt;-seq(from=1, to=length(predictors_2014),by=2)\nsubset_regime_2014 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2014\n  )\n\nrf_model_subset_2014 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], \n  sizes = predictor_seq_2014,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2014\n  )\n\nrf_subset_test_2014 &lt;- predict(rf_model_subset_2014,testData_2014)\nprint(rf_model_subset_2014)\n\nRecursive feature selection\nOuter resampling method: Repeated Train/Test Splits Estimated (50 reps, 75%) \nResampling performance over subset size:\n\n Variables Accuracy  Kappa AccuracySD  KappaSD Selected\n         1   0.9974 0.9929  0.0038035 0.010585         \n         3   0.9991 0.9976  0.0019897 0.005519         \n         5   0.9995 0.9985  0.0016258 0.004489         \n         7   0.9999 0.9997  0.0007603 0.002113        *\n         8   0.9998 0.9994  0.0010642 0.002957         \n\nThe top 5 variables (out of 7):\n   BLUE_2014, NDVI_2014, NIR08_2014, SWIR22_2014, SWIR16_2014\ncaret::confusionMatrix(rf_subset_test_2014$pred,testData_2014$label)\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         21        0      0        0     0     0     0\n  Farmbush            0        0      0        0     0     0     0\n  Forest              0       14    709       17    31    16     0\n  Regrowth            0        0      0       24     0     0     0\n  Swamp               0        0      0        0     0     0     0\n  Urban               0       10      0        0     0    68     0\n  Water               0        0      7        0     0     0    14\n\nOverall Statistics\n                                          \n               Accuracy : 0.898           \n                 95% CI : (0.8767, 0.9167)\n    No Information Rate : 0.7691          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.7002          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest\nSensitivity                    1.00000         0.00000        0.9902\nSpecificity                    1.00000         1.00000        0.6372\nPos Pred Value                 1.00000             NaN        0.9009\nNeg Pred Value                 1.00000         0.97422        0.9514\nPrevalence                     0.02256         0.02578        0.7691\nDetection Rate                 0.02256         0.00000        0.7615\nDetection Prevalence           0.02256         0.00000        0.8453\nBalanced Accuracy              1.00000         0.50000        0.8137\n                     Class: Regrowth Class: Swamp Class: Urban Class: Water\nSensitivity                  0.58537       0.0000      0.80952      1.00000\nSpecificity                  1.00000       1.0000      0.98819      0.99237\nPos Pred Value               1.00000          NaN      0.87179      0.66667\nNeg Pred Value               0.98126       0.9667      0.98124      1.00000\nPrevalence                   0.04404       0.0333      0.09023      0.01504\nDetection Rate               0.02578       0.0000      0.07304      0.01504\nDetection Prevalence         0.02578       0.0000      0.08378      0.02256\nBalanced Accuracy            0.79268       0.5000      0.89886      0.99618\nThe subset model achieved an Accuracy of 89. 8%. These metrics closely align with the results of the original model, suggesting minimal or no loss in predictive power despite using fewer predictors. Given that the reduction in complexity offered by the subsetted model does not provide significant benefits in this context, we would recommend proceeding with the original model to make spatial predictions. Modelling operations were then repeated for 2019 and 2024, which were visualized as the classified time series below.\n\nLULC_LIBERIA_2014=terra::rast(\"./assets/LULC/outputs/LULC_LIBERIA_2014-01-04.tif\")\nLULC_LIBERIA_2019=terra::rast(\"./assets/LULC/outputs/LULC_LIBERIA_2019-01-02.tif\")\nLULC_LIBERIA_2024=terra::rast(\"./assets/LULC/outputs/LULC_LIBERIA_2024-01-16.tif\")\ncode_dict &lt;- data.frame(id = c(1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Bareground\", \"Farmbush\", \"Forest\", \"Regrowth\", \"Swamp\", \"Urban\", \"Water\"))\nlevels(LULC_LIBERIA_2014) &lt;- code_dict\nlevels(LULC_LIBERIA_2019) &lt;- code_dict\nlevels(LULC_LIBERIA_2024) &lt;- code_dict\nvoi = terra::vect(aoi_states)\nLULC_PROJECT_2014 = terra::crop(LULC_LIBERIA_2014, voi, mask=T)\nLULC_PROJECT_2019 = terra::crop(LULC_LIBERIA_2019, voi, mask=T)\nLULC_PROJECT_2024 = terra::crop(LULC_LIBERIA_2024, voi, mask=T)\nterra::plot(LULC_LIBERIA_2014, main=\"Land Cover, 2014\")\n\n\n\n\n\n\n\nterra::plot(LULC_LIBERIA_2019, main=\"Land Cover, 2019\")\n\n\n\n\n\n\n\nterra::plot(LULC_LIBERIA_2024, main=\"Land Cover, 2024\")\n\n\n\n\n\n\n\nterra::plot(LULC_PROJECT_2014, main=\"Land Cover, 2014\")\n\n\n\n\n\n\n\nterra::plot(LULC_PROJECT_2019, main=\"Land Cover, 2019\")\n\n\n\n\n\n\n\nterra::plot(LULC_PROJECT_2024, main=\"Land Cover, 2024\")\n\n\n\n\n\n\n\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\ncompute_land_cover_summary &lt;- function(aoi_states, rasters, pixel_area) {\n  results = list()\n  for (region in unique(aoi_states$NAME_1)) {\n    for (year in names(rasters)) {\n      cropped_raster = terra::crop(\n        rasters[[year]], \n        aoi_states[aoi_states$NAME_1 == region, ], \n        mask = TRUE)\n      freq = terra::freq(cropped_raster)\n      freq$area_ha = freq$count * pixel_area\n      freq$percentage = (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region = region\n      freq$year = year\n      results[[paste(region, year, sep = \"_\")]] = freq\n    }\n  }\n  do.call(rbind, results)\n}\n\n# Example call\nrasters = list(\"2014\" = LULC_PROJECT_2014, \"2019\" = LULC_PROJECT_2019, \"2024\" = LULC_PROJECT_2024)\nland_cover_summary = compute_land_cover_summary(aoi_states, rasters, pixel_area_ha)\nland_cover_summary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayer\nvalue\ncount\narea_ha\npercentage\nregion\nyear\n\n\n\n\nBong_2014.1\n1\nBareground\n2453\n218.106\n0.0259391\nBong\n2014\n\n\nBong_2014.2\n1\nFarmbush\n385925\n34314.135\n4.0809358\nBong\n2014\n\n\nBong_2014.3\n1\nForest\n8881960\n789730.591\n93.9216395\nBong\n2014\n\n\nBong_2014.4\n1\nRegrowth\n156899\n13950.518\n1.6591171\nBong\n2014\n\n\nBong_2014.5\n1\nSwamp\n29540\n2626.520\n0.3123686\nBong\n2014\n\n\nBong_2019.1\n1\nBareground\n202602\n18014.154\n2.1423494\nBong\n2019\n\n\nBong_2019.2\n1\nFarmbush\n241848\n21503.673\n2.5573435\nBong\n2019\n\n\nBong_2019.3\n1\nForest\n8499118\n755690.578\n89.8711759\nBong\n2019\n\n\nBong_2019.4\n1\nRegrowth\n478344\n42531.478\n5.0580940\nBong\n2019\n\n\nBong_2019.5\n1\nSwamp\n35089\n3119.903\n0.3710373\nBong\n2019\n\n\nBong_2024.1\n1\nFarmbush\n47398\n4214.346\n0.5014843\nBong\n2024\n\n\nBong_2024.2\n1\nForest\n9077035\n807075.490\n96.0376095\nBong\n2024\n\n\nBong_2024.3\n1\nRegrowth\n301099\n26771.916\n3.1857130\nBong\n2024\n\n\nBong_2024.4\n1\nSwamp\n26010\n2312.653\n0.2751932\nBong\n2024\n\n\n\n\n\n\n\n\n\nBaseline Deforestation\n# Reproject crs to enable metric area estimates\nLULC_PROJECT_2014 = terra::project(LULC_PROJECT_2014, \"EPSG:32629\")\nLULC_PROJECT_2019 = terra::project(LULC_PROJECT_2019, \"EPSG:32629\")\nLULC_PROJECT_2024 = terra::project(LULC_PROJECT_2024, \"EPSG:32629\")\n\n# Derive binary forest layers\nforest_class = 3\nforest_2014 &lt;- LULC_PROJECT_2014 == forest_class\nforest_2019 &lt;- LULC_PROJECT_2019 == forest_class\nforest_2024 &lt;- LULC_PROJECT_2024 == forest_class\n\n# Gross forest loss\nforest_loss_2014_2019_gross &lt;- forest_2014 & !forest_2019\nforest_loss_2019_2024_gross &lt;- forest_2019 & !forest_2024\nforest_loss_2014_2024_gross &lt;- forest_2014 & !forest_2024\n\n# Gross forest gain\nforest_gain_2014_2019_gross &lt;- !forest_2014 & forest_2019\nforest_gain_2019_2024_gross &lt;- !forest_2019 & forest_2024\nforest_gain_2014_2024_gross &lt;- !forest_2014 & forest_2024\n\n# Forest net loss \nforest_loss_2014_2019 &lt;- forest_loss_2014_2019_gross & !forest_gain_2014_2019_gross\nforest_loss_2019_2024 &lt;- forest_loss_2019_2024_gross & !forest_gain_2019_2024_gross\nforest_loss_2014_2024 &lt;- forest_loss_2014_2024_gross & !forest_gain_2014_2024_gross\n\n# Save & visualize\nraster::writeRaster(forest_2014, \"./assets/LULC/outputs/forest_2014.tif\",overwrite=T)\nraster::writeRaster(forest_2019, \"./assets/LULC/outputs/forest_2019.tif\",overwrite=T)\nraster::writeRaster(forest_2024, \"./assets/LULC/outputs/forest_2024.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2014_2019, \"./assets/LULC/outputs//forest_loss_2014_2019.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2019_2024, \"./assets/LULC/outputs//forest_loss_2019_2024.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2014_2024, \"./assets/LULC/outputs//forest_loss_2014_2024.tif\",overwrite=T)\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_estimate &lt;- sum(forest_2014[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_estimate &lt;- sum(forest_2019[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_estimate &lt;- sum(forest_2024[], na.rm = TRUE) * resolution^2 / 10000\nforest_loss_2014_2019_estimate &lt;- sum(forest_loss_2014_2019[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_estimate &lt;- sum(forest_loss_2019_2024[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_estimate &lt;- sum(forest_loss_2014_2024[],na.rm=T)*resolution^2/10000\ncat(\"Total forest area across Bong County in 2014:\", forest_2014_estimate, \"hectares\\n\")\ncat(\"Total forest area across Bong County in 2019:\", forest_2019_estimate, \"hectares\\n\")\ncat(\"Total forest area across Bong County in 2024\", forest_2024_estimate, \"hectares\\n\")\ncat(\"Total forest loss across Bong County between 2014 & 2024:\", forest_loss_2014_2024_estimate, \"hectares\\n\")\nterra::plot(forest_2014, main=\"Forest Cover Map, 2014\")\nterra::plot(forest_2019, main=\"Forest Cover Map, 2019\")\nterra::plot(forest_2024, main=\"Forest Cover Map, 2024\")\nterra::plot(forest_loss_2014_2024, main=\"Forest Loss Map, 2014-2024\")\n\n\n\nforest_2014=terra::rast(\"./assets/LULC/outputs/forest_2014.tif\")\nforest_2019=terra::rast(\"./assets/LULC/outputs/forest_2019.tif\")\nforest_2024=terra::rast(\"./assets/LULC/outputs/forest_2024.tif\")\nforest_loss_2014_2024=terra::rast(\"./assets/LULC/outputs//forest_loss_2014_2024.tif\")\n\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_estimate &lt;- sum(forest_2014[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_estimate &lt;- sum(forest_2019[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_estimate &lt;- sum(forest_2024[], na.rm = TRUE) * resolution^2 / 10000\nforest_loss_2014_2024_estimate &lt;- sum(forest_loss_2014_2024[],na.rm=T)*resolution^2/10000\n\n# Create a data frame for better presentation\nforest_summary &lt;- data.frame(\n  Year = c(\"2014\", \"2019\", \"2024\", \"Loss 2014-2024\"),\n  `Forest Area (hectares)` = c(\n    format(forest_2014_estimate, big.mark = \",\", digits = 1),\n    format(forest_2019_estimate, big.mark = \",\", digits = 1),\n    format(forest_2024_estimate, big.mark = \",\", digits = 1),\n    format(forest_loss_2014_2024_estimate, big.mark = \",\", digits = 1)\n  )\n)\n\nknitr::kable(forest_summary, \n             caption = \"Forest Cover Summary for Bong County\",\n             align = c(\"l\", \"r\"))\nterra::plot(forest_2014, main=\"Forest Cover Map, 2014\")\nterra::plot(forest_2019, main=\"Forest Cover Map, 2019\")\nterra::plot(forest_2024, main=\"Forest Cover Map, 2024\")\nterra::plot(forest_loss_2014_2024, main=\"Forest Loss Map, 2014-2024\")\n\n\n\n\nForest Cover Summary for Bong County\n\n\nYear\nForest.Area..hectares.\n\n\n\n\n2014\n8e+05\n\n\n2019\n8e+05\n\n\n2024\n8e+05\n\n\nLoss 2014-2024\n21,183\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBaseline Emissions\nThe baseline emissions calculation for Bong County follows the Verra VM0048 methodology for REDD+ projects, utilizing carbon stock values derived from regional reference data. Carbon stock values were stratified according to forest management categories consistent with Community Forest designations.\nTable 3: Carbon Stock Parameters for Bong County (tCO2 ha-1)\n\n\n\n\n\n\n\n\n\nCarbon Pool\nCommunity Forest\nPost-Deforestation\n∆ C Community Forest\n\n\n\n\nAbove-ground Biomass (CAB_Tree)\n452.74\n95.25\n357.49\n\n\nBelow-ground Biomass (CBB_Tree)\n108.64\n25.73\n82.91\n\n\nSoil Organic Carbon (CSOC)\n167.33\n130.55\n36.78\n\n\nTotal Carbon Stock Loss\n728.71\n251.53\n477.18\n\n\n\nPost-deforestation soil organic carbon stocks were calculated using IPCC 2006 Guidelines factors for land-use change from forest to agricultural systems:\nTable 4: IPCC Soil Organic Carbon Factors\n\n\n\n\n\n\n\n\n\nParameter\nValue\nDefinition\nSource\n\n\n\n\nF(Lu)\n0.83\nStock change factor for land-use (forest to agriculture)\nIPCC Chapter 5, Table 5.5\n\n\nF(MG)\n1.00\nManagement regime factor (full tillage)\nIPCC Chapter 5, Table 5.5\n\n\nF(I)\n0.94\nInput factor (low residue return)\nIPCC Chapter 5, Table 5.5\n\n\n\nPost-deforestation SOC = Pre-deforestation SOC × F(Lu) × F(MG) × F(I)\nPost-deforestation SOC = 167.33 × 0.83 × 1.00 × 0.94 = 130.55 tCO2 ha-1\nBaseline Emissions = Annual Deforestation Area × Carbon Stock Loss per Hectare**\nTable 5: Baseline Emissions for Bong County\n\n\n\n\n\n\n\n\n\nComponent\nAnnual Area (ha)\nEmission Factor (tCO2/ha)\nAnnual Emissions (tCO2)\n\n\n\n\nAbove-ground Biomass Loss\n4,654\n357.49\n1,663,679\n\n\nBelow-ground Biomass Loss\n4,654\n82.91\n385,874\n\n\nSoil Organic Carbon Loss\n4,654\n36.78\n171,210\n\n\nTotal Annual Baseline Emissions\n4,654\n477.18\n2,220,763\n\n\n\n\n\nBaseline Trends\nBased on the land cover classification results from Section 2, the historical reference period (2014-2024) analysis for Bong County shows:\nTable 6: Historical Forest Cover and Deforestation in Bong County\n\n\n\nMetric\nValue\n\n\n\n\nForest Area 2014\n493,600 ha\n\n\nForest Area 2019\n485,932 ha\n\n\nForest Area 2024\n447,059 ha\n\n\nTotal Forest Loss (2014-2024)\n46,541 ha\n\n\nAverage Annual Deforestation\n4,654 ha/year\n\n\nAnnual Deforestation Rate\n0.94%\n\n\n\n\n\nRuntime Info\n\nsession_info.show()\n\n-----\nbackports           NA\nee                  1.2.0\ngeemap              0.16.4\ngoogle              NA\nipyleaflet          0.19.2\nnumpy               1.26.4\nsession_info        1.0.0\n-----\nClick to view modules imported as dependencies\n-----\nIPython             7.34.0\njupyter_client      6.1.12\njupyter_core        5.7.2\njupyterlab          4.3.3\nnotebook            6.5.5\n-----\nPython 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]\nLinux-6.1.85+-x86_64-with-glibc2.35\n-----\nSession information updated at 2024-12-15 22:22\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       macOS 15.6.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Vancouver\n date     2025-08-26\n pandoc   3.6.1 @ /usr/local/bin/ (via rmarkdown)\n quarto   1.7.33 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package           * version    date (UTC) lib source\n abind               1.4-8      2024-09-12 [1] CRAN (R 4.3.3)\n animation         * 2.7        2021-10-07 [1] CRAN (R 4.3.3)\n backports           1.5.0      2024-05-23 [1] CRAN (R 4.3.3)\n base64enc           0.1-3      2015-07-28 [1] CRAN (R 4.3.3)\n bibtex            * 0.5.1      2023-01-26 [1] CRAN (R 4.3.3)\n BIOMASS           * 2.2.4      2025-05-19 [1] CRAN (R 4.3.3)\n cachem              1.1.0      2024-05-16 [1] CRAN (R 4.3.3)\n cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.3.0)\n chromote            0.5.1      2025-04-24 [1] CRAN (R 4.3.3)\n class               7.3-23     2025-01-01 [1] CRAN (R 4.3.3)\n classInt            0.4-11     2025-01-08 [1] CRAN (R 4.3.3)\n cli                 3.6.5      2025-04-23 [1] CRAN (R 4.3.3)\n codetools           0.2-20     2024-03-31 [1] CRAN (R 4.3.1)\n colorspace          2.1-1      2024-07-26 [1] CRAN (R 4.3.3)\n cols4all            0.8        2024-10-16 [1] CRAN (R 4.3.3)\n crosstalk           1.2.1      2023-11-23 [1] CRAN (R 4.3.3)\n data.table          1.17.8     2025-07-10 [1] CRAN (R 4.3.3)\n DBI                 1.2.3      2024-06-02 [1] CRAN (R 4.3.3)\n devtools            2.4.5      2022-10-11 [1] CRAN (R 4.3.0)\n dials               1.4.0      2025-02-13 [1] CRAN (R 4.3.3)\n DiceDesign          1.10       2023-12-07 [1] CRAN (R 4.3.3)\n dichromat           2.0-0.1    2022-05-02 [1] CRAN (R 4.3.3)\n digest              0.6.37     2024-08-19 [1] CRAN (R 4.3.3)\n dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.3.1)\n e1071               1.7-16     2024-09-16 [1] CRAN (R 4.3.3)\n ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.3.3)\n evaluate            1.0.4      2025-06-18 [1] CRAN (R 4.3.3)\n extrafont         * 0.19       2023-01-18 [1] CRAN (R 4.3.3)\n extrafontdb         1.0        2012-06-11 [1] CRAN (R 4.3.3)\n farver              2.1.2      2024-05-13 [1] CRAN (R 4.3.3)\n fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.3.3)\n forcats             1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n foreach             1.5.2      2022-02-02 [1] CRAN (R 4.3.3)\n fs                  1.6.6      2025-04-12 [1] CRAN (R 4.3.3)\n furrr               0.3.1      2022-08-15 [1] CRAN (R 4.3.0)\n future              1.40.0     2025-04-10 [1] CRAN (R 4.3.3)\n future.apply        1.11.3     2024-10-27 [1] CRAN (R 4.3.3)\n generics            0.1.4      2025-05-09 [1] CRAN (R 4.3.3)\n geodata           * 0.6-2      2024-06-10 [1] CRAN (R 4.3.3)\n ggplot2           * 3.5.2      2025-04-09 [1] CRAN (R 4.3.3)\n globals             0.17.0     2025-04-16 [1] CRAN (R 4.3.3)\n glue                1.8.0      2024-09-30 [1] CRAN (R 4.3.3)\n gower               1.0.2      2024-12-17 [1] CRAN (R 4.3.3)\n GPfit               1.0-9      2025-04-12 [1] CRAN (R 4.3.3)\n gridExtra           2.3        2017-09-09 [1] CRAN (R 4.3.3)\n gtable              0.3.6      2024-10-25 [1] CRAN (R 4.3.3)\n hardhat             1.4.1      2025-01-31 [1] CRAN (R 4.3.3)\n hms                 1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools         * 0.5.8.1    2024-04-04 [1] CRAN (R 4.3.3)\n htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.3.1)\n httpuv              1.6.16     2025-04-16 [1] CRAN (R 4.3.3)\n ipred               0.9-15     2024-07-18 [1] CRAN (R 4.3.3)\n iterators           1.0.14     2022-02-05 [1] CRAN (R 4.3.3)\n janitor           * 2.2.1      2024-12-22 [1] CRAN (R 4.3.3)\n jquerylib           0.1.4      2021-04-26 [1] CRAN (R 4.3.3)\n jsonlite            2.0.0      2025-03-27 [1] CRAN (R 4.3.3)\n kableExtra        * 1.4.0      2024-01-24 [1] CRAN (R 4.3.1)\n KernSmooth          2.23-26    2025-01-01 [1] CRAN (R 4.3.3)\n knitr             * 1.50       2025-03-16 [1] CRAN (R 4.3.3)\n later               1.4.2      2025-04-08 [1] CRAN (R 4.3.3)\n lattice             0.22-7     2025-04-02 [1] CRAN (R 4.3.3)\n lava                1.8.1      2025-01-12 [1] CRAN (R 4.3.3)\n leafem              0.2.4      2025-05-01 [1] CRAN (R 4.3.3)\n leaflegend          1.2.1      2024-05-09 [1] CRAN (R 4.3.3)\n leaflet             2.2.2      2024-03-26 [1] CRAN (R 4.3.1)\n leaflet.providers   2.0.0      2023-10-17 [1] CRAN (R 4.3.3)\n leafsync            0.1.0      2019-03-05 [1] CRAN (R 4.3.0)\n lhs                 1.2.0      2024-06-30 [1] CRAN (R 4.3.3)\n lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.3.3)\n listenv             0.9.1      2024-01-29 [1] CRAN (R 4.3.3)\n logger              0.4.0      2024-10-22 [1] CRAN (R 4.3.3)\n lubridate           1.9.4      2024-12-08 [1] CRAN (R 4.3.3)\n lwgeom              0.2-14     2024-02-21 [1] CRAN (R 4.3.1)\n magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.3.3)\n maptiles            0.10.0     2025-05-07 [1] CRAN (R 4.3.3)\n MASS                7.3-60.0.1 2024-01-13 [1] CRAN (R 4.3.1)\n Matrix              1.6-5      2024-01-11 [1] CRAN (R 4.3.1)\n memoise             2.0.1      2021-11-26 [1] CRAN (R 4.3.3)\n microbenchmark      1.5.0      2024-09-04 [1] CRAN (R 4.3.3)\n mime                0.13       2025-03-17 [1] CRAN (R 4.3.3)\n miniUI              0.1.2      2025-04-17 [1] CRAN (R 4.3.3)\n minpack.lm          1.2-4      2023-09-11 [1] CRAN (R 4.3.3)\n nnet                7.3-20     2025-01-01 [1] CRAN (R 4.3.3)\n openxlsx          * 4.2.8      2025-01-25 [1] CRAN (R 4.3.3)\n pacman              0.5.1      2019-03-11 [1] CRAN (R 4.3.3)\n parallelly          1.45.0     2025-06-02 [1] CRAN (R 4.3.3)\n parsnip             1.3.2      2025-05-28 [1] CRAN (R 4.3.3)\n pillar              1.11.0     2025-07-04 [1] CRAN (R 4.3.3)\n pkgbuild            1.4.8      2025-05-26 [1] CRAN (R 4.3.3)\n pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.3.3)\n pkgload             1.4.0      2024-06-28 [1] CRAN (R 4.3.3)\n plyr                1.8.9      2023-10-02 [1] CRAN (R 4.3.3)\n png                 0.1-8      2022-11-29 [1] CRAN (R 4.3.3)\n processx            3.8.6      2025-02-21 [1] CRAN (R 4.3.3)\n prodlim             2025.04.28 2025-04-28 [1] CRAN (R 4.3.3)\n profvis             0.4.0      2024-09-20 [1] CRAN (R 4.3.3)\n PROJ              * 0.6.0      2025-04-03 [1] CRAN (R 4.3.3)\n proj4               1.0-15     2025-03-21 [1] CRAN (R 4.3.3)\n promises            1.3.3      2025-05-29 [1] CRAN (R 4.3.3)\n proxy               0.4-27     2022-06-09 [1] CRAN (R 4.3.3)\n ps                  1.9.1      2025-04-12 [1] CRAN (R 4.3.3)\n purrr               1.1.0      2025-07-10 [1] CRAN (R 4.3.0)\n R6                  2.6.1      2025-02-15 [1] CRAN (R 4.3.3)\n rappdirs            0.3.3      2021-01-31 [1] CRAN (R 4.3.3)\n raster              3.6-32     2025-03-28 [1] CRAN (R 4.3.3)\n RColorBrewer        1.1-3      2022-04-03 [1] CRAN (R 4.3.3)\n Rcpp                1.1.0      2025-07-02 [1] CRAN (R 4.3.3)\n recipes             1.3.1      2025-05-21 [1] CRAN (R 4.3.3)\n remotes             2.5.0      2024-03-17 [1] CRAN (R 4.3.3)\n reproj            * 0.7.0      2024-06-11 [1] CRAN (R 4.3.3)\n reticulate          1.42.0     2025-03-25 [1] CRAN (R 4.3.3)\n rlang               1.1.6      2025-04-11 [1] CRAN (R 4.3.3)\n rmarkdown           2.29       2024-11-04 [1] CRAN (R 4.3.3)\n rpart               4.1.24     2025-01-07 [1] CRAN (R 4.3.3)\n rsample             1.3.0      2025-04-02 [1] CRAN (R 4.3.3)\n rstudioapi          0.17.1     2024-10-22 [1] CRAN (R 4.3.3)\n Rttf2pt1            1.3.12     2023-01-22 [1] CRAN (R 4.3.3)\n s2                  1.1.9      2025-05-23 [1] CRAN (R 4.3.3)\n scales              1.4.0      2025-04-24 [1] CRAN (R 4.3.3)\n sessioninfo         1.2.3      2025-02-05 [1] CRAN (R 4.3.3)\n sf                * 1.0-22     2025-08-25 [1] Github (r-spatial/sf@3660edf)\n shiny               1.11.1     2025-07-03 [1] CRAN (R 4.3.3)\n snakecase           0.11.1     2023-08-27 [1] CRAN (R 4.3.0)\n sp                  2.2-0      2025-02-01 [1] CRAN (R 4.3.3)\n spacesXYZ           1.6-0      2025-06-06 [1] CRAN (R 4.3.3)\n stars               0.6-8      2025-02-01 [1] CRAN (R 4.3.3)\n stringi             1.8.7      2025-03-27 [1] CRAN (R 4.3.3)\n stringr             1.5.1      2023-11-14 [1] CRAN (R 4.3.1)\n survival            3.8-3      2024-12-17 [1] CRAN (R 4.3.3)\n svglite             2.2.1      2025-05-12 [1] CRAN (R 4.3.3)\n systemfonts         1.2.3      2025-04-30 [1] CRAN (R 4.3.3)\n terra             * 1.8-60     2025-07-21 [1] CRAN (R 4.3.0)\n textshaping         1.0.1      2025-05-01 [1] CRAN (R 4.3.3)\n tibble              3.3.0      2025-06-08 [1] CRAN (R 4.3.3)\n tidyr               1.3.1      2024-01-24 [1] CRAN (R 4.3.1)\n tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.3.1)\n timechange          0.3.0      2024-01-18 [1] CRAN (R 4.3.3)\n timeDate            4041.110   2024-09-22 [1] CRAN (R 4.3.3)\n tinytex           * 0.57       2025-04-15 [1] CRAN (R 4.3.3)\n tmap              * 4.1        2025-05-12 [1] CRAN (R 4.3.3)\n tmaptools         * 3.2        2025-01-13 [1] CRAN (R 4.3.3)\n tune              * 1.3.0      2025-02-21 [1] CRAN (R 4.3.3)\n units               0.8-7      2025-03-11 [1] CRAN (R 4.3.3)\n urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.3.3)\n useful            * 1.2.6.1    2023-10-24 [1] CRAN (R 4.3.1)\n usethis             3.1.0      2024-11-26 [1] CRAN (R 4.3.3)\n vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.3.3)\n viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.3.3)\n webshot           * 0.5.5      2023-06-26 [1] CRAN (R 4.3.0)\n webshot2          * 0.1.2      2025-04-23 [1] CRAN (R 4.3.3)\n websocket           1.4.4      2025-04-10 [1] CRAN (R 4.3.3)\n withr               3.0.2      2024-10-28 [1] CRAN (R 4.3.3)\n wk                  0.9.4      2024-10-11 [1] CRAN (R 4.3.3)\n workflows           1.2.0      2025-02-19 [1] CRAN (R 4.3.3)\n xfun                0.53       2025-08-19 [1] CRAN (R 4.3.0)\n XML                 3.99-0.18  2025-01-01 [1] CRAN (R 4.3.3)\n xml2                1.3.8      2025-03-14 [1] CRAN (R 4.3.3)\n xtable              1.8-4      2019-04-21 [1] CRAN (R 4.3.3)\n yaml                2.3.10     2024-07-26 [1] CRAN (R 4.3.3)\n yardstick           1.3.2      2025-01-22 [1] CRAN (R 4.3.3)\n zip                 2.3.3      2025-05-13 [1] CRAN (R 4.3.3)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Home",
      "Baseline"
    ]
  }
]