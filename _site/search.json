[
  {
    "objectID": "locator-map.html#aois-projection",
    "href": "locator-map.html#aois-projection",
    "title": "Locator Maps",
    "section": "1. AOI’s & projection",
    "text": "1. AOI’s & projection\n\ncrs_master = st_crs('epsg:4326')\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\naoi_country = giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\naoi_region = giscoR::gisco_get_countries(\n  country = c(\"Malawi\", \"Zambia\", \"Tanzania\", \"Mozambique\"), resolution = \"3\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\n\nbbox_site  = terrainr::add_bbox_buffer(aoi_site, 20000, \"meters\")\nbbox_country = terrainr::add_bbox_buffer(aoi_country, 40000, \"meters\")\nbbox_region = terrainr::add_bbox_buffer(aoi_region, 80000, \"meters\")\n\nvbox_site = vect(bbox_site)\nvbox_region = vect(bbox_region)\nvbox_country = terra::vect(terra::ext(vect(aoi_country)) * 1.3) |&gt; sf::st_as_sf()\nsf::st_crs(vbox_country) &lt;- \"epsg:4326\" \n\n# Interactive map mode: \"view\" \ntmap::tmap_mode(\"view\")\ntmap::tm_shape(vbox_country) +\n  tmap::tm_borders(lwd = 2, col = \"green\") +\n  tmap::tm_shape(aoi_region) +\n  tmap::tm_borders(lwd = 1, col = \"blue\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\n\n\n\n\nFigure 2: Interactive map showing site boundary, national borders, and national bounding box",
    "crumbs": [
      "Home",
      "Locator Maps"
    ]
  },
  {
    "objectID": "locator-map.html#download-basemap",
    "href": "locator-map.html#download-basemap",
    "title": "Locator Maps",
    "section": "2. Download basemap",
    "text": "2. Download basemap\n\n# zoom = 8 returns scale of 1:2,000,000\nbasemap_4m = maptiles::get_tiles(\n  bbox_region, \n  zoom      = 8, \n  crop      = T,\n  provider  = \"CartoDB.Positron\"\n)\n\ntmap::tmap_mode(\"plot\")\ncountry_map = tmap::tm_shape(vbox_country) + tm_borders(lwd = 0.0, col = \"black\") +\n  tmap::tm_shape(basemap_4m) + tm_rgb(alpha=0.2) + \n  tmap::tm_shape(aoi_site) + tm_borders(lwd=2, col = \"red\", fill=\"#e28672\", fill_alpha=0.5) +\n  tmap::tm_shape(aoi_region) + tm_borders(lwd = 0.5, col = \"black\") +\n  tmap::tm_compass(type=\"4star\", size=1.1, color.dark = \"gray60\", text.color=\"gray60\",position=c(\"LEFT\", \"TOP\")\n    ) \n\ntmap::tmap_save(\n  country_map, \"/Users/seamus/Repos/map-templates/assets/outputs/02-country-map.png\")\ncountry_map\n\n\n\n\nFigure 3: Interactive map showing site boundary, national borders, and downloaded basemap.",
    "crumbs": [
      "Home",
      "Locator Maps"
    ]
  },
  {
    "objectID": "locator-map.html#customize-layout",
    "href": "locator-map.html#customize-layout",
    "title": "Locator Maps",
    "section": "3. Customize layout",
    "text": "3. Customize layout\n\nmain_map = tmap::tmap_grob(site_map)\ninset_map = tmap::tmap_grob(country_map)\n\nlocator_map = ggdraw() +\n  draw_plot(main_map) +\n  draw_plot(inset_map, x = -0.39, y=0.4, height = 0.45)",
    "crumbs": [
      "Home",
      "Locator Maps"
    ]
  },
  {
    "objectID": "locator-map.html#save-output",
    "href": "locator-map.html#save-output",
    "title": "Locator Maps",
    "section": "4. Save output",
    "text": "4. Save output\n\nggsave(locator_map, \"/Users/seamus/Repos/map-templates/assets/outputs/03-locator-map.png\")\n\n\n\n\nFigure 4: Locator map showing site area and location at 1:4,000,000 & 1:150,000 scales\n\n\n\ndevtools::session_info()\n\nNA ─ Session info ───────────────────────────────────────────────────────────────\nNA  setting  value\nNA  version  R version 4.3.0 (2023-04-21)\nNA  os       macOS 15.2\nNA  system   aarch64, darwin20\nNA  ui       X11\nNA  language (EN)\nNA  collate  en_US.UTF-8\nNA  ctype    en_US.UTF-8\nNA  tz       America/Vancouver\nNA  date     2025-02-06\nNA  pandoc   3.6.1 @ /usr/local/bin/ (via rmarkdown)\nNA \nNA ─ Packages ───────────────────────────────────────────────────────────────────\nNA  package            * version    date (UTC) lib source\nNA  abind              * 1.4-8      2024-09-12 [1] CRAN (R 4.3.3)\nNA  ape                  5.8-1      2024-12-16 [1] CRAN (R 4.3.3)\nNA  assertthat           0.2.1      2019-03-21 [1] CRAN (R 4.3.0)\nNA  backports            1.5.0      2024-05-23 [1] CRAN (R 4.3.3)\nNA  base64enc            0.1-3      2015-07-28 [1] CRAN (R 4.3.0)\nNA  bit                  4.5.0.1    2024-12-03 [1] CRAN (R 4.3.3)\nNA  bit64                4.6.0-1    2025-01-16 [1] CRAN (R 4.3.3)\nNA  bitops               1.0-9      2024-10-03 [1] CRAN (R 4.3.3)\nNA  boot                 1.3-31     2024-08-28 [1] CRAN (R 4.3.3)\nNA  brio                 1.1.5      2024-04-24 [1] CRAN (R 4.3.1)\nNA  broom                1.0.7      2024-09-26 [1] CRAN (R 4.3.3)\nNA  bslib              * 0.8.0      2024-07-29 [1] CRAN (R 4.3.3)\nNA  cachem               1.1.0      2024-05-16 [1] CRAN (R 4.3.3)\nNA  callr                3.7.6      2024-03-25 [1] CRAN (R 4.3.1)\nNA  car                  3.1-3      2024-09-27 [1] CRAN (R 4.3.3)\nNA  carData              3.0-5      2022-01-06 [1] CRAN (R 4.3.0)\nNA  caret              * 7.0-1      2024-12-10 [1] CRAN (R 4.3.3)\nNA  class                7.3-23     2025-01-01 [1] CRAN (R 4.3.3)\nNA  classInt             0.4-11     2025-01-08 [1] CRAN (R 4.3.3)\nNA  cli                * 3.6.3      2024-06-21 [1] CRAN (R 4.3.3)\nNA  clue                 0.3-66     2024-11-13 [1] CRAN (R 4.3.3)\nNA  cluster              2.1.8      2024-12-11 [1] CRAN (R 4.3.3)\nNA  coda                 0.19-4.1   2024-01-31 [1] CRAN (R 4.3.1)\nNA  codetools            0.2-20     2024-03-31 [1] CRAN (R 4.3.1)\nNA  colorspace           2.1-1      2024-07-26 [1] CRAN (R 4.3.3)\nNA  cols4all           * 0.8        2024-10-16 [1] CRAN (R 4.3.3)\nNA  contfrac             1.1-12     2018-05-17 [1] CRAN (R 4.3.0)\nNA  coro                 1.1.0      2024-11-05 [1] CRAN (R 4.3.3)\nNA  corpcor              1.6.10     2021-09-16 [1] CRAN (R 4.3.0)\nNA  countrycode          1.6.0      2024-03-22 [1] CRAN (R 4.3.1)\nNA  covr               * 3.6.4      2023-11-09 [1] CRAN (R 4.3.1)\nNA  cowplot            * 1.1.3      2024-01-22 [1] CRAN (R 4.3.1)\nNA  crayon               1.5.3      2024-06-20 [1] CRAN (R 4.3.3)\nNA  crosstalk            1.2.1      2023-11-23 [1] CRAN (R 4.3.1)\nNA  cubature             2.1.1      2024-07-14 [1] CRAN (R 4.3.3)\nNA  data.table           1.16.4     2024-12-06 [1] CRAN (R 4.3.3)\nNA  DBI                  1.2.3      2024-06-02 [1] CRAN (R 4.3.3)\nNA  deldir               2.0-4      2024-02-28 [1] CRAN (R 4.3.1)\nNA  dendextend         * 1.19.0     2024-11-15 [1] CRAN (R 4.3.3)\nNA  deSolve              1.40       2023-11-27 [1] CRAN (R 4.3.1)\nNA  devtools             2.4.5      2022-10-11 [1] CRAN (R 4.3.0)\nNA  DiagrammeR         * 1.0.11     2024-02-02 [1] CRAN (R 4.3.1)\nNA  dichromat            2.0-0.1    2022-05-02 [1] CRAN (R 4.3.0)\nNA  digest             * 0.6.37     2024-08-19 [1] CRAN (R 4.3.3)\nNA  distances            0.1.11     2024-07-31 [1] CRAN (R 4.3.3)\nNA  doParallel           1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\nNA  downlit            * 0.4.4      2024-06-10 [1] CRAN (R 4.3.3)\nNA  dplyr              * 1.1.4      2023-11-17 [1] CRAN (R 4.3.1)\nNA  dtw                * 1.23-1     2022-09-19 [1] CRAN (R 4.3.0)\nNA  dtwclust           * 6.0.0      2024-07-23 [1] CRAN (R 4.3.3)\nNA  e1071              * 1.7-16     2024-09-16 [1] CRAN (R 4.3.3)\nNA  easypackages         0.1.0      2016-12-05 [1] CRAN (R 4.3.0)\nNA  elevatr            * 0.99.0     2023-09-12 [1] CRAN (R 4.3.0)\nNA  ellipsis             0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\nNA  elliptic             1.4-0      2019-03-14 [1] CRAN (R 4.3.0)\nNA  evaluate             1.0.3      2025-01-10 [1] CRAN (R 4.3.3)\nNA  exactextractr      * 0.10.0     2023-09-20 [1] CRAN (R 4.3.1)\nNA  fastmap              1.2.0      2024-05-15 [1] CRAN (R 4.3.3)\nNA  flexclust            1.4-2      2024-04-27 [1] CRAN (R 4.3.1)\nNA  FNN                * 1.1.4.1    2024-09-22 [1] CRAN (R 4.3.3)\nNA  forcats            * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\nNA  foreach              1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\nNA  Formula              1.2-5      2023-02-24 [1] CRAN (R 4.3.0)\nNA  fs                   1.6.5      2024-10-30 [1] CRAN (R 4.3.3)\nNA  future             * 1.34.0     2024-07-29 [1] CRAN (R 4.3.3)\nNA  future.apply         1.11.3     2024-10-27 [1] CRAN (R 4.3.3)\nNA  FuzzyNumbers         0.4-7      2021-11-15 [1] CRAN (R 4.3.0)\nNA  FuzzyNumbers.Ext.2   3.2        2017-09-05 [1] CRAN (R 4.3.0)\nNA  gdalcubes          * 0.7.0      2024-03-07 [1] CRAN (R 4.3.1)\nNA  gdalUtilities      * 1.2.5      2023-08-10 [1] CRAN (R 4.3.0)\nNA  generics             0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\nNA  geojsonsf          * 2.0.3      2022-05-30 [1] CRAN (R 4.3.0)\nNA  geos               * 0.2.4      2023-11-30 [1] CRAN (R 4.3.1)\nNA  ggmap              * 4.0.0      2023-11-19 [1] CRAN (R 4.3.1)\nNA  ggplot2            * 3.5.1      2024-04-23 [1] CRAN (R 4.3.1)\nNA  ggplotify          * 0.1.2      2023-08-09 [1] CRAN (R 4.3.0)\nNA  ggpubr             * 0.6.0      2023-02-10 [1] CRAN (R 4.3.0)\nNA  ggrepel            * 0.9.6      2024-09-07 [1] CRAN (R 4.3.3)\nNA  ggsignif             0.6.4      2022-10-13 [1] CRAN (R 4.3.0)\nNA  ggspatial          * 1.1.9      2023-08-17 [1] CRAN (R 4.3.0)\nNA  ggstats            * 0.8.0      2025-01-07 [1] CRAN (R 4.3.3)\nNA  giscoR             * 0.6.0      2024-08-28 [1] CRAN (R 4.3.3)\nNA  globals              0.16.3     2024-03-08 [1] CRAN (R 4.3.1)\nNA  glue                 1.8.0      2024-09-30 [1] CRAN (R 4.3.3)\nNA  gmm                  1.8        2023-06-06 [1] CRAN (R 4.3.0)\nNA  gower                1.0.2      2024-12-17 [1] CRAN (R 4.3.3)\nNA  gridExtra            2.3        2017-09-09 [1] CRAN (R 4.3.0)\nNA  gridGraphics         0.5-1      2020-12-13 [1] CRAN (R 4.3.0)\nNA  gtable               0.3.6      2024-10-25 [1] CRAN (R 4.3.3)\nNA  hardhat              1.4.0      2024-06-02 [1] CRAN (R 4.3.3)\nNA  hdf5r              * 1.3.11     2024-07-07 [1] CRAN (R 4.3.3)\nNA  hexbin               1.28.5     2024-11-13 [1] CRAN (R 4.3.3)\nNA  hms                  1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\nNA  htmltools          * 0.5.8.1    2024-04-04 [1] CRAN (R 4.3.1)\nNA  htmlwidgets          1.6.4      2023-12-06 [1] CRAN (R 4.3.1)\nNA  httpuv               1.6.15     2024-03-26 [1] CRAN (R 4.3.1)\nNA  httr               * 1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\nNA  httr2              * 1.0.7      2024-11-26 [1] CRAN (R 4.3.3)\nNA  hypergeo             1.2-13     2016-04-07 [1] CRAN (R 4.3.0)\nNA  interp               1.1-6      2024-01-26 [1] CRAN (R 4.3.1)\nNA  ipred                0.9-15     2024-07-18 [1] CRAN (R 4.3.3)\nNA  iterators            1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\nNA  jpeg                 0.1-10     2022-11-29 [1] CRAN (R 4.3.0)\nNA  jquerylib            0.1.4      2021-04-26 [1] CRAN (R 4.3.0)\nNA  jsonlite           * 1.8.9      2024-09-20 [1] CRAN (R 4.3.3)\nNA  KernSmooth           2.23-26    2025-01-01 [1] CRAN (R 4.3.3)\nNA  knitr                1.49       2024-11-08 [1] CRAN (R 4.3.3)\nNA  kohonen            * 3.0.12     2023-06-09 [1] CRAN (R 4.3.0)\nNA  later                1.4.1      2024-11-27 [1] CRAN (R 4.3.3)\nNA  lattice            * 0.22-6     2024-03-20 [1] CRAN (R 4.3.1)\nNA  latticeExtra         0.6-30     2022-07-04 [1] CRAN (R 4.3.0)\nNA  lava                 1.8.1      2025-01-12 [1] CRAN (R 4.3.3)\nNA  lazyeval             0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\nNA  leafem             * 0.2.3      2023-09-17 [1] CRAN (R 4.3.1)\nNA  leafgl             * 0.2.2      2024-11-13 [1] CRAN (R 4.3.3)\nNA  leaflegend           1.2.1      2024-05-09 [1] CRAN (R 4.3.3)\nNA  leaflet            * 2.2.2      2024-03-26 [1] CRAN (R 4.3.1)\nNA  leaflet.providers    2.0.0      2023-10-17 [1] CRAN (R 4.3.1)\nNA  leafsync             0.1.0      2019-03-05 [1] CRAN (R 4.3.0)\nNA  libgeos            * 3.11.1-2   2023-11-29 [1] CRAN (R 4.3.1)\nNA  lifecycle            1.0.4      2023-11-07 [1] CRAN (R 4.3.1)\nNA  listenv              0.9.1      2024-01-29 [1] CRAN (R 4.3.1)\nNA  lubridate          * 1.9.4      2024-12-08 [1] CRAN (R 4.3.3)\nNA  luz                * 0.4.0      2023-04-17 [1] CRAN (R 4.3.0)\nNA  lwgeom             * 0.2-14     2024-02-21 [1] CRAN (R 4.3.1)\nNA  magrittr             2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\nNA  mapedit            * 0.6.0      2020-02-02 [1] CRAN (R 4.3.0)\nNA  maptiles           * 0.8.0      2025-01-21 [1] Github (riatelab/maptiles@513b7d4)\nNA  mapview            * 2.11.2     2023-10-13 [1] CRAN (R 4.3.1)\nNA  MASS                 7.3-58.4   2023-03-07 [2] CRAN (R 4.3.0)\nNA  Matrix               1.6-5      2024-01-11 [1] CRAN (R 4.3.1)\nNA  matrixcalc           1.0-6      2022-09-14 [1] CRAN (R 4.3.0)\nNA  MCMCglmm             2.36       2024-05-06 [1] CRAN (R 4.3.1)\nNA  memoise              2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\nNA  mgcv               * 1.9-1      2023-12-21 [1] CRAN (R 4.3.1)\nNA  microbenchmark       1.5.0      2024-09-04 [1] CRAN (R 4.3.3)\nNA  mime                 0.12       2021-09-28 [1] CRAN (R 4.3.0)\nNA  miniUI               0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\nNA  ModelMetrics         1.2.2.2    2020-03-17 [1] CRAN (R 4.3.0)\nNA  modeltools           0.2-23     2020-03-05 [1] CRAN (R 4.3.0)\nNA  MomTrunc             6.1        2024-10-28 [1] CRAN (R 4.3.3)\nNA  munsell              0.5.1      2024-04-01 [1] CRAN (R 4.3.1)\nNA  mvtnorm              1.3-3      2025-01-10 [1] CRAN (R 4.3.3)\nNA  ncdf4              * 1.23       2024-08-17 [1] CRAN (R 4.3.3)\nNA  nlme               * 3.1-166    2024-08-14 [1] CRAN (R 4.3.3)\nNA  nnet               * 7.3-20     2025-01-01 [1] CRAN (R 4.3.3)\nNA  openxlsx           * 4.2.7.1    2024-09-20 [1] CRAN (R 4.3.3)\nNA  parallelly           1.41.0     2024-12-18 [1] CRAN (R 4.3.3)\nNA  pillar               1.10.1     2025-01-07 [1] CRAN (R 4.3.3)\nNA  pkgbuild             1.4.6      2025-01-16 [1] CRAN (R 4.3.3)\nNA  pkgconfig            2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\nNA  pkgload              1.4.0      2024-06-28 [1] CRAN (R 4.3.3)\nNA  plotly             * 4.10.4     2024-01-13 [1] CRAN (R 4.3.1)\nNA  plyr                 1.8.9      2023-10-02 [1] CRAN (R 4.3.1)\nNA  png                  0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\nNA  prettyunits          1.2.0      2023-09-24 [1] CRAN (R 4.3.1)\nNA  pROC                 1.18.5     2023-11-01 [1] CRAN (R 4.3.1)\nNA  processx             3.8.5      2025-01-08 [1] CRAN (R 4.3.3)\nNA  prodlim              2024.06.25 2024-06-24 [1] CRAN (R 4.3.3)\nNA  profvis              0.4.0      2024-09-20 [1] CRAN (R 4.3.3)\nNA  progress             1.2.3      2023-12-06 [1] CRAN (R 4.3.1)\nNA  progressr            0.15.1     2024-11-22 [1] CRAN (R 4.3.3)\nNA  promises             1.3.2      2024-11-28 [1] CRAN (R 4.3.3)\nNA  proxy              * 0.4-27     2022-06-09 [1] CRAN (R 4.3.0)\nNA  ps                   1.8.1      2024-10-28 [1] CRAN (R 4.3.3)\nNA  purrr              * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\nNA  R6                   2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\nNA  randomForest       * 4.7-1.2    2024-09-22 [1] CRAN (R 4.3.3)\nNA  rappdirs             0.3.3      2021-01-31 [1] CRAN (R 4.3.0)\nNA  raster             * 3.6-31     2025-01-16 [1] CRAN (R 4.3.3)\nNA  rasterVis          * 0.51.6     2023-11-01 [1] CRAN (R 4.3.1)\nNA  rayshader          * 0.37.3     2024-02-21 [1] CRAN (R 4.3.1)\nNA  rbibutils            2.3        2024-10-04 [1] CRAN (R 4.3.3)\nNA  RColorBrewer       * 1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\nNA  Rcpp               * 1.0.14     2025-01-12 [1] CRAN (R 4.3.3)\nNA  RcppArmadillo      * 14.2.2-1   2024-12-06 [1] CRAN (R 4.3.3)\nNA  RcppCensSpatial    * 0.3.0      2022-06-27 [1] CRAN (R 4.3.0)\nNA  RcppEigen          * 0.3.4.0.2  2024-08-24 [1] CRAN (R 4.3.3)\nNA  RcppParallel       * 5.1.9      2024-08-19 [1] CRAN (R 4.3.3)\nNA  RCurl                1.98-1.16  2024-07-11 [1] CRAN (R 4.3.3)\nNA  Rdpack               2.6.2      2024-11-15 [1] CRAN (R 4.3.3)\nNA  reactable          * 0.4.4      2023-03-12 [1] CRAN (R 4.3.0)\nNA  readr              * 2.1.5      2024-01-10 [1] CRAN (R 4.3.1)\nNA  recipes              1.1.0      2024-07-04 [1] CRAN (R 4.3.3)\nNA  relliptical          1.3.0      2024-02-07 [1] CRAN (R 4.3.1)\nNA  remotes              2.5.0      2024-03-17 [1] CRAN (R 4.3.1)\nNA  reshape2             1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\nNA  rex                  1.2.1      2021-11-26 [1] CRAN (R 4.3.0)\nNA  rgl                * 1.3.16     2025-01-06 [1] CRAN (R 4.3.3)\nNA  rlang                1.1.4      2024-06-04 [1] CRAN (R 4.3.3)\nNA  rmarkdown            2.29       2024-11-04 [1] CRAN (R 4.3.3)\nNA  rpart                4.1.24     2025-01-07 [1] CRAN (R 4.3.3)\nNA  rsconnect          * 1.3.3      2024-11-19 [1] CRAN (R 4.3.3)\nNA  RSpectra             0.16-2     2024-07-18 [1] CRAN (R 4.3.3)\nNA  rstatix              0.7.2      2023-02-01 [1] CRAN (R 4.3.0)\nNA  RStoolbox          * 1.0.0      2024-04-25 [1] CRAN (R 4.3.1)\nNA  rstudioapi           0.17.1     2024-10-22 [1] CRAN (R 4.3.3)\nNA  rts                * 1.1-14     2023-10-01 [1] CRAN (R 4.3.1)\nNA  Ryacas0              0.4.4      2023-01-12 [1] CRAN (R 4.3.0)\nNA  s2                 * 1.1.7      2024-07-17 [1] CRAN (R 4.3.3)\nNA  sandwich             3.1-1      2024-09-15 [1] CRAN (R 4.3.3)\nNA  sass                 0.4.9      2024-03-15 [1] CRAN (R 4.3.1)\nNA  satellite            1.0.5      2024-02-10 [1] CRAN (R 4.3.1)\nNA  scales             * 1.3.0      2023-11-28 [1] CRAN (R 4.3.1)\nNA  sessioninfo          1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\nNA  settings             0.2.7      2021-05-07 [1] CRAN (R 4.3.0)\nNA  sf                 * 1.0-20     2025-01-27 [1] Github (r-spatial/sf@c88e743)\nNA  shiny                1.10.0     2024-12-14 [1] CRAN (R 4.3.3)\nNA  shinyjs              2.1.0      2021-12-23 [1] CRAN (R 4.3.0)\nNA  sits               * 1.5.1      2024-08-19 [1] CRAN (R 4.3.3)\nNA  sp                 * 2.1-4      2024-04-30 [1] CRAN (R 4.3.1)\nNA  spacesXYZ            1.3-0      2024-01-23 [1] CRAN (R 4.3.1)\nNA  spData             * 2.3.4      2025-01-08 [1] CRAN (R 4.3.3)\nNA  spdep              * 1.3-8      2024-12-02 [1] CRAN (R 4.3.3)\nNA  stars              * 0.6-7      2024-11-07 [1] CRAN (R 4.3.3)\nNA  StempCens            1.1.0      2020-10-21 [1] CRAN (R 4.3.0)\nNA  stringi              1.8.4      2024-05-06 [1] CRAN (R 4.3.1)\nNA  stringr            * 1.5.1      2023-11-14 [1] CRAN (R 4.3.1)\nNA  supercells         * 1.0.0      2024-02-11 [1] CRAN (R 4.3.1)\nNA  survival             3.8-3      2024-12-17 [1] CRAN (R 4.3.3)\nNA  tensorA              0.36.2.1   2023-12-13 [1] CRAN (R 4.3.1)\nNA  terra              * 1.8-15     2025-01-24 [1] CRAN (R 4.3.0)\nNA  terrainr           * 0.7.5      2023-10-04 [1] CRAN (R 4.3.1)\nNA  testthat           * 3.2.3      2025-01-13 [1] CRAN (R 4.3.3)\nNA  tibble             * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\nNA  tidyr              * 1.3.1      2024-01-24 [1] CRAN (R 4.3.1)\nNA  tidyselect           1.2.1      2024-03-11 [1] CRAN (R 4.3.1)\nNA  tidyterra          * 0.6.2      2025-01-08 [1] CRAN (R 4.3.3)\nNA  tidyverse          * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\nNA  timechange           0.3.0      2024-01-18 [1] CRAN (R 4.3.1)\nNA  timeDate             4041.110   2024-09-22 [1] CRAN (R 4.3.3)\nNA  tlrmvnmvt            1.1.2      2022-06-09 [1] CRAN (R 4.3.0)\nNA  tmap               * 4.0        2025-01-21 [1] Github (r-tmap/tmap@457173d)\nNA  tmaptools          * 3.2        2025-01-21 [1] Github (r-tmap/tmaptools@b43c48b)\nNA  tmvtnorm             1.6        2023-12-05 [1] CRAN (R 4.3.1)\nNA  torch                0.13.0     2024-05-21 [1] CRAN (R 4.3.3)\nNA  tzdb                 0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\nNA  unifir               0.2.4      2024-02-01 [1] CRAN (R 4.3.1)\nNA  units                0.8-5      2023-11-28 [1] CRAN (R 4.3.1)\nNA  urlchecker           1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\nNA  usethis              3.1.0      2024-11-26 [1] CRAN (R 4.3.3)\nNA  vctrs                0.6.5      2023-12-01 [1] CRAN (R 4.3.1)\nNA  viridis              0.6.5      2024-01-29 [1] CRAN (R 4.3.1)\nNA  viridisLite          0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\nNA  visNetwork           2.1.2      2022-09-29 [1] CRAN (R 4.3.0)\nNA  withr                3.0.2      2024-10-28 [1] CRAN (R 4.3.3)\nNA  wk                   0.9.4      2024-10-11 [1] CRAN (R 4.3.3)\nNA  xfun                 0.50       2025-01-07 [1] CRAN (R 4.3.3)\nNA  xgboost            * 1.7.8.1    2024-07-24 [1] CRAN (R 4.3.3)\nNA  XML                  3.99-0.18  2025-01-01 [1] CRAN (R 4.3.3)\nNA  xml2                 1.3.6      2023-12-04 [1] CRAN (R 4.3.1)\nNA  xtable               1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\nNA  xts                * 0.14.1     2024-10-15 [1] CRAN (R 4.3.3)\nNA  yaml                 2.3.10     2024-07-26 [1] CRAN (R 4.3.3)\nNA  yulab.utils          0.1.9      2025-01-07 [1] CRAN (R 4.3.3)\nNA  zeallot              0.1.0      2018-01-28 [1] CRAN (R 4.3.0)\nNA  zip                  2.3.1      2024-01-27 [1] CRAN (R 4.3.1)\nNA  zoo                * 1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\nNA \nNA  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\nNA  [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\nNA \nNA ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Home",
      "Locator Maps"
    ]
  },
  {
    "objectID": "assets/inputs/rivers_country.html",
    "href": "assets/inputs/rivers_country.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "assets/inputs/chilwa_watershed_extent.html",
    "href": "assets/inputs/chilwa_watershed_extent.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n         0 0     false"
  },
  {
    "objectID": "assets/inputs/lakes_country.html",
    "href": "assets/inputs/lakes_country.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "site-map.html#aois-projection",
    "href": "site-map.html#aois-projection",
    "title": "Site Maps",
    "section": "1. AOI’s & projection",
    "text": "1. AOI’s & projection\n\ncrs_master = sf::st_crs('epsg:4326')\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |&gt;\n  sf::st_cast() |&gt; sf::st_transform(crs_master)\nbbox_site  = terrainr::add_bbox_buffer(aoi_site, 20000, \"meters\")\nvbox_site = terra::vect(bbox_site)\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_site) +\n  tmap::tm_borders(col = \"red\") +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n\n\n\n\n\nFigure 2: Interactive map showing project boundary and ESRI’s basemap",
    "crumbs": [
      "Home",
      "Site Maps"
    ]
  },
  {
    "objectID": "site-map.html#download-basemap",
    "href": "site-map.html#download-basemap",
    "title": "Site Maps",
    "section": "2. Download basemap",
    "text": "2. Download basemap\n\n# zoom = 12 sources basemap at scale of 1:150,000\nbasemap_150k = maptiles::get_tiles(\n  bbox_site, \n  zoom      = 10, \n  crop      = T,\n  provider  = \"OpenTopoMap\"\n)\n\nNA \n|---------|---------|---------|---------|\n=========================================\n                                          \n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(basemap_150k) + tmap::tm_rgb() + \n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(col=\"red\")\n\n\n\n\n\nFigure 3: Site map showing project boundary and downloaded basemap OpenTopoMap",
    "crumbs": [
      "Home",
      "Site Maps"
    ]
  },
  {
    "objectID": "site-map.html#customize-layout",
    "href": "site-map.html#customize-layout",
    "title": "Site Maps",
    "section": "3. Customize layout",
    "text": "3. Customize layout\n\ntmap::tmap_mode(\"plot\")\nsite_map = tmap::tm_shape(basemap_150k) + tmap::tm_rgb() + \n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 1, col = \"red\") +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_credits(\"EPSG:4326\", position = c(\"left\", \"bottom\")) +\n  tmap::tm_scale_bar(c(0, 10, 20, 40), position = c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(\n    type = \"4star\", size = 1.5,\n    color.dark = \"gray60\", text.color = \"gray60\",\n    position = c(\"left\", \"top\")\n    ) # some functions deprecated & may need updating (tm_scale_bar() | tm_scalebar())",
    "crumbs": [
      "Home",
      "Site Maps"
    ]
  },
  {
    "objectID": "site-map.html#save-output",
    "href": "site-map.html#save-output",
    "title": "Site Maps",
    "section": "4. Save output",
    "text": "4. Save output\n\n# `width` & `height` controls output resolution \n# `dpi` controls size of map attributes relative to output resolution\ntmap::tmap_save(\n  site_map, \"/Users/seamus/Repos/map-templates/assets/outputs/01-site-draft.png\", \n  width=15120, height=15120, asp=0, dpi=600\n  )\n\n\n\n\nFigure 4: Site Map rendered with customized attributes and resolution (15120x15120pixels)\n\n\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       macOS 15.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Vancouver\n date     2025-02-06\n pandoc   3.6.1 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package            * version    date (UTC) lib source\n abind              * 1.4-8      2024-09-12 [1] CRAN (R 4.3.3)\n ape                  5.8-1      2024-12-16 [1] CRAN (R 4.3.3)\n assertthat           0.2.1      2019-03-21 [1] CRAN (R 4.3.0)\n backports            1.5.0      2024-05-23 [1] CRAN (R 4.3.3)\n base64enc            0.1-3      2015-07-28 [1] CRAN (R 4.3.0)\n bit                  4.5.0.1    2024-12-03 [1] CRAN (R 4.3.3)\n bit64                4.6.0-1    2025-01-16 [1] CRAN (R 4.3.3)\n bitops               1.0-9      2024-10-03 [1] CRAN (R 4.3.3)\n boot                 1.3-31     2024-08-28 [1] CRAN (R 4.3.3)\n brio                 1.1.5      2024-04-24 [1] CRAN (R 4.3.1)\n broom                1.0.7      2024-09-26 [1] CRAN (R 4.3.3)\n bslib              * 0.8.0      2024-07-29 [1] CRAN (R 4.3.3)\n cachem               1.1.0      2024-05-16 [1] CRAN (R 4.3.3)\n callr                3.7.6      2024-03-25 [1] CRAN (R 4.3.1)\n car                  3.1-3      2024-09-27 [1] CRAN (R 4.3.3)\n carData              3.0-5      2022-01-06 [1] CRAN (R 4.3.0)\n caret                7.0-1      2024-12-10 [1] CRAN (R 4.3.3)\n class                7.3-23     2025-01-01 [1] CRAN (R 4.3.3)\n classInt             0.4-11     2025-01-08 [1] CRAN (R 4.3.3)\n cli                  3.6.3      2024-06-21 [1] CRAN (R 4.3.3)\n clue                 0.3-66     2024-11-13 [1] CRAN (R 4.3.3)\n cluster              2.1.8      2024-12-11 [1] CRAN (R 4.3.3)\n coda                 0.19-4.1   2024-01-31 [1] CRAN (R 4.3.1)\n codetools            0.2-20     2024-03-31 [1] CRAN (R 4.3.1)\n colorspace           2.1-1      2024-07-26 [1] CRAN (R 4.3.3)\n cols4all           * 0.8        2024-10-16 [1] CRAN (R 4.3.3)\n contfrac             1.1-12     2018-05-17 [1] CRAN (R 4.3.0)\n coro                 1.1.0      2024-11-05 [1] CRAN (R 4.3.3)\n corpcor              1.6.10     2021-09-16 [1] CRAN (R 4.3.0)\n covr               * 3.6.4      2023-11-09 [1] CRAN (R 4.3.1)\n cowplot            * 1.1.3      2024-01-22 [1] CRAN (R 4.3.1)\n crayon               1.5.3      2024-06-20 [1] CRAN (R 4.3.3)\n crosstalk            1.2.1      2023-11-23 [1] CRAN (R 4.3.1)\n cubature             2.1.1      2024-07-14 [1] CRAN (R 4.3.3)\n data.table           1.16.4     2024-12-06 [1] CRAN (R 4.3.3)\n DBI                  1.2.3      2024-06-02 [1] CRAN (R 4.3.3)\n deldir               2.0-4      2024-02-28 [1] CRAN (R 4.3.1)\n dendextend         * 1.19.0     2024-11-15 [1] CRAN (R 4.3.3)\n deSolve              1.40       2023-11-27 [1] CRAN (R 4.3.1)\n devtools             2.4.5      2022-10-11 [1] CRAN (R 4.3.0)\n DiagrammeR         * 1.0.11     2024-02-02 [1] CRAN (R 4.3.1)\n dichromat            2.0-0.1    2022-05-02 [1] CRAN (R 4.3.0)\n digest             * 0.6.37     2024-08-19 [1] CRAN (R 4.3.3)\n distances            0.1.11     2024-07-31 [1] CRAN (R 4.3.3)\n doParallel           1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\n downlit            * 0.4.4      2024-06-10 [1] CRAN (R 4.3.3)\n dplyr              * 1.1.4      2023-11-17 [1] CRAN (R 4.3.1)\n dtw                * 1.23-1     2022-09-19 [1] CRAN (R 4.3.0)\n dtwclust           * 6.0.0      2024-07-23 [1] CRAN (R 4.3.3)\n e1071              * 1.7-16     2024-09-16 [1] CRAN (R 4.3.3)\n easypackages         0.1.0      2016-12-05 [1] CRAN (R 4.3.0)\n elevatr            * 0.99.0     2023-09-12 [1] CRAN (R 4.3.0)\n ellipsis             0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n elliptic             1.4-0      2019-03-14 [1] CRAN (R 4.3.0)\n evaluate             1.0.3      2025-01-10 [1] CRAN (R 4.3.3)\n exactextractr      * 0.10.0     2023-09-20 [1] CRAN (R 4.3.1)\n fastmap              1.2.0      2024-05-15 [1] CRAN (R 4.3.3)\n flexclust            1.4-2      2024-04-27 [1] CRAN (R 4.3.1)\n FNN                * 1.1.4.1    2024-09-22 [1] CRAN (R 4.3.3)\n forcats            * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n foreach              1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\n Formula              1.2-5      2023-02-24 [1] CRAN (R 4.3.0)\n fs                   1.6.5      2024-10-30 [1] CRAN (R 4.3.3)\n future             * 1.34.0     2024-07-29 [1] CRAN (R 4.3.3)\n future.apply         1.11.3     2024-10-27 [1] CRAN (R 4.3.3)\n FuzzyNumbers         0.4-7      2021-11-15 [1] CRAN (R 4.3.0)\n FuzzyNumbers.Ext.2   3.2        2017-09-05 [1] CRAN (R 4.3.0)\n gdalcubes          * 0.7.0      2024-03-07 [1] CRAN (R 4.3.1)\n gdalUtilities      * 1.2.5      2023-08-10 [1] CRAN (R 4.3.0)\n generics             0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n geojsonsf          * 2.0.3      2022-05-30 [1] CRAN (R 4.3.0)\n geos               * 0.2.4      2023-11-30 [1] CRAN (R 4.3.1)\n ggmap              * 4.0.0      2023-11-19 [1] CRAN (R 4.3.1)\n ggplot2            * 3.5.1      2024-04-23 [1] CRAN (R 4.3.1)\n ggplotify          * 0.1.2      2023-08-09 [1] CRAN (R 4.3.0)\n ggpubr             * 0.6.0      2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel            * 0.9.6      2024-09-07 [1] CRAN (R 4.3.3)\n ggsignif             0.6.4      2022-10-13 [1] CRAN (R 4.3.0)\n ggspatial          * 1.1.9      2023-08-17 [1] CRAN (R 4.3.0)\n ggstats            * 0.8.0      2025-01-07 [1] CRAN (R 4.3.3)\n giscoR             * 0.6.0      2024-08-28 [1] CRAN (R 4.3.3)\n globals              0.16.3     2024-03-08 [1] CRAN (R 4.3.1)\n glue                 1.8.0      2024-09-30 [1] CRAN (R 4.3.3)\n gmm                  1.8        2023-06-06 [1] CRAN (R 4.3.0)\n gower                1.0.2      2024-12-17 [1] CRAN (R 4.3.3)\n gridExtra            2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics         0.5-1      2020-12-13 [1] CRAN (R 4.3.0)\n gtable               0.3.6      2024-10-25 [1] CRAN (R 4.3.3)\n hardhat              1.4.0      2024-06-02 [1] CRAN (R 4.3.3)\n hdf5r              * 1.3.11     2024-07-07 [1] CRAN (R 4.3.3)\n hexbin               1.28.5     2024-11-13 [1] CRAN (R 4.3.3)\n hms                  1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools          * 0.5.8.1    2024-04-04 [1] CRAN (R 4.3.1)\n htmlwidgets          1.6.4      2023-12-06 [1] CRAN (R 4.3.1)\n httpuv               1.6.15     2024-03-26 [1] CRAN (R 4.3.1)\n httr               * 1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n httr2              * 1.0.7      2024-11-26 [1] CRAN (R 4.3.3)\n hypergeo             1.2-13     2016-04-07 [1] CRAN (R 4.3.0)\n interp               1.1-6      2024-01-26 [1] CRAN (R 4.3.1)\n ipred                0.9-15     2024-07-18 [1] CRAN (R 4.3.3)\n iterators            1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\n jpeg                 0.1-10     2022-11-29 [1] CRAN (R 4.3.0)\n jquerylib            0.1.4      2021-04-26 [1] CRAN (R 4.3.0)\n jsonlite           * 1.8.9      2024-09-20 [1] CRAN (R 4.3.3)\n KernSmooth           2.23-26    2025-01-01 [1] CRAN (R 4.3.3)\n knitr                1.49       2024-11-08 [1] CRAN (R 4.3.3)\n kohonen            * 3.0.12     2023-06-09 [1] CRAN (R 4.3.0)\n later                1.4.1      2024-11-27 [1] CRAN (R 4.3.3)\n lattice            * 0.22-6     2024-03-20 [1] CRAN (R 4.3.1)\n latticeExtra         0.6-30     2022-07-04 [1] CRAN (R 4.3.0)\n lava                 1.8.1      2025-01-12 [1] CRAN (R 4.3.3)\n lazyeval             0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n leafem             * 0.2.3      2023-09-17 [1] CRAN (R 4.3.1)\n leafgl             * 0.2.2      2024-11-13 [1] CRAN (R 4.3.3)\n leaflegend           1.2.1      2024-05-09 [1] CRAN (R 4.3.3)\n leaflet            * 2.2.2      2024-03-26 [1] CRAN (R 4.3.1)\n leaflet.providers  * 2.0.0      2023-10-17 [1] CRAN (R 4.3.1)\n leafsync             0.1.0      2019-03-05 [1] CRAN (R 4.3.0)\n libgeos            * 3.11.1-2   2023-11-29 [1] CRAN (R 4.3.1)\n lifecycle            1.0.4      2023-11-07 [1] CRAN (R 4.3.1)\n listenv              0.9.1      2024-01-29 [1] CRAN (R 4.3.1)\n lubridate          * 1.9.4      2024-12-08 [1] CRAN (R 4.3.3)\n luz                * 0.4.0      2023-04-17 [1] CRAN (R 4.3.0)\n lwgeom             * 0.2-14     2024-02-21 [1] CRAN (R 4.3.1)\n magrittr             2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n mapedit            * 0.6.0      2020-02-02 [1] CRAN (R 4.3.0)\n maptiles           * 0.8.0      2025-01-21 [1] Github (riatelab/maptiles@513b7d4)\n mapview            * 2.11.2     2023-10-13 [1] CRAN (R 4.3.1)\n MASS                 7.3-58.4   2023-03-07 [2] CRAN (R 4.3.0)\n Matrix               1.6-5      2024-01-11 [1] CRAN (R 4.3.1)\n matrixcalc           1.0-6      2022-09-14 [1] CRAN (R 4.3.0)\n MCMCglmm             2.36       2024-05-06 [1] CRAN (R 4.3.1)\n memoise              2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mgcv               * 1.9-1      2023-12-21 [1] CRAN (R 4.3.1)\n microbenchmark       1.5.0      2024-09-04 [1] CRAN (R 4.3.3)\n mime                 0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI               0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n ModelMetrics         1.2.2.2    2020-03-17 [1] CRAN (R 4.3.0)\n modeltools           0.2-23     2020-03-05 [1] CRAN (R 4.3.0)\n MomTrunc             6.1        2024-10-28 [1] CRAN (R 4.3.3)\n munsell              0.5.1      2024-04-01 [1] CRAN (R 4.3.1)\n mvtnorm              1.3-3      2025-01-10 [1] CRAN (R 4.3.3)\n ncdf4              * 1.23       2024-08-17 [1] CRAN (R 4.3.3)\n nlme               * 3.1-166    2024-08-14 [1] CRAN (R 4.3.3)\n nnet               * 7.3-20     2025-01-01 [1] CRAN (R 4.3.3)\n openxlsx           * 4.2.7.1    2024-09-20 [1] CRAN (R 4.3.3)\n parallelly           1.41.0     2024-12-18 [1] CRAN (R 4.3.3)\n pillar               1.10.1     2025-01-07 [1] CRAN (R 4.3.3)\n pkgbuild             1.4.6      2025-01-16 [1] CRAN (R 4.3.3)\n pkgconfig            2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload              1.4.0      2024-06-28 [1] CRAN (R 4.3.3)\n plotly             * 4.10.4     2024-01-13 [1] CRAN (R 4.3.1)\n plyr                 1.8.9      2023-10-02 [1] CRAN (R 4.3.1)\n png                  0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits          1.2.0      2023-09-24 [1] CRAN (R 4.3.1)\n pROC                 1.18.5     2023-11-01 [1] CRAN (R 4.3.1)\n processx             3.8.5      2025-01-08 [1] CRAN (R 4.3.3)\n prodlim              2024.06.25 2024-06-24 [1] CRAN (R 4.3.3)\n profvis              0.4.0      2024-09-20 [1] CRAN (R 4.3.3)\n progress             1.2.3      2023-12-06 [1] CRAN (R 4.3.1)\n progressr            0.15.1     2024-11-22 [1] CRAN (R 4.3.3)\n promises             1.3.2      2024-11-28 [1] CRAN (R 4.3.3)\n proxy              * 0.4-27     2022-06-09 [1] CRAN (R 4.3.0)\n ps                   1.8.1      2024-10-28 [1] CRAN (R 4.3.3)\n purrr              * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6                   2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n randomForest       * 4.7-1.2    2024-09-22 [1] CRAN (R 4.3.3)\n rappdirs             0.3.3      2021-01-31 [1] CRAN (R 4.3.0)\n raster             * 3.6-31     2025-01-16 [1] CRAN (R 4.3.3)\n rasterVis          * 0.51.6     2023-11-01 [1] CRAN (R 4.3.1)\n rayshader          * 0.37.3     2024-02-21 [1] CRAN (R 4.3.1)\n rbibutils            2.3        2024-10-04 [1] CRAN (R 4.3.3)\n RColorBrewer       * 1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp               * 1.0.14     2025-01-12 [1] CRAN (R 4.3.3)\n RcppArmadillo      * 14.2.2-1   2024-12-06 [1] CRAN (R 4.3.3)\n RcppCensSpatial    * 0.3.0      2022-06-27 [1] CRAN (R 4.3.0)\n RcppEigen          * 0.3.4.0.2  2024-08-24 [1] CRAN (R 4.3.3)\n RcppParallel       * 5.1.9      2024-08-19 [1] CRAN (R 4.3.3)\n RCurl                1.98-1.16  2024-07-11 [1] CRAN (R 4.3.3)\n Rdpack               2.6.2      2024-11-15 [1] CRAN (R 4.3.3)\n reactable          * 0.4.4      2023-03-12 [1] CRAN (R 4.3.0)\n readr              * 2.1.5      2024-01-10 [1] CRAN (R 4.3.1)\n recipes              1.1.0      2024-07-04 [1] CRAN (R 4.3.3)\n relliptical          1.3.0      2024-02-07 [1] CRAN (R 4.3.1)\n remotes              2.5.0      2024-03-17 [1] CRAN (R 4.3.1)\n reshape2             1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rex                  1.2.1      2021-11-26 [1] CRAN (R 4.3.0)\n rgl                * 1.3.16     2025-01-06 [1] CRAN (R 4.3.3)\n rlang                1.1.4      2024-06-04 [1] CRAN (R 4.3.3)\n rmarkdown            2.29       2024-11-04 [1] CRAN (R 4.3.3)\n rpart                4.1.24     2025-01-07 [1] CRAN (R 4.3.3)\n rsconnect          * 1.3.3      2024-11-19 [1] CRAN (R 4.3.3)\n RSpectra             0.16-2     2024-07-18 [1] CRAN (R 4.3.3)\n rstatix              0.7.2      2023-02-01 [1] CRAN (R 4.3.0)\n RStoolbox          * 1.0.0      2024-04-25 [1] CRAN (R 4.3.1)\n rstudioapi           0.17.1     2024-10-22 [1] CRAN (R 4.3.3)\n rts                * 1.1-14     2023-10-01 [1] CRAN (R 4.3.1)\n Ryacas0              0.4.4      2023-01-12 [1] CRAN (R 4.3.0)\n s2                 * 1.1.7      2024-07-17 [1] CRAN (R 4.3.3)\n sandwich             3.1-1      2024-09-15 [1] CRAN (R 4.3.3)\n sass                 0.4.9      2024-03-15 [1] CRAN (R 4.3.1)\n satellite            1.0.5      2024-02-10 [1] CRAN (R 4.3.1)\n scales             * 1.3.0      2023-11-28 [1] CRAN (R 4.3.1)\n sessioninfo          1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n settings             0.2.7      2021-05-07 [1] CRAN (R 4.3.0)\n sf                 * 1.0-20     2025-01-27 [1] Github (r-spatial/sf@c88e743)\n shiny                1.10.0     2024-12-14 [1] CRAN (R 4.3.3)\n shinyjs              2.1.0      2021-12-23 [1] CRAN (R 4.3.0)\n sits               * 1.5.1      2024-08-19 [1] CRAN (R 4.3.3)\n sp                 * 2.1-4      2024-04-30 [1] CRAN (R 4.3.1)\n spacesXYZ            1.3-0      2024-01-23 [1] CRAN (R 4.3.1)\n spData             * 2.3.4      2025-01-08 [1] CRAN (R 4.3.3)\n spdep              * 1.3-8      2024-12-02 [1] CRAN (R 4.3.3)\n stars              * 0.6-7      2024-11-07 [1] CRAN (R 4.3.3)\n StempCens            1.1.0      2020-10-21 [1] CRAN (R 4.3.0)\n stringi              1.8.4      2024-05-06 [1] CRAN (R 4.3.1)\n stringr            * 1.5.1      2023-11-14 [1] CRAN (R 4.3.1)\n supercells         * 1.0.0      2024-02-11 [1] CRAN (R 4.3.1)\n survival             3.8-3      2024-12-17 [1] CRAN (R 4.3.3)\n tensorA              0.36.2.1   2023-12-13 [1] CRAN (R 4.3.1)\n terra              * 1.8-15     2025-01-24 [1] CRAN (R 4.3.0)\n terrainr           * 0.7.5      2023-10-04 [1] CRAN (R 4.3.1)\n testthat           * 3.2.3      2025-01-13 [1] CRAN (R 4.3.3)\n tibble             * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr              * 1.3.1      2024-01-24 [1] CRAN (R 4.3.1)\n tidyselect           1.2.1      2024-03-11 [1] CRAN (R 4.3.1)\n tidyterra          * 0.6.2      2025-01-08 [1] CRAN (R 4.3.3)\n tidyverse          * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange           0.3.0      2024-01-18 [1] CRAN (R 4.3.1)\n timeDate             4041.110   2024-09-22 [1] CRAN (R 4.3.3)\n tlrmvnmvt            1.1.2      2022-06-09 [1] CRAN (R 4.3.0)\n tmap               * 4.0        2025-01-21 [1] Github (r-tmap/tmap@457173d)\n tmaptools          * 3.2        2025-01-21 [1] Github (r-tmap/tmaptools@b43c48b)\n tmvtnorm             1.6        2023-12-05 [1] CRAN (R 4.3.1)\n torch                0.13.0     2024-05-21 [1] CRAN (R 4.3.3)\n tzdb                 0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n unifir               0.2.4      2024-02-01 [1] CRAN (R 4.3.1)\n units                0.8-5      2023-11-28 [1] CRAN (R 4.3.1)\n urlchecker           1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis              3.1.0      2024-11-26 [1] CRAN (R 4.3.3)\n vctrs                0.6.5      2023-12-01 [1] CRAN (R 4.3.1)\n viridis              0.6.5      2024-01-29 [1] CRAN (R 4.3.1)\n viridisLite          0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n visNetwork           2.1.2      2022-09-29 [1] CRAN (R 4.3.0)\n withr                3.0.2      2024-10-28 [1] CRAN (R 4.3.3)\n wk                   0.9.4      2024-10-11 [1] CRAN (R 4.3.3)\n xfun                 0.50       2025-01-07 [1] CRAN (R 4.3.3)\n xgboost            * 1.7.8.1    2024-07-24 [1] CRAN (R 4.3.3)\n XML                  3.99-0.18  2025-01-01 [1] CRAN (R 4.3.3)\n xml2                 1.3.6      2023-12-04 [1] CRAN (R 4.3.1)\n xtable               1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n xts                * 0.14.1     2024-10-15 [1] CRAN (R 4.3.3)\n yaml                 2.3.10     2024-07-26 [1] CRAN (R 4.3.3)\n yulab.utils          0.1.9      2025-01-07 [1] CRAN (R 4.3.3)\n zeallot              0.1.0      2018-01-28 [1] CRAN (R 4.3.0)\n zip                  2.3.1      2024-01-27 [1] CRAN (R 4.3.1)\n zoo                * 1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Home",
      "Site Maps"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Seamus Murphy",
    "section": "",
    "text": "LinkedIn\n  \n  \n    \n     Github\n  \n\n  \n  \n\n\nUniversity of London | PhD in Social Anthropology | 2015",
    "crumbs": [
      "Home",
      "About",
      "Resume"
    ]
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Seamus Murphy",
    "section": "",
    "text": "University of London | PhD in Social Anthropology | 2015",
    "crumbs": [
      "Home",
      "About",
      "Resume"
    ]
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "JREDD Risk Allocated Deforestation Mapping\n\n\n\n\n\nA workflow for deriving jurisidictional allocated deforestation risk mapping compliant with Verra’s VMD0055 (V1.1) module and the VM0048 (V1.0) consolidated methodology\n\n\n\n\n\nNov 4, 2024\n\n\nSeamus Murphy\n\n\n\n\n\n\n\n\n\n\n\n\nLocator Maps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation Maps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeamus Murphy\n\n\nForester | Data Scientist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWatershed Maps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "About",
      "Projects"
    ]
  },
  {
    "objectID": "population-map.html#aois-projection",
    "href": "population-map.html#aois-projection",
    "title": "Population Maps",
    "section": "1. AOIs & projection",
    "text": "1. AOIs & projection\n\ncrs_master &lt;- st_crs(\"epsg:4326\")\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\naoi_country &lt;- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\naoi_region &lt;- giscoR::gisco_get_countries(\n  country = c(\"Malawi\", \"Zambia\", \"Tanzania\", \"Mozambique\"), resolution = \"3\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_region) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 2, col = \"red\")",
    "crumbs": [
      "Home",
      "Population Maps"
    ]
  },
  {
    "objectID": "population-map.html#download-population-data",
    "href": "population-map.html#download-population-data",
    "title": "Population Maps",
    "section": "2. Download population data",
    "text": "2. Download population data\n\n# best 1x1km raster format (person/km^2)\n#url &lt;- \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_GLOBE_R2023A/GHS_POP_E2025_GLOBE_R2023A_54009_1000/V1-0/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.zip\"\n# file_name = \"GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.tif\"\n# download.file(url = url, path = getwd(), destfile = file_name)\npop = terra::rast(\"~/repos/datasets/population/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.tif\")\npop = terra::project(pop, \"EPSG:4326\") # reproject to fix NAs\n\nNA \n|---------|---------|---------|---------|\n=========================================\n                                          \n\npop = terra::crop(pop, aoi_country, snap = \"in\", mask = T)\nnames(pop)[1] &lt;- \"density_km\" # number of persons per sq kilometer\n\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 0) +\n  tmap::tm_shape(pop) +\n  tm_raster(\n    style           = \"fixed\",\n    alpha           = 1,\n    palette         = \"OrRd\",\n    title           = \"People/Km^2\",\n    breaks          = c(0, 0.01, 10, 100, 200, 1000, 2000, 50000)\n  )",
    "crumbs": [
      "Home",
      "Population Maps"
    ]
  },
  {
    "objectID": "population-map.html#customize-layout",
    "href": "population-map.html#customize-layout",
    "title": "Population Maps",
    "section": "3. Customize layout",
    "text": "3. Customize layout\n\n# static mapping mode\ntmap::tmap_mode(\"plot\") \n\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 0) +\n  tmap::tm_shape(pop) +\n  tm_raster(\n    style           = \"fixed\",\n    alpha           = 1,\n    palette         = \"OrRd\",\n    title           = \"People/Km^2\",\n    breaks          = c(0, 0.01, 10, 100, 200, 1000, 2000, 50000)\n  ) +\n  tmap::tm_shape(aoi_region) +\n  tmap::tm_borders(lwd = 0.5, col = \"black\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 1, col = \"red\", fill_alpha = 0.5) +\n  tmap::tm_graticules(\n    lines           = T, \n    labels.rot      = c(0, 90), \n    lwd             = 0.2\n    ) +\n  tmap::tm_scalebar(\n    breaks          = c(0, 50, 100, 200),\n    position        = c(\"RIGHT\", \"BOTTOM\"),\n    text.size       = 0.5\n    ) +\n  tmap::tm_compass(\n    type            = \"4star\",\n    size            = 1,\n    color.dark      = \"gray60\",\n    text.color      = \"gray60\",\n    position        = c(\"LEFT\", \"top\")\n    ) +\n  tmap::tm_credits(\n    text            = \"EPSG:4326\", \n    color           = \"gray60\",\n    size            = 0.5,\n    position        = c(\"left\", \"BOTTOM\")\n    ) +\n  tmap::tm_layout(\n    main.title      = \"Population Density\",\n    title.size      = 1,\n    title.position  = c(\"right\", \"top\"),\n    legend.outside  = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n    legend.text.size= 0.5,\n    legend.title.size = 0.5\n    ) -&gt; map_population\nmap_population\n\n\n\n\nFigure 1: Population Map",
    "crumbs": [
      "Home",
      "Population Maps"
    ]
  },
  {
    "objectID": "population-map.html#save-output",
    "href": "population-map.html#save-output",
    "title": "Population Maps",
    "section": "4. Save output",
    "text": "4. Save output\n\ntmap::tmap_save(map_population, \"assets/outputs/04-population-map.png\", asp = 0, dpi = 600)\n\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       macOS 15.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Vancouver\n date     2025-02-06\n pandoc   3.6.1 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package            * version    date (UTC) lib source\n abind              * 1.4-8      2024-09-12 [1] CRAN (R 4.3.3)\n ape                  5.8-1      2024-12-16 [1] CRAN (R 4.3.3)\n assertthat           0.2.1      2019-03-21 [1] CRAN (R 4.3.0)\n backports            1.5.0      2024-05-23 [1] CRAN (R 4.3.3)\n base64enc            0.1-3      2015-07-28 [1] CRAN (R 4.3.0)\n bit                  4.5.0.1    2024-12-03 [1] CRAN (R 4.3.3)\n bit64                4.6.0-1    2025-01-16 [1] CRAN (R 4.3.3)\n bitops               1.0-9      2024-10-03 [1] CRAN (R 4.3.3)\n boot                 1.3-31     2024-08-28 [1] CRAN (R 4.3.3)\n brio                 1.1.5      2024-04-24 [1] CRAN (R 4.3.1)\n broom                1.0.7      2024-09-26 [1] CRAN (R 4.3.3)\n bslib              * 0.8.0      2024-07-29 [1] CRAN (R 4.3.3)\n cachem               1.1.0      2024-05-16 [1] CRAN (R 4.3.3)\n callr                3.7.6      2024-03-25 [1] CRAN (R 4.3.1)\n car                  3.1-3      2024-09-27 [1] CRAN (R 4.3.3)\n carData              3.0-5      2022-01-06 [1] CRAN (R 4.3.0)\n caret              * 7.0-1      2024-12-10 [1] CRAN (R 4.3.3)\n class                7.3-23     2025-01-01 [1] CRAN (R 4.3.3)\n classInt             0.4-11     2025-01-08 [1] CRAN (R 4.3.3)\n cli                * 3.6.3      2024-06-21 [1] CRAN (R 4.3.3)\n clue                 0.3-66     2024-11-13 [1] CRAN (R 4.3.3)\n cluster              2.1.8      2024-12-11 [1] CRAN (R 4.3.3)\n coda                 0.19-4.1   2024-01-31 [1] CRAN (R 4.3.1)\n codetools            0.2-20     2024-03-31 [1] CRAN (R 4.3.1)\n colorspace           2.1-1      2024-07-26 [1] CRAN (R 4.3.3)\n cols4all           * 0.8        2024-10-16 [1] CRAN (R 4.3.3)\n contfrac             1.1-12     2018-05-17 [1] CRAN (R 4.3.0)\n coro                 1.1.0      2024-11-05 [1] CRAN (R 4.3.3)\n corpcor              1.6.10     2021-09-16 [1] CRAN (R 4.3.0)\n countrycode          1.6.0      2024-03-22 [1] CRAN (R 4.3.1)\n covr               * 3.6.4      2023-11-09 [1] CRAN (R 4.3.1)\n cowplot            * 1.1.3      2024-01-22 [1] CRAN (R 4.3.1)\n crayon               1.5.3      2024-06-20 [1] CRAN (R 4.3.3)\n crosstalk            1.2.1      2023-11-23 [1] CRAN (R 4.3.1)\n cubature             2.1.1      2024-07-14 [1] CRAN (R 4.3.3)\n data.table           1.16.4     2024-12-06 [1] CRAN (R 4.3.3)\n DBI                  1.2.3      2024-06-02 [1] CRAN (R 4.3.3)\n deldir               2.0-4      2024-02-28 [1] CRAN (R 4.3.1)\n dendextend         * 1.19.0     2024-11-15 [1] CRAN (R 4.3.3)\n deSolve              1.40       2023-11-27 [1] CRAN (R 4.3.1)\n devtools             2.4.5      2022-10-11 [1] CRAN (R 4.3.0)\n DiagrammeR         * 1.0.11     2024-02-02 [1] CRAN (R 4.3.1)\n dichromat            2.0-0.1    2022-05-02 [1] CRAN (R 4.3.0)\n digest             * 0.6.37     2024-08-19 [1] CRAN (R 4.3.3)\n distances            0.1.11     2024-07-31 [1] CRAN (R 4.3.3)\n doParallel           1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\n downlit            * 0.4.4      2024-06-10 [1] CRAN (R 4.3.3)\n dplyr              * 1.1.4      2023-11-17 [1] CRAN (R 4.3.1)\n dtw                * 1.23-1     2022-09-19 [1] CRAN (R 4.3.0)\n dtwclust           * 6.0.0      2024-07-23 [1] CRAN (R 4.3.3)\n e1071              * 1.7-16     2024-09-16 [1] CRAN (R 4.3.3)\n easypackages         0.1.0      2016-12-05 [1] CRAN (R 4.3.0)\n elevatr            * 0.99.0     2023-09-12 [1] CRAN (R 4.3.0)\n ellipsis             0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n elliptic             1.4-0      2019-03-14 [1] CRAN (R 4.3.0)\n evaluate             1.0.3      2025-01-10 [1] CRAN (R 4.3.3)\n exactextractr      * 0.10.0     2023-09-20 [1] CRAN (R 4.3.1)\n farver               2.1.2      2024-05-13 [1] CRAN (R 4.3.3)\n fastmap              1.2.0      2024-05-15 [1] CRAN (R 4.3.3)\n flexclust            1.4-2      2024-04-27 [1] CRAN (R 4.3.1)\n FNN                * 1.1.4.1    2024-09-22 [1] CRAN (R 4.3.3)\n forcats            * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n foreach              1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\n Formula              1.2-5      2023-02-24 [1] CRAN (R 4.3.0)\n fs                   1.6.5      2024-10-30 [1] CRAN (R 4.3.3)\n future             * 1.34.0     2024-07-29 [1] CRAN (R 4.3.3)\n future.apply         1.11.3     2024-10-27 [1] CRAN (R 4.3.3)\n FuzzyNumbers         0.4-7      2021-11-15 [1] CRAN (R 4.3.0)\n FuzzyNumbers.Ext.2   3.2        2017-09-05 [1] CRAN (R 4.3.0)\n gdalcubes          * 0.7.0      2024-03-07 [1] CRAN (R 4.3.1)\n gdalUtilities      * 1.2.5      2023-08-10 [1] CRAN (R 4.3.0)\n generics             0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n geojsonsf          * 2.0.3      2022-05-30 [1] CRAN (R 4.3.0)\n geos               * 0.2.4      2023-11-30 [1] CRAN (R 4.3.1)\n ggmap              * 4.0.0      2023-11-19 [1] CRAN (R 4.3.1)\n ggplot2            * 3.5.1      2024-04-23 [1] CRAN (R 4.3.1)\n ggplotify          * 0.1.2      2023-08-09 [1] CRAN (R 4.3.0)\n ggpubr             * 0.6.0      2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel            * 0.9.6      2024-09-07 [1] CRAN (R 4.3.3)\n ggsignif             0.6.4      2022-10-13 [1] CRAN (R 4.3.0)\n ggspatial          * 1.1.9      2023-08-17 [1] CRAN (R 4.3.0)\n ggstats            * 0.8.0      2025-01-07 [1] CRAN (R 4.3.3)\n giscoR             * 0.6.0      2024-08-28 [1] CRAN (R 4.3.3)\n globals              0.16.3     2024-03-08 [1] CRAN (R 4.3.1)\n glue                 1.8.0      2024-09-30 [1] CRAN (R 4.3.3)\n gmm                  1.8        2023-06-06 [1] CRAN (R 4.3.0)\n gower                1.0.2      2024-12-17 [1] CRAN (R 4.3.3)\n gridExtra            2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics         0.5-1      2020-12-13 [1] CRAN (R 4.3.0)\n gtable               0.3.6      2024-10-25 [1] CRAN (R 4.3.3)\n hardhat              1.4.0      2024-06-02 [1] CRAN (R 4.3.3)\n hdf5r              * 1.3.11     2024-07-07 [1] CRAN (R 4.3.3)\n hexbin               1.28.5     2024-11-13 [1] CRAN (R 4.3.3)\n hms                  1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools          * 0.5.8.1    2024-04-04 [1] CRAN (R 4.3.1)\n htmlwidgets          1.6.4      2023-12-06 [1] CRAN (R 4.3.1)\n httpuv               1.6.15     2024-03-26 [1] CRAN (R 4.3.1)\n httr               * 1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n httr2              * 1.0.7      2024-11-26 [1] CRAN (R 4.3.3)\n hypergeo             1.2-13     2016-04-07 [1] CRAN (R 4.3.0)\n interp               1.1-6      2024-01-26 [1] CRAN (R 4.3.1)\n ipred                0.9-15     2024-07-18 [1] CRAN (R 4.3.3)\n iterators            1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\n jpeg                 0.1-10     2022-11-29 [1] CRAN (R 4.3.0)\n jquerylib            0.1.4      2021-04-26 [1] CRAN (R 4.3.0)\n jsonlite           * 1.8.9      2024-09-20 [1] CRAN (R 4.3.3)\n KernSmooth           2.23-26    2025-01-01 [1] CRAN (R 4.3.3)\n knitr                1.49       2024-11-08 [1] CRAN (R 4.3.3)\n kohonen            * 3.0.12     2023-06-09 [1] CRAN (R 4.3.0)\n later                1.4.1      2024-11-27 [1] CRAN (R 4.3.3)\n lattice            * 0.22-6     2024-03-20 [1] CRAN (R 4.3.1)\n latticeExtra         0.6-30     2022-07-04 [1] CRAN (R 4.3.0)\n lava                 1.8.1      2025-01-12 [1] CRAN (R 4.3.3)\n lazyeval             0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n leafem             * 0.2.3      2023-09-17 [1] CRAN (R 4.3.1)\n leafgl             * 0.2.2      2024-11-13 [1] CRAN (R 4.3.3)\n leaflegend           1.2.1      2024-05-09 [1] CRAN (R 4.3.3)\n leaflet            * 2.2.2      2024-03-26 [1] CRAN (R 4.3.1)\n leaflet.providers    2.0.0      2023-10-17 [1] CRAN (R 4.3.1)\n leafsync             0.1.0      2019-03-05 [1] CRAN (R 4.3.0)\n libgeos            * 3.11.1-2   2023-11-29 [1] CRAN (R 4.3.1)\n lifecycle            1.0.4      2023-11-07 [1] CRAN (R 4.3.1)\n listenv              0.9.1      2024-01-29 [1] CRAN (R 4.3.1)\n lubridate          * 1.9.4      2024-12-08 [1] CRAN (R 4.3.3)\n luz                * 0.4.0      2023-04-17 [1] CRAN (R 4.3.0)\n lwgeom             * 0.2-14     2024-02-21 [1] CRAN (R 4.3.1)\n magrittr             2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n mapedit            * 0.6.0      2020-02-02 [1] CRAN (R 4.3.0)\n maptiles           * 0.8.0      2025-01-21 [1] Github (riatelab/maptiles@513b7d4)\n mapview            * 2.11.2     2023-10-13 [1] CRAN (R 4.3.1)\n MASS                 7.3-58.4   2023-03-07 [2] CRAN (R 4.3.0)\n Matrix               1.6-5      2024-01-11 [1] CRAN (R 4.3.1)\n matrixcalc           1.0-6      2022-09-14 [1] CRAN (R 4.3.0)\n MCMCglmm             2.36       2024-05-06 [1] CRAN (R 4.3.1)\n memoise              2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mgcv               * 1.9-1      2023-12-21 [1] CRAN (R 4.3.1)\n microbenchmark       1.5.0      2024-09-04 [1] CRAN (R 4.3.3)\n mime                 0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI               0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n ModelMetrics         1.2.2.2    2020-03-17 [1] CRAN (R 4.3.0)\n modeltools           0.2-23     2020-03-05 [1] CRAN (R 4.3.0)\n MomTrunc             6.1        2024-10-28 [1] CRAN (R 4.3.3)\n munsell              0.5.1      2024-04-01 [1] CRAN (R 4.3.1)\n mvtnorm              1.3-3      2025-01-10 [1] CRAN (R 4.3.3)\n ncdf4              * 1.23       2024-08-17 [1] CRAN (R 4.3.3)\n nlme               * 3.1-166    2024-08-14 [1] CRAN (R 4.3.3)\n nnet               * 7.3-20     2025-01-01 [1] CRAN (R 4.3.3)\n openxlsx           * 4.2.7.1    2024-09-20 [1] CRAN (R 4.3.3)\n parallelly           1.41.0     2024-12-18 [1] CRAN (R 4.3.3)\n pillar               1.10.1     2025-01-07 [1] CRAN (R 4.3.3)\n pkgbuild             1.4.6      2025-01-16 [1] CRAN (R 4.3.3)\n pkgconfig            2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload              1.4.0      2024-06-28 [1] CRAN (R 4.3.3)\n plotly             * 4.10.4     2024-01-13 [1] CRAN (R 4.3.1)\n plyr                 1.8.9      2023-10-02 [1] CRAN (R 4.3.1)\n png                  0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits          1.2.0      2023-09-24 [1] CRAN (R 4.3.1)\n pROC                 1.18.5     2023-11-01 [1] CRAN (R 4.3.1)\n processx             3.8.5      2025-01-08 [1] CRAN (R 4.3.3)\n prodlim              2024.06.25 2024-06-24 [1] CRAN (R 4.3.3)\n profvis              0.4.0      2024-09-20 [1] CRAN (R 4.3.3)\n progress             1.2.3      2023-12-06 [1] CRAN (R 4.3.1)\n progressr            0.15.1     2024-11-22 [1] CRAN (R 4.3.3)\n promises             1.3.2      2024-11-28 [1] CRAN (R 4.3.3)\n proxy              * 0.4-27     2022-06-09 [1] CRAN (R 4.3.0)\n ps                   1.8.1      2024-10-28 [1] CRAN (R 4.3.3)\n purrr              * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6                   2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n randomForest       * 4.7-1.2    2024-09-22 [1] CRAN (R 4.3.3)\n rappdirs             0.3.3      2021-01-31 [1] CRAN (R 4.3.0)\n raster             * 3.6-31     2025-01-16 [1] CRAN (R 4.3.3)\n rasterVis          * 0.51.6     2023-11-01 [1] CRAN (R 4.3.1)\n rayshader          * 0.37.3     2024-02-21 [1] CRAN (R 4.3.1)\n rbibutils            2.3        2024-10-04 [1] CRAN (R 4.3.3)\n RColorBrewer       * 1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp               * 1.0.14     2025-01-12 [1] CRAN (R 4.3.3)\n RcppArmadillo      * 14.2.2-1   2024-12-06 [1] CRAN (R 4.3.3)\n RcppCensSpatial    * 0.3.0      2022-06-27 [1] CRAN (R 4.3.0)\n RcppEigen          * 0.3.4.0.2  2024-08-24 [1] CRAN (R 4.3.3)\n RcppParallel       * 5.1.9      2024-08-19 [1] CRAN (R 4.3.3)\n RCurl                1.98-1.16  2024-07-11 [1] CRAN (R 4.3.3)\n Rdpack               2.6.2      2024-11-15 [1] CRAN (R 4.3.3)\n reactable          * 0.4.4      2023-03-12 [1] CRAN (R 4.3.0)\n readr              * 2.1.5      2024-01-10 [1] CRAN (R 4.3.1)\n recipes              1.1.0      2024-07-04 [1] CRAN (R 4.3.3)\n relliptical          1.3.0      2024-02-07 [1] CRAN (R 4.3.1)\n remotes              2.5.0      2024-03-17 [1] CRAN (R 4.3.1)\n reshape2             1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rex                  1.2.1      2021-11-26 [1] CRAN (R 4.3.0)\n rgl                * 1.3.16     2025-01-06 [1] CRAN (R 4.3.3)\n rlang                1.1.4      2024-06-04 [1] CRAN (R 4.3.3)\n rmarkdown            2.29       2024-11-04 [1] CRAN (R 4.3.3)\n rpart                4.1.24     2025-01-07 [1] CRAN (R 4.3.3)\n rsconnect          * 1.3.3      2024-11-19 [1] CRAN (R 4.3.3)\n RSpectra             0.16-2     2024-07-18 [1] CRAN (R 4.3.3)\n rstatix              0.7.2      2023-02-01 [1] CRAN (R 4.3.0)\n RStoolbox          * 1.0.0      2024-04-25 [1] CRAN (R 4.3.1)\n rstudioapi           0.17.1     2024-10-22 [1] CRAN (R 4.3.3)\n rts                * 1.1-14     2023-10-01 [1] CRAN (R 4.3.1)\n Ryacas0              0.4.4      2023-01-12 [1] CRAN (R 4.3.0)\n s2                 * 1.1.7      2024-07-17 [1] CRAN (R 4.3.3)\n sandwich             3.1-1      2024-09-15 [1] CRAN (R 4.3.3)\n sass                 0.4.9      2024-03-15 [1] CRAN (R 4.3.1)\n satellite            1.0.5      2024-02-10 [1] CRAN (R 4.3.1)\n scales             * 1.3.0      2023-11-28 [1] CRAN (R 4.3.1)\n sessioninfo          1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n settings             0.2.7      2021-05-07 [1] CRAN (R 4.3.0)\n sf                 * 1.0-20     2025-01-27 [1] Github (r-spatial/sf@c88e743)\n shiny                1.10.0     2024-12-14 [1] CRAN (R 4.3.3)\n shinyjs              2.1.0      2021-12-23 [1] CRAN (R 4.3.0)\n sits               * 1.5.1      2024-08-19 [1] CRAN (R 4.3.3)\n sp                 * 2.1-4      2024-04-30 [1] CRAN (R 4.3.1)\n spacesXYZ            1.3-0      2024-01-23 [1] CRAN (R 4.3.1)\n spData             * 2.3.4      2025-01-08 [1] CRAN (R 4.3.3)\n spdep              * 1.3-8      2024-12-02 [1] CRAN (R 4.3.3)\n stars              * 0.6-7      2024-11-07 [1] CRAN (R 4.3.3)\n StempCens            1.1.0      2020-10-21 [1] CRAN (R 4.3.0)\n stringi              1.8.4      2024-05-06 [1] CRAN (R 4.3.1)\n stringr            * 1.5.1      2023-11-14 [1] CRAN (R 4.3.1)\n supercells         * 1.0.0      2024-02-11 [1] CRAN (R 4.3.1)\n survival             3.8-3      2024-12-17 [1] CRAN (R 4.3.3)\n tensorA              0.36.2.1   2023-12-13 [1] CRAN (R 4.3.1)\n terra              * 1.8-15     2025-01-24 [1] CRAN (R 4.3.0)\n terrainr           * 0.7.5      2023-10-04 [1] CRAN (R 4.3.1)\n testthat           * 3.2.3      2025-01-13 [1] CRAN (R 4.3.3)\n tibble             * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr              * 1.3.1      2024-01-24 [1] CRAN (R 4.3.1)\n tidyselect           1.2.1      2024-03-11 [1] CRAN (R 4.3.1)\n tidyterra          * 0.6.2      2025-01-08 [1] CRAN (R 4.3.3)\n tidyverse          * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange           0.3.0      2024-01-18 [1] CRAN (R 4.3.1)\n timeDate             4041.110   2024-09-22 [1] CRAN (R 4.3.3)\n tlrmvnmvt            1.1.2      2022-06-09 [1] CRAN (R 4.3.0)\n tmap               * 4.0        2025-01-21 [1] Github (r-tmap/tmap@457173d)\n tmaptools          * 3.2        2025-01-21 [1] Github (r-tmap/tmaptools@b43c48b)\n tmvtnorm             1.6        2023-12-05 [1] CRAN (R 4.3.1)\n torch                0.13.0     2024-05-21 [1] CRAN (R 4.3.3)\n tzdb                 0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n unifir               0.2.4      2024-02-01 [1] CRAN (R 4.3.1)\n units                0.8-5      2023-11-28 [1] CRAN (R 4.3.1)\n urlchecker           1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis              3.1.0      2024-11-26 [1] CRAN (R 4.3.3)\n vctrs                0.6.5      2023-12-01 [1] CRAN (R 4.3.1)\n viridis              0.6.5      2024-01-29 [1] CRAN (R 4.3.1)\n viridisLite          0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n visNetwork           2.1.2      2022-09-29 [1] CRAN (R 4.3.0)\n withr                3.0.2      2024-10-28 [1] CRAN (R 4.3.3)\n wk                   0.9.4      2024-10-11 [1] CRAN (R 4.3.3)\n xfun                 0.50       2025-01-07 [1] CRAN (R 4.3.3)\n xgboost            * 1.7.8.1    2024-07-24 [1] CRAN (R 4.3.3)\n XML                  3.99-0.18  2025-01-01 [1] CRAN (R 4.3.3)\n xml2                 1.3.6      2023-12-04 [1] CRAN (R 4.3.1)\n xtable               1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n xts                * 0.14.1     2024-10-15 [1] CRAN (R 4.3.3)\n yaml                 2.3.10     2024-07-26 [1] CRAN (R 4.3.3)\n yulab.utils          0.1.9      2025-01-07 [1] CRAN (R 4.3.3)\n zeallot              0.1.0      2018-01-28 [1] CRAN (R 4.3.0)\n zip                  2.3.1      2024-01-27 [1] CRAN (R 4.3.1)\n zoo                * 1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Home",
      "Population Maps"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VM0048",
    "section": "",
    "text": "Deforestation Risk Mapping\n\n\nA workflow for deriving jurisidictional allocated deforestation risk mapping compliant with Verra’s VMD0055 (V1.1) module and the VM0048 (V1.0) consolidated methodology.\n\n\n\nSeamus Murphy\n\n\nNov 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocator Maps\n\n\nA locator map showing the geographic position of a field site within its local and national context, helping users quickly identify its broader location.\n\n\n\n\n\n\nNov 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWatershed Maps\n\n\nA 3D watershed map illustrating the terrain and water flow of a watershed sub-basin, helping to analyze environmental impact, erosion, and resource management.\n\n\n\n\n\n\nNov 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation Maps\n\n\nA population density map representing the distribution of people, highlighting densely and sparsely populated regions surrounding a field site.\n\n\n\n\n\n\nNov 25, 2024\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "watershed-map.html#aois-projection",
    "href": "watershed-map.html#aois-projection",
    "title": "Watershed Maps",
    "section": "1. AOI’s & projection",
    "text": "1. AOI’s & projection\n\ncrs_master &lt;- sf::st_crs(\"epsg:4326\")\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |&gt;\n  st_cast() |&gt; st_transform(crs_master)\naoi_country &lt;- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |&gt;\n  st_cast() |&gt;\n  st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\n\n\n\n\n\nFigure 1: Interactive map showing area of interest polygons (AOI)",
    "crumbs": [
      "Home",
      "Watershed Maps"
    ]
  },
  {
    "objectID": "watershed-map.html#download-hydro-data",
    "href": "watershed-map.html#download-hydro-data",
    "title": "Watershed Maps",
    "section": "2. Download hydro data",
    "text": "2. Download hydro data\n\n#url_rivers &lt;- \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip\"\n#url_lakes &lt;- \"https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip\"\n#url_watersheds &lt;- \"https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip\"\n# download.file(url = url, path = getwd(), destfile = file_name)\n\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \nlakes    = terra::vect(\"./assets/inputs/hydro/HydroLAKES_polys_v10.shp\") \nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\n\nrivers_country = terra::crop(rivers, aoi_country) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\n\nwatershed_country = terra::crop(watershed, aoi_country) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\nwatershed_site = terra::crop(watershed, aoi_site) |&gt; \n  sf::st_as_sf() |&gt; sf::st_cast() |&gt; sf::st_transform(crs_master)\n\n#rivers_country     = sf::st_intersection(rivers, aoi_country)\n#rivers_site        = sf::st_intersection(rivers, aoi_site)\n#lakes_country      = sf::st_intersection(lakes, aoi_country)\n#lakes_site         = sf::st_intersection(lakes, aoi_site)\n#watershed_country  = sf::st_intersection(watershed, aoi_country)\n#watershed_site     = sf::st_intersection(watershed, aoi_site)\n# reproject if NAs outputed, caution of long processing time\n# watersheds &lt;- terra::project(watersheds, crs(aoi_site))\n\n# save extracted layers for faster runtime\nsf::st_write(rivers_country, \"./assets/inputs/rivers_country.shp\")\nsf::st_write(rivers_site, \"./assets/inputs/rivers_site.shp\")\nsf::st_write(lakes_country, \"./assets/inputs/lakes_country.shp\")\nsf::st_write(lakes_site, \"./assets/inputs/lakes_site.shp\")\nsf::st_write(watershed_country, \"./assets/inputs/watershed_country.shp\")\nsf::st_write(watershed_site, \"./assets/inputs/watershed_site.shp\")\n\ntmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n\n\n\nReading layer `rivers_country' from data source \n  `/Users/seamus/repos/map-templates/assets/inputs/rivers_country.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5800 features and 15 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 32.71667 ymin: -17.1271 xmax: 35.92458 ymax: -9.415806\nGeodetic CRS:  WGS 84\n\n\nReading layer `rivers_site' from data source \n  `/Users/seamus/repos/map-templates/assets/inputs/rivers_site.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 554 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 35.09583 ymin: -15.9089 xmax: 36.29583 ymax: -14.775\nGeodetic CRS:  WGS 84\n\n\nReading layer `lakes_country' from data source \n  `/Users/seamus/repos/map-templates/assets/inputs/lakes_country.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 62 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 33.13668 ymin: -16.90819 xmax: 35.88525 ymax: -9.494105\nGeodetic CRS:  WGS 84\n\n\nReading layer `lakes_site' from data source \n  `/Users/seamus/repos/map-templates/assets/inputs/lakes_site.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3 features and 22 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 35.11973 ymin: -15.74431 xmax: 35.85482 ymax: -15.04945\nGeodetic CRS:  WGS 84\n\n\nReading layer `watershed_site' from data source \n  `/Users/seamus/repos/map-templates/assets/inputs/watershed_site.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 35.09583 ymin: -15.9089 xmax: 36.29583 ymax: -14.775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nFigure 2: Interactive map showing extracted hydrographic layers",
    "crumbs": [
      "Home",
      "Watershed Maps"
    ]
  },
  {
    "objectID": "watershed-map.html#download-dem",
    "href": "watershed-map.html#download-dem",
    "title": "Watershed Maps",
    "section": "3. Download DEM",
    "text": "3. Download DEM\n\ndem_site = elevatr::get_elev_raster(\n  locations = watershed_site,\n  z = 10, clip = \"locations\")\n\ndem_site = dem_site |&gt;\n  terra::rast() |&gt;\n  terra::project(crs(watershed_site))\n\nnames(dem_site)[1] &lt;- \"Elevation (m asl)\"\n\ntmap::tm_shape(dem_site) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n\n\n\n\n\n\n\nFigure 3: Interactive map showing digital elevation model and hydrographic layers.",
    "crumbs": [
      "Home",
      "Watershed Maps"
    ]
  },
  {
    "objectID": "watershed-map.html#build-3d-map",
    "href": "watershed-map.html#build-3d-map",
    "title": "Watershed Maps",
    "section": "4. Build 3D map",
    "text": "4. Build 3D map\n\nrivers_strahler = rivers_site |&gt;\n  dplyr::mutate(\n    width = as.numeric(\n      ORD_FLOW\n    ),\n    width = dplyr::case_when(\n      width == 3 ~ 16,\n      width == 4 ~ 14,\n      width == 5 ~ 12,\n      width == 6 ~ 10,\n      width == 7 ~ 6,\n      TRUE ~ 0\n    )\n  ) |&gt;\n  sf::st_as_sf() |&gt;\n  sf::st_transform(crs = \"epsg:4326\")\n\nh &lt;- nrow(dem_site)\nw &lt;- ncol(dem_site)\n\ndem_matrix = rayshader::raster_to_matrix(dem_site)\n\ndem_matrix |&gt;\n  rayshader:: height_shade() |&gt;\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = rivers_strahler,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\",\n      linewidth  = rivers_strahler$width,\n      data_column_width = \"width\"\n      ), alphalayer = 1\n    ) |&gt;\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = lakes_site,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\"\n      ), alphalayer = 1\n    ) |&gt;\n  rayshader::plot_3d(\n    dem_matrix,\n    zscale       = 14,\n    solid        = T,\n    shadow       = T,\n    shadow_darkness = 2,\n    background   = \"white\",\n    windowsize   = c(600, 600),\n    zoom         = 0.6,\n    phi          = 40,\n    theta        = 0 \n  )",
    "crumbs": [
      "Home",
      "Watershed Maps"
    ]
  },
  {
    "objectID": "watershed-map.html#render-3d-map",
    "href": "watershed-map.html#render-3d-map",
    "title": "Watershed Maps",
    "section": "5. Render 3D map",
    "text": "5. Render 3D map\n\nrayshader::render_highquality(\n  preview        = T,\n  light          = F,\n  lightdirection = c(135, 45),\n  lightcolor = c(\"white\"),\n  lightaltitude = 25,\n  ambient_light = 0.1,\n  rotate_env     = 0.4,\n  intensity_env  = 0.85,\n  interactive    = F,\n  parallel       = T,\n  width          = w,\n  height         = h,\n  backgroundhigh=\"#FFFFFF\",\n  backgroundlow=\"#FFFFFF\"\n  )\n\n\n\n\nFigure 4: Three-dimensional map of Lake Chilwa watershed\n\n\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       macOS 15.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Vancouver\n date     2025-02-06\n pandoc   3.6.1 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package            * version    date (UTC) lib source\n abind              * 1.4-8      2024-09-12 [1] CRAN (R 4.3.3)\n ape                  5.8-1      2024-12-16 [1] CRAN (R 4.3.3)\n assertthat           0.2.1      2019-03-21 [1] CRAN (R 4.3.0)\n backports            1.5.0      2024-05-23 [1] CRAN (R 4.3.3)\n base64enc            0.1-3      2015-07-28 [1] CRAN (R 4.3.0)\n bit                  4.5.0.1    2024-12-03 [1] CRAN (R 4.3.3)\n bit64                4.6.0-1    2025-01-16 [1] CRAN (R 4.3.3)\n bitops               1.0-9      2024-10-03 [1] CRAN (R 4.3.3)\n boot                 1.3-31     2024-08-28 [1] CRAN (R 4.3.3)\n brio                 1.1.5      2024-04-24 [1] CRAN (R 4.3.1)\n broom                1.0.7      2024-09-26 [1] CRAN (R 4.3.3)\n bslib              * 0.8.0      2024-07-29 [1] CRAN (R 4.3.3)\n cachem               1.1.0      2024-05-16 [1] CRAN (R 4.3.3)\n callr                3.7.6      2024-03-25 [1] CRAN (R 4.3.1)\n car                  3.1-3      2024-09-27 [1] CRAN (R 4.3.3)\n carData              3.0-5      2022-01-06 [1] CRAN (R 4.3.0)\n caret              * 7.0-1      2024-12-10 [1] CRAN (R 4.3.3)\n class                7.3-23     2025-01-01 [1] CRAN (R 4.3.3)\n classInt             0.4-11     2025-01-08 [1] CRAN (R 4.3.3)\n cli                * 3.6.3      2024-06-21 [1] CRAN (R 4.3.3)\n clue                 0.3-66     2024-11-13 [1] CRAN (R 4.3.3)\n cluster              2.1.8      2024-12-11 [1] CRAN (R 4.3.3)\n coda                 0.19-4.1   2024-01-31 [1] CRAN (R 4.3.1)\n codetools            0.2-20     2024-03-31 [1] CRAN (R 4.3.1)\n colorspace           2.1-1      2024-07-26 [1] CRAN (R 4.3.3)\n cols4all           * 0.8        2024-10-16 [1] CRAN (R 4.3.3)\n contfrac             1.1-12     2018-05-17 [1] CRAN (R 4.3.0)\n coro                 1.1.0      2024-11-05 [1] CRAN (R 4.3.3)\n corpcor              1.6.10     2021-09-16 [1] CRAN (R 4.3.0)\n countrycode          1.6.0      2024-03-22 [1] CRAN (R 4.3.1)\n covr               * 3.6.4      2023-11-09 [1] CRAN (R 4.3.1)\n cowplot            * 1.1.3      2024-01-22 [1] CRAN (R 4.3.1)\n crayon               1.5.3      2024-06-20 [1] CRAN (R 4.3.3)\n crosstalk            1.2.1      2023-11-23 [1] CRAN (R 4.3.1)\n cubature             2.1.1      2024-07-14 [1] CRAN (R 4.3.3)\n curl                 6.1.0      2025-01-06 [1] CRAN (R 4.3.3)\n data.table           1.16.4     2024-12-06 [1] CRAN (R 4.3.3)\n DBI                  1.2.3      2024-06-02 [1] CRAN (R 4.3.3)\n deldir               2.0-4      2024-02-28 [1] CRAN (R 4.3.1)\n dendextend         * 1.19.0     2024-11-15 [1] CRAN (R 4.3.3)\n deSolve              1.40       2023-11-27 [1] CRAN (R 4.3.1)\n devtools             2.4.5      2022-10-11 [1] CRAN (R 4.3.0)\n DiagrammeR         * 1.0.11     2024-02-02 [1] CRAN (R 4.3.1)\n dichromat            2.0-0.1    2022-05-02 [1] CRAN (R 4.3.0)\n digest             * 0.6.37     2024-08-19 [1] CRAN (R 4.3.3)\n distances            0.1.11     2024-07-31 [1] CRAN (R 4.3.3)\n doParallel           1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\n downlit            * 0.4.4      2024-06-10 [1] CRAN (R 4.3.3)\n dplyr              * 1.1.4      2023-11-17 [1] CRAN (R 4.3.1)\n dtw                * 1.23-1     2022-09-19 [1] CRAN (R 4.3.0)\n dtwclust           * 6.0.0      2024-07-23 [1] CRAN (R 4.3.3)\n e1071              * 1.7-16     2024-09-16 [1] CRAN (R 4.3.3)\n easypackages         0.1.0      2016-12-05 [1] CRAN (R 4.3.0)\n elevatr            * 0.99.0     2023-09-12 [1] CRAN (R 4.3.0)\n ellipsis             0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n elliptic             1.4-0      2019-03-14 [1] CRAN (R 4.3.0)\n evaluate             1.0.3      2025-01-10 [1] CRAN (R 4.3.3)\n exactextractr      * 0.10.0     2023-09-20 [1] CRAN (R 4.3.1)\n farver               2.1.2      2024-05-13 [1] CRAN (R 4.3.3)\n fastmap              1.2.0      2024-05-15 [1] CRAN (R 4.3.3)\n flexclust            1.4-2      2024-04-27 [1] CRAN (R 4.3.1)\n FNN                * 1.1.4.1    2024-09-22 [1] CRAN (R 4.3.3)\n forcats            * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n foreach              1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\n Formula              1.2-5      2023-02-24 [1] CRAN (R 4.3.0)\n fs                   1.6.5      2024-10-30 [1] CRAN (R 4.3.3)\n future             * 1.34.0     2024-07-29 [1] CRAN (R 4.3.3)\n future.apply         1.11.3     2024-10-27 [1] CRAN (R 4.3.3)\n FuzzyNumbers         0.4-7      2021-11-15 [1] CRAN (R 4.3.0)\n FuzzyNumbers.Ext.2   3.2        2017-09-05 [1] CRAN (R 4.3.0)\n gdalcubes          * 0.7.0      2024-03-07 [1] CRAN (R 4.3.1)\n gdalUtilities      * 1.2.5      2023-08-10 [1] CRAN (R 4.3.0)\n generics             0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n geojsonsf          * 2.0.3      2022-05-30 [1] CRAN (R 4.3.0)\n geos               * 0.2.4      2023-11-30 [1] CRAN (R 4.3.1)\n ggmap              * 4.0.0      2023-11-19 [1] CRAN (R 4.3.1)\n ggplot2            * 3.5.1      2024-04-23 [1] CRAN (R 4.3.1)\n ggplotify          * 0.1.2      2023-08-09 [1] CRAN (R 4.3.0)\n ggpubr             * 0.6.0      2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel            * 0.9.6      2024-09-07 [1] CRAN (R 4.3.3)\n ggsignif             0.6.4      2022-10-13 [1] CRAN (R 4.3.0)\n ggspatial          * 1.1.9      2023-08-17 [1] CRAN (R 4.3.0)\n ggstats            * 0.8.0      2025-01-07 [1] CRAN (R 4.3.3)\n giscoR             * 0.6.0      2024-08-28 [1] CRAN (R 4.3.3)\n globals              0.16.3     2024-03-08 [1] CRAN (R 4.3.1)\n glue                 1.8.0      2024-09-30 [1] CRAN (R 4.3.3)\n gmm                  1.8        2023-06-06 [1] CRAN (R 4.3.0)\n gower                1.0.2      2024-12-17 [1] CRAN (R 4.3.3)\n gridExtra            2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics         0.5-1      2020-12-13 [1] CRAN (R 4.3.0)\n gtable               0.3.6      2024-10-25 [1] CRAN (R 4.3.3)\n hardhat              1.4.0      2024-06-02 [1] CRAN (R 4.3.3)\n hdf5r              * 1.3.11     2024-07-07 [1] CRAN (R 4.3.3)\n hexbin               1.28.5     2024-11-13 [1] CRAN (R 4.3.3)\n hms                  1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools          * 0.5.8.1    2024-04-04 [1] CRAN (R 4.3.1)\n htmlwidgets          1.6.4      2023-12-06 [1] CRAN (R 4.3.1)\n httpuv               1.6.15     2024-03-26 [1] CRAN (R 4.3.1)\n httr               * 1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n httr2              * 1.0.7      2024-11-26 [1] CRAN (R 4.3.3)\n hypergeo             1.2-13     2016-04-07 [1] CRAN (R 4.3.0)\n interp               1.1-6      2024-01-26 [1] CRAN (R 4.3.1)\n ipred                0.9-15     2024-07-18 [1] CRAN (R 4.3.3)\n iterators            1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\n jpeg                 0.1-10     2022-11-29 [1] CRAN (R 4.3.0)\n jquerylib            0.1.4      2021-04-26 [1] CRAN (R 4.3.0)\n jsonify              1.2.2      2022-11-09 [1] CRAN (R 4.3.0)\n jsonlite           * 1.8.9      2024-09-20 [1] CRAN (R 4.3.3)\n KernSmooth           2.23-26    2025-01-01 [1] CRAN (R 4.3.3)\n knitr                1.49       2024-11-08 [1] CRAN (R 4.3.3)\n kohonen            * 3.0.12     2023-06-09 [1] CRAN (R 4.3.0)\n later                1.4.1      2024-11-27 [1] CRAN (R 4.3.3)\n lattice            * 0.22-6     2024-03-20 [1] CRAN (R 4.3.1)\n latticeExtra         0.6-30     2022-07-04 [1] CRAN (R 4.3.0)\n lava                 1.8.1      2025-01-12 [1] CRAN (R 4.3.3)\n lazyeval             0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n leafem             * 0.2.3      2023-09-17 [1] CRAN (R 4.3.1)\n leafgl             * 0.2.2      2024-11-13 [1] CRAN (R 4.3.3)\n leaflegend           1.2.1      2024-05-09 [1] CRAN (R 4.3.3)\n leaflet            * 2.2.2      2024-03-26 [1] CRAN (R 4.3.1)\n leaflet.providers    2.0.0      2023-10-17 [1] CRAN (R 4.3.1)\n leafsync             0.1.0      2019-03-05 [1] CRAN (R 4.3.0)\n libgeos            * 3.11.1-2   2023-11-29 [1] CRAN (R 4.3.1)\n lifecycle            1.0.4      2023-11-07 [1] CRAN (R 4.3.1)\n listenv              0.9.1      2024-01-29 [1] CRAN (R 4.3.1)\n lubridate          * 1.9.4      2024-12-08 [1] CRAN (R 4.3.3)\n luz                * 0.4.0      2023-04-17 [1] CRAN (R 4.3.0)\n lwgeom             * 0.2-14     2024-02-21 [1] CRAN (R 4.3.1)\n magrittr             2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n mapedit            * 0.6.0      2020-02-02 [1] CRAN (R 4.3.0)\n maptiles           * 0.8.0      2025-01-21 [1] Github (riatelab/maptiles@513b7d4)\n mapview            * 2.11.2     2023-10-13 [1] CRAN (R 4.3.1)\n MASS                 7.3-58.4   2023-03-07 [2] CRAN (R 4.3.0)\n Matrix               1.6-5      2024-01-11 [1] CRAN (R 4.3.1)\n matrixcalc           1.0-6      2022-09-14 [1] CRAN (R 4.3.0)\n MCMCglmm             2.36       2024-05-06 [1] CRAN (R 4.3.1)\n memoise              2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mgcv               * 1.9-1      2023-12-21 [1] CRAN (R 4.3.1)\n microbenchmark       1.5.0      2024-09-04 [1] CRAN (R 4.3.3)\n mime                 0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI               0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n ModelMetrics         1.2.2.2    2020-03-17 [1] CRAN (R 4.3.0)\n modeltools           0.2-23     2020-03-05 [1] CRAN (R 4.3.0)\n MomTrunc             6.1        2024-10-28 [1] CRAN (R 4.3.3)\n munsell              0.5.1      2024-04-01 [1] CRAN (R 4.3.1)\n mvtnorm              1.3-3      2025-01-10 [1] CRAN (R 4.3.3)\n ncdf4              * 1.23       2024-08-17 [1] CRAN (R 4.3.3)\n nlme               * 3.1-166    2024-08-14 [1] CRAN (R 4.3.3)\n nnet               * 7.3-20     2025-01-01 [1] CRAN (R 4.3.3)\n openxlsx           * 4.2.7.1    2024-09-20 [1] CRAN (R 4.3.3)\n parallelly           1.41.0     2024-12-18 [1] CRAN (R 4.3.3)\n pillar               1.10.1     2025-01-07 [1] CRAN (R 4.3.3)\n pkgbuild             1.4.6      2025-01-16 [1] CRAN (R 4.3.3)\n pkgconfig            2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload              1.4.0      2024-06-28 [1] CRAN (R 4.3.3)\n plotly             * 4.10.4     2024-01-13 [1] CRAN (R 4.3.1)\n plyr                 1.8.9      2023-10-02 [1] CRAN (R 4.3.1)\n png                  0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits          1.2.0      2023-09-24 [1] CRAN (R 4.3.1)\n pROC                 1.18.5     2023-11-01 [1] CRAN (R 4.3.1)\n processx             3.8.5      2025-01-08 [1] CRAN (R 4.3.3)\n prodlim              2024.06.25 2024-06-24 [1] CRAN (R 4.3.3)\n profvis              0.4.0      2024-09-20 [1] CRAN (R 4.3.3)\n progress             1.2.3      2023-12-06 [1] CRAN (R 4.3.1)\n progressr            0.15.1     2024-11-22 [1] CRAN (R 4.3.3)\n promises             1.3.2      2024-11-28 [1] CRAN (R 4.3.3)\n proxy              * 0.4-27     2022-06-09 [1] CRAN (R 4.3.0)\n ps                   1.8.1      2024-10-28 [1] CRAN (R 4.3.3)\n purrr              * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6                   2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n randomForest       * 4.7-1.2    2024-09-22 [1] CRAN (R 4.3.3)\n rappdirs             0.3.3      2021-01-31 [1] CRAN (R 4.3.0)\n raster             * 3.6-31     2025-01-16 [1] CRAN (R 4.3.3)\n rasterVis          * 0.51.6     2023-11-01 [1] CRAN (R 4.3.1)\n rayshader          * 0.37.3     2024-02-21 [1] CRAN (R 4.3.1)\n rbibutils            2.3        2024-10-04 [1] CRAN (R 4.3.3)\n RColorBrewer       * 1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp               * 1.0.14     2025-01-12 [1] CRAN (R 4.3.3)\n RcppArmadillo      * 14.2.2-1   2024-12-06 [1] CRAN (R 4.3.3)\n RcppCensSpatial    * 0.3.0      2022-06-27 [1] CRAN (R 4.3.0)\n RcppEigen          * 0.3.4.0.2  2024-08-24 [1] CRAN (R 4.3.3)\n RcppParallel       * 5.1.9      2024-08-19 [1] CRAN (R 4.3.3)\n RCurl                1.98-1.16  2024-07-11 [1] CRAN (R 4.3.3)\n Rdpack               2.6.2      2024-11-15 [1] CRAN (R 4.3.3)\n reactable          * 0.4.4      2023-03-12 [1] CRAN (R 4.3.0)\n readr              * 2.1.5      2024-01-10 [1] CRAN (R 4.3.1)\n recipes              1.1.0      2024-07-04 [1] CRAN (R 4.3.3)\n relliptical          1.3.0      2024-02-07 [1] CRAN (R 4.3.1)\n remotes              2.5.0      2024-03-17 [1] CRAN (R 4.3.1)\n reshape2             1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rex                  1.2.1      2021-11-26 [1] CRAN (R 4.3.0)\n rgl                * 1.3.16     2025-01-06 [1] CRAN (R 4.3.3)\n rlang                1.1.4      2024-06-04 [1] CRAN (R 4.3.3)\n rmarkdown            2.29       2024-11-04 [1] CRAN (R 4.3.3)\n rpart                4.1.24     2025-01-07 [1] CRAN (R 4.3.3)\n rsconnect          * 1.3.3      2024-11-19 [1] CRAN (R 4.3.3)\n RSpectra             0.16-2     2024-07-18 [1] CRAN (R 4.3.3)\n rstatix              0.7.2      2023-02-01 [1] CRAN (R 4.3.0)\n RStoolbox          * 1.0.0      2024-04-25 [1] CRAN (R 4.3.1)\n rstudioapi           0.17.1     2024-10-22 [1] CRAN (R 4.3.3)\n rts                * 1.1-14     2023-10-01 [1] CRAN (R 4.3.1)\n Ryacas0              0.4.4      2023-01-12 [1] CRAN (R 4.3.0)\n s2                 * 1.1.7      2024-07-17 [1] CRAN (R 4.3.3)\n sandwich             3.1-1      2024-09-15 [1] CRAN (R 4.3.3)\n sass                 0.4.9      2024-03-15 [1] CRAN (R 4.3.1)\n satellite            1.0.5      2024-02-10 [1] CRAN (R 4.3.1)\n scales             * 1.3.0      2023-11-28 [1] CRAN (R 4.3.1)\n sessioninfo          1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n settings             0.2.7      2021-05-07 [1] CRAN (R 4.3.0)\n sf                 * 1.0-20     2025-01-27 [1] Github (r-spatial/sf@c88e743)\n shiny                1.10.0     2024-12-14 [1] CRAN (R 4.3.3)\n shinyjs              2.1.0      2021-12-23 [1] CRAN (R 4.3.0)\n sits               * 1.5.1      2024-08-19 [1] CRAN (R 4.3.3)\n slippymath           0.3.1      2019-06-28 [1] CRAN (R 4.3.0)\n sp                 * 2.1-4      2024-04-30 [1] CRAN (R 4.3.1)\n spacesXYZ            1.3-0      2024-01-23 [1] CRAN (R 4.3.1)\n spData             * 2.3.4      2025-01-08 [1] CRAN (R 4.3.3)\n spdep              * 1.3-8      2024-12-02 [1] CRAN (R 4.3.3)\n stars              * 0.6-7      2024-11-07 [1] CRAN (R 4.3.3)\n StempCens            1.1.0      2020-10-21 [1] CRAN (R 4.3.0)\n stringi              1.8.4      2024-05-06 [1] CRAN (R 4.3.1)\n stringr            * 1.5.1      2023-11-14 [1] CRAN (R 4.3.1)\n supercells         * 1.0.0      2024-02-11 [1] CRAN (R 4.3.1)\n survival             3.8-3      2024-12-17 [1] CRAN (R 4.3.3)\n tensorA              0.36.2.1   2023-12-13 [1] CRAN (R 4.3.1)\n terra              * 1.8-15     2025-01-24 [1] CRAN (R 4.3.0)\n terrainr           * 0.7.5      2023-10-04 [1] CRAN (R 4.3.1)\n testthat           * 3.2.3      2025-01-13 [1] CRAN (R 4.3.3)\n tibble             * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr              * 1.3.1      2024-01-24 [1] CRAN (R 4.3.1)\n tidyselect           1.2.1      2024-03-11 [1] CRAN (R 4.3.1)\n tidyterra          * 0.6.2      2025-01-08 [1] CRAN (R 4.3.3)\n tidyverse          * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange           0.3.0      2024-01-18 [1] CRAN (R 4.3.1)\n timeDate             4041.110   2024-09-22 [1] CRAN (R 4.3.3)\n tlrmvnmvt            1.1.2      2022-06-09 [1] CRAN (R 4.3.0)\n tmap               * 4.0        2025-01-21 [1] Github (r-tmap/tmap@457173d)\n tmaptools          * 3.2        2025-01-21 [1] Github (r-tmap/tmaptools@b43c48b)\n tmvtnorm             1.6        2023-12-05 [1] CRAN (R 4.3.1)\n torch                0.13.0     2024-05-21 [1] CRAN (R 4.3.3)\n tzdb                 0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n unifir               0.2.4      2024-02-01 [1] CRAN (R 4.3.1)\n units                0.8-5      2023-11-28 [1] CRAN (R 4.3.1)\n urlchecker           1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis              3.1.0      2024-11-26 [1] CRAN (R 4.3.3)\n vctrs                0.6.5      2023-12-01 [1] CRAN (R 4.3.1)\n viridis              0.6.5      2024-01-29 [1] CRAN (R 4.3.1)\n viridisLite          0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n visNetwork           2.1.2      2022-09-29 [1] CRAN (R 4.3.0)\n withr                3.0.2      2024-10-28 [1] CRAN (R 4.3.3)\n wk                   0.9.4      2024-10-11 [1] CRAN (R 4.3.3)\n xfun                 0.50       2025-01-07 [1] CRAN (R 4.3.3)\n xgboost            * 1.7.8.1    2024-07-24 [1] CRAN (R 4.3.3)\n XML                  3.99-0.18  2025-01-01 [1] CRAN (R 4.3.3)\n xml2                 1.3.6      2023-12-04 [1] CRAN (R 4.3.1)\n xtable               1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n xts                * 0.14.1     2024-10-15 [1] CRAN (R 4.3.3)\n yaml                 2.3.10     2024-07-26 [1] CRAN (R 4.3.3)\n yulab.utils          0.1.9      2025-01-07 [1] CRAN (R 4.3.3)\n zeallot              0.1.0      2018-01-28 [1] CRAN (R 4.3.0)\n zip                  2.3.1      2024-01-27 [1] CRAN (R 4.3.1)\n zoo                * 1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Home",
      "Watershed Maps"
    ]
  },
  {
    "objectID": "assets/inputs/rivers_site.html",
    "href": "assets/inputs/rivers_site.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n         0 0     false"
  },
  {
    "objectID": "assets/inputs/chilwa_watershed_4326.html",
    "href": "assets/inputs/chilwa_watershed_4326.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n      GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "assets/inputs/lakes_site.html",
    "href": "assets/inputs/lakes_site.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "assets/inputs/watershed_site.html",
    "href": "assets/inputs/watershed_site.html",
    "title": "Map Templates",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "deforisk.html",
    "href": "deforisk.html",
    "title": "Deforestation Risk",
    "section": "",
    "text": "The following documents examples of Import AOI & visualize:\nset.seed(77777)\n# Import project aoi\naoi = sf::read_sf(\"./data/aoi/AllLandscapes_merge_v02.shp\") |&gt; \n  sf::st_cast(\"POLYGON\") |&gt; sf::st_cast(\"MULTIPOLYGON\") |&gt; \n  dplyr::select(Name) |&gt; sf::st_transform(4326) |&gt;\n  dplyr::filter(\n    Name == \"Gola Forest National Park\" | \n      Name == \"Norman\" | \n      Name == \"Tonglay\") \n\naoi_gola = aoi |&gt; dplyr::filter(Name == \"Gola Forest National Park\")\naoi_tong = aoi |&gt; dplyr::filter(Name == \"Tonglay\")\naoi_norm = aoi |&gt; dplyr::filter(Name == \"Norman\")\n\n# Import country aoi\nquery = osmdata::opq(\"Liberia\") |&gt; # opq = overpass query\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::osmdata_sf()\nboundaries = query$osm_multipolygons\ncountry  = boundaries |&gt; dplyr::filter(admin_level == \"2\", name == \"Liberia\") |&gt;\n  dplyr::select(name, admin_level, geometry) |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\nsf::st_write(country, \"./data/aoi/liberia_boundary_national.shp\", delete_layer=T)",
    "crumbs": [
      "Home",
      "Deforestation Risk"
    ]
  },
  {
    "objectID": "deforisk.html#area-check",
    "href": "deforisk.html#area-check",
    "title": "Deforestation Risk",
    "section": "Area check",
    "text": "Area check\nIn Liberia, the official definition of forest land is provided by the Forestry Development Authority (Government of Liberia 2019), including areas of land that meet the following criteria:\n\nCanopy cover of minimum 30%;\nCanopy height of minimum 5m or the capacity to reach it;\nCovering a minimum of 1 hectare of land.\n\n\nleakage = terra::as.polygons(slope_1_only_glwd_clip) |&gt; sf::st_as_sf()\nleakage_country = terra::as.polygons(slope_1_only_glwd_clip_country) |&gt; sf::st_as_sf()\n\nleakage_country$area_ha = round(as.numeric(sf::st_area(leakage_country) * 0.0001, 4))\nleakage_country |&gt; sf::st_drop_geometry() |&gt; janitor::adorn_totals() \nleakage$area_ha = round(as.numeric(sf::st_area(leakage) * 0.0001, 4))\nleakage |&gt; sf::st_drop_geometry() |&gt; janitor::adorn_totals() \n\nslivers = aoi |&gt; dplyr::filter(as.numeric(area_ha) &lt; 1)  # no artefacts found\n\nResults indicate the spatial dataset is free from topological errors, and forest ‘islands’ and spatial artefacts smaller than approved area definition. Results also match Areahav2 values derived previously and reported in ER_Workbook_Gola_Liberia.xlsx",
    "crumbs": [
      "Home",
      "Deforestation Risk"
    ]
  },
  {
    "objectID": "deforisk.html#activity-data-check",
    "href": "deforisk.html#activity-data-check",
    "title": "Jurisidictional Deforestation Risk Mapping",
    "section": "Activity data check",
    "text": "Activity data check\nThis section documents inputs and procedures used to derive national and project-level deforestation maps. This follows three main steps:\n\nCompare land cover training samples for Liberia;\nClassify & assess accuracy of forest cover maps for 2014, 2019, and 2024;\nSpatially map deforestation risk, allocate jurisdictional deforestation & compare with FREL.\n\n\nTraining samples\nTraining samples for the country and project area were extracted from two gold standard global land cover time series datasets: the GLanCE dataset (Stanimirova et al. 2023) and TimeSpec4LULC dataset. Both training datasets were processed with continuous change and class migration algorithms. While Verra is yet to establish requirements for addressing feature class migration in classification of baseline activity data (verraVM0048ReducingEmissions2023a?; verraVMD0055EstimationEmission2024?; Verra 2021), we may recommend incorporating this remote sensing best practice or showcase its improvements to accuracy metrics, as follows.\n\nTable 2: Class conversions of training samples\n\nLevel-1 classes in the GLanCE and TimeSpec4LULC datasets were recoded below to match class labels cited in the “Lookups” sheet of “ER_Workbook_Gola_Liberia.xlsx”, and the report titled “Liberia’s Forest Reference Emission Level Submission to the UNFCCC (Woodcock et al., n.d.; governmentofliberiaLiberiasForestReference2019?).\nTo address class imbalances, the Winrock team derived additional training samples and appended to the GLanCE datapoint collection. This sampling aimed to improve class-to-country proportionality while targeting plot-to-pixel dimensions and homogenous rule throughout training sample selection.\n\n# import & tidy samples\nsamples_raw = read.csv(\"./data/training_samples/glance_training.csv\")\nsamples_clean = samples_raw |&gt;\n  dplyr::select(Lon, Lat, Glance_Class_ID_level1, Start_Year, End_Year)|&gt;\n  dplyr::rename(longitude = Lon) |&gt;\n  dplyr::rename(latitude = Lat) |&gt;\n  dplyr::rename(label_old = Glance_Class_ID_level1) |&gt;\n  dplyr::mutate(start_date = as.Date(paste(Start_Year,\"01\",\"01\",sep = \"-\")))|&gt;\n  dplyr::mutate(end_date = as.Date(paste(End_Year, \"01\", \"01\", sep = \"-\")))|&gt;\n  dplyr::select(longitude, latitude, start_date, end_date, label_old)|&gt;\n  dplyr::mutate(code = case_when(\n    label_old == '4' ~ 0, \n    label_old == '7' ~ 1, \n    label_old == '6' ~ 2, \n    label_old == '5' ~ 3, \n    label_old == '1' ~ 4, \n    label_old == '3' ~ 99, \n    label_old == '2' ~ 88)\n    ) |&gt;\n  dplyr::mutate(label = case_when(\n    code == '0'  ~ \"Bareground\", \n    code == '1'  ~ \"Regrowth\", \n    code == '2'  ~ \"Farmbush\", \n    code == '3'  ~ \"Forest\", \n    code == '4'  ~ \"Water\", \n    code == '99' ~ \"Urban\", \n    code == '88' ~ \"Snow\")\n    ) |&gt; \n  dplyr::mutate(label = as.factor(label)) |&gt;\n  dplyr::mutate(id = row_number()) |&gt; \n  dplyr::select(-label_old)\n\n# filter to project area\nsamples_sf       = sf::st_as_sf(samples_clean, crs = 4326, coords = c(\"longitude\", \"latitude\"))\nsamples_clipped  = sf::st_intersection(samples_sf, country) # n = 364\nsamples_country  = samples_sf[samples_clipped, ] |&gt; sf::st_transform(4326)\nsamples          = sf::st_crop(samples_country, st_bbox(country))\nsf::st_write(samples, \"./data/training_samples/glance_spatial_clip.shp\", delete_dsn = T)\nwrite.csv(samples, \"./data/training_samples/glance_spatial_clip.csv\", row.names = F)\ndplyr::count(samples, label)\n\n# Winrock training samples\nsamples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock3.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\n#samples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock2.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\n#samples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\nsamples_winrock &lt;- samples_winrock |&gt;\n  dplyr::select(Name)|&gt;\n  dplyr::mutate(\n    start_date = as.Date(\"2014-01-01\"),\n    end_date = as.Date(\"2024-01-01\"),\n    id = row_number()\n  )\n\nsamples_winrock$label &lt;- case_when(\n  stringr::str_detect(samples_winrock$Name, \"^Bareland\")  ~ \"Bareground\",\n  stringr::str_detect(samples_winrock$Name, \"^Regrowth\")  ~ \"Regrowth\",\n  stringr::str_detect(samples_winrock$Name, \"^Farmbush\")  ~ \"Farmbush\",\n  stringr::str_detect(samples_winrock$Name, \"^Forest\")  ~ \"Forest\",\n  stringr::str_detect(samples_winrock$Name, \"^Water\")   ~ \"Water\",\n  stringr::str_detect(samples_winrock$Name, \"^Swamp\")   ~ \"Swamp\",\n  TRUE ~ \"MISSING\"\n  ) |&gt; as.factor()\n\nsamples_winrock$code &lt;- case_when(\n  samples_winrock$label == \"Bareground\" ~ 0,\n  samples_winrock$label == \"Regrowth\"   ~ 1,\n  samples_winrock$label == \"Farmbush\"   ~ 2,\n  samples_winrock$label == \"Water\"      ~ 4,\n  samples_winrock$label == \"Swamp\"      ~ 5,\n  TRUE                                  ~ NA_real_  # Use NA_real_ for numeric NA\n)\n\nsamples_winrock &lt;- samples_winrock[!(samples_winrock$label == \"Forest\"), ]\nsamples_winrock$label &lt;- droplevels(samples_winrock$label)\n\nsamples_winrock &lt;- samples_winrock |&gt;\n  dplyr::select(-Name)\nsamples_combined &lt;- rbind(samples, samples_winrock)\nst_write(samples_combined, \"./data/training_samples/samples_combined.shp\", delete_dsn=T)\nsamples = sf::st_read(\"./data/training_samples/samples_combined.shp\")\ndplyr::count(samples, label)\n\n\n\n\nRaster collection\nThe dataset of STAC-formatted Landsat Collection-2-Level-2 was extracted from the Google Earth Engine Catalog and processed using a cloudless and pixel quality ranking mask before back-filling with median normalization. This was implemented in a Colab python runtime here. The collection of unclassified rasters was temporarily stored in a Google Drive folder and the consolidated, resampled and labelled full stack is available to download directly from here. In addition, full script and all runtime setups are available from the project’s github repository here\nLandsat data was acquired instead of Sentinel imagery due to start date of project’s 10-year baseline occurring before the launch of the Sentinel 2 satellite. The following chunk provides an alternative worflow, though less reliable, R-native workflow for acquiring, aligning, and processing rasters for the extent of Liberia.\nThe processes above were repeated for three baseline interval years of 2014, 2019, and 2024 and then saved into consolidated raster stack and visualized below.\n\n# import\nNDVI_2014=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2014-01-04.tif\")\nNDVI_2019=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2019-01-02.tif\")\nNDVI_2024=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2024-01-16.tif\")\nSTACK=raster::brick(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_STACK-&-DEM_2014-01-04_2024-01-16_INTERP.tif\")\n\n# visualize\nhist(NDVI_2014, main = \"NDVI Distribution, 2014\", col = \"springgreen\") \nhist(NDVI_2019, main = \"NDVI Distribution, 2019\", col = \"springgreen\")\nhist(NDVI_2024, main = \"NDVI Distribution, 2024\", col = \"springgreen\")\nplot(NDVI_2014,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\nplot(NDVI_2019,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\nplot(NDVI_2024,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\n\n\n\nImage classification\nWe trained a Random Forest model fitted with 500 decision trees. The dataset was partitioned using a 70:30 ratio which was which was trained using Monte Carlo resampling regime (k=100). Accuracy assessments were reported using a confusion matrix. Uncertainty metrics were then used to explore best subset of variables according to magnitude and performances of recursive modeling, which informed final model selection.\n\n# extract signatures\nsignatures_2014 = raster::extract(STACK_2014, samples ,df=T) # watch for data formats\nsamples_signatures_2014 &lt;- dplyr::inner_join(signatures_2014, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2014$geometry &lt;- NULL # set geometry to NULL for model training\n\n# Stratify to ensure all classes are present in both train and test\nstratified_partition &lt;- function(data, group_col, train_ratio = 0.7) {\n  split_data &lt;- lapply(split(data, data[[group_col]]), function(df) {\n    train_size &lt;- max(1, floor(train_ratio * nrow(df)))\n    train_idx &lt;- sample(seq_len(nrow(df)), size = train_size)\n    list(train = df[train_idx, ], test = df[-train_idx, ])\n  })\n  train_data &lt;- do.call(rbind, lapply(split_data, `[[`, \"train\"))\n  test_data &lt;- do.call(rbind, lapply(split_data, `[[`, \"test\"))\n  list(train = train_data, test = test_data)\n  }\npartitioned_data_2014 &lt;- stratified_partition(samples_signatures_2014,group_col=\"label\", train_ratio=0.7)\ntrainData_2014 &lt;- partitioned_data_2014$train\ntestData_2014 &lt;- partitioned_data_2014$test\n#table(trainData_2014$label)\n#table(testData_2014$label)\n\n# synthetic minotrity oversampling technique\ntrainData_2014&lt;-performanceEstimation::smote(label ~ .,data=trainData_2014,perc.over=30,perc.under=30)\ntestData_2014&lt;-performanceEstimation::smote(label ~ .,data=testData_2014,perc.over=30,perc.under=30)\n# interpolate missing cloud pixels with class-median-normalization\ntrainData_2014 &lt;- trainData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = T), .))) |&gt; ungroup()\ntestData_2014 &lt;- testData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = T), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2014 &lt;- c(\n  \"NDVI_2014\", \"BLUE_2014\", \"GREEN_2014\", \"RED_2014\", \n  \"NIR08_2014\", \"SWIR16_2014\", \"SWIR22_2014\", \"DEM\"\n  )\n# set training parameters\ncv_regime &lt;- caret::trainControl(\n  method          = 'LGOCV',\n  number          = 100,\n  savePredictions = T,\n  verboseIter     = F\n  )\n\n# train classifier\nrf_model_2014 &lt;- caret::train(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nAccuracy assessments1\nResults suggested a moderate concordance between observed and predicted classes with optimal model performance during cross-validation at mtry of 3. Overall statistics reported Kappa Index of 71.04%, Accuracy of 88.61% (0.95CI 84.46%, 95.71%), and a smaller No Information Rate of 0.8158 (p&lt;0.01). In addition, key classes of Forest were predicted with robust Sensitivity (98.92%) and Specificity (76.16%).\nTo address model weaknesses, the team recommends sourcing additional verified training samples, or alternatively applying a weighted Random Forest, Gradient Boosting or Support Vector Machines kernels (SVM) to improve performance of underrepresented classes. Note, these modeling updates will require substantial runtimes.\n\nrf_test_2014 &lt;- predict(rf_model_2014, testData_2014)\nprint(rf_model_2014) # cv results\ncaret::confusionMatrix(rf_test_2014,testData_2014$label) # blind test results\n\nRandom Forest \n\n1862 samples\n   8 predictor\n   7 classes: 'Bareground', 'Farmbush', 'Forest', 'Regrowth', 'Swamp', 'Urban', 'Water' \n\nNo pre-processing\nResampling: Repeated Train/Test Splits Estimated (100 reps, 75%) \nSummary of sample sizes: 1399, 1399, 1399, 1399, 1399, 1399, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n  2     0.9976674  0.9935532\n  3     0.9976674  0.9935535\n  4     0.9976674  0.9935553\n  5     0.9976674  0.9935596\n  6     0.9976674  0.9935626\n  8     0.9976674  0.9935652\n\nKappa was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 8.\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         28        8      0        0     0     3     0\n  Farmbush            0       10      0        0     0     0     0\n  Forest              4        0    696        8     0     0     0\n  Regrowth            0        0      8       41     0     0     0\n  Swamp               0        0      0        0    31     0     0\n  Urban               0        4      0        0     0    80     0\n  Water               0        0      0        0     0     0    10\n\nOverall Statistics\n                                          \n               Accuracy : 0.9624          \n                 95% CI : (0.9481, 0.9737)\n    No Information Rate : 0.7562          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.9086          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest Class: Regrowth Class: Swamp Class: Urban\nSensitivity                    0.87500         0.45455        0.9886         0.83673       1.0000      0.96386\nSpecificity                    0.98776         1.00000        0.9471         0.99093       1.0000      0.99528\nPos Pred Value                 0.71795         1.00000        0.9831         0.83673       1.0000      0.95238\nNeg Pred Value                 0.99552         0.98697        0.9641         0.99093       1.0000      0.99646\nPrevalence                     0.03437         0.02363        0.7562         0.05263       0.0333      0.08915\nDetection Rate                 0.03008         0.01074        0.7476         0.04404       0.0333      0.08593\nDetection Prevalence           0.04189         0.01074        0.7605         0.05263       0.0333      0.09023\nBalanced Accuracy              0.93138         0.72727        0.9679         0.91383       1.0000      0.97957\n                     Class: Water\nSensitivity               1.00000\nSpecificity               1.00000\nPos Pred Value            1.00000\nNeg Pred Value            1.00000\nPrevalence                0.01074\nDetection Rate            0.01074\nDetection Prevalence      0.01074\nBalanced Accuracy         1.00000\n\n\nModel calibration\nWe employed recursive predictor subsetting to identify predictors of greatest magnitude and non-informative features to enhance model performance and reduce model complexity, respectively. This aims to limit potential of multicolinearity, despite inherent robustness of randomForest algorithms against such violations. The subsetted model was evaluated on the test dataset. The confusion matrix and performance metrics were summarized below.\n\nindex_feature_2014 &lt;- createMultiFolds(trainData_2014$label, times=5) \npredictor_seq_2014 &lt;-seq(from=1, to=length(predictors_2014),by=2)\n\nsubset_regime_2014 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2014\n  )\n\nrf_model_subset_2014 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], \n  sizes = predictor_seq_2014,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2014\n  )\n\nrf_subset_test_2014 &lt;- predict(rf_model_subset_2014,testData_2014)\nprint(rf_model_subset_2014)\ncaret::confusionMatrix(rf_subset_test_2014$pred,testData_2014$label)\n\nRecursive feature selection\n\nOuter resampling method: Repeated Train/Test Splits Estimated (50 reps, 75%) \n\nResampling performance over subset size:\n\n\nThe top 3 variables (out of 3):\n   BLUE_2014, DEM, SWIR22_2014\n\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         28        8     12        0     0     3     0\n  Farmbush            0       10      8        0     0     0     0\n  Forest              4        4    679       32    31     9     0\n  Regrowth            0        0      0        0     0     0     0\n  Swamp               0        0      0        0     0    10     0\n  Urban               0        0      5       17     0    61     0\n  Water               0        0      0        0     0     0    10\n\nOverall Statistics\n                                         \n               Accuracy : 0.8464         \n                 95% CI : (0.8216, 0.869)\n    No Information Rate : 0.7562         \n    P-Value [Acc &gt; NIR] : 1.085e-11      \n                                         \n                  Kappa : 0.5879         \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest Class: Regrowth Class: Swamp Class: Urban Class: Water\nSensitivity                    0.87500         0.45455        0.9645         0.00000      0.00000      0.73494      1.00000\nSpecificity                    0.97442         0.99120        0.6476         1.00000      0.98889      0.97406      1.00000\nPos Pred Value                 0.54902         0.55556        0.8946             NaN      0.00000      0.73494      1.00000\nNeg Pred Value                 0.99545         0.98686        0.8547         0.94737      0.96634      0.97406      1.00000\nPrevalence                     0.03437         0.02363        0.7562         0.05263      0.03330      0.08915      0.01074\nDetection Rate                 0.03008         0.01074        0.7293         0.00000      0.00000      0.06552      0.01074\nDetection Prevalence           0.05478         0.01933        0.8153         0.00000      0.01074      0.08915      0.01074\nBalanced Accuracy              0.92471         0.72287        0.8060         0.50000      0.49444      0.85450      1.00000\n\n\n \n \nVariables Accuracy Kappa AccuracySD KappaSD Selected\n1   1   0.9981  0.9949  0.003389    0.008870    \n2   3   0.9994  0.9983  0.001759    0.004588    *\n3   5   0.9991  0.9978  0.001984    0.005188    \n4   7   0.9989  0.9972  0.002423    0.006388    \n5   8   0.9989  0.9972  0.002423    0.006388    \n\n\n\n\n\n\n\n\n\n\n\n\n\nVa riables\n&lt;S3: AsIs&gt;\nA ccuracy\n&lt;S3: AsIs&gt;\nKappa\n&lt;S3: AsIs&gt;\nAcc uracySD\n&lt;S3: AsIs&gt;\nKappaSD\n&lt;S3: AsIs&gt;\nS elected\n&lt;S3: AsIs&gt;\n\n\n\n\n1\n1\n0.9981\n0.9949\n0 .003389\n0 .008870\n\n\n\n2\n3\n0.9994\n0.9983\n0 .001759\n0 .004588\n*\n\n\n3\n5\n0.9991\n0.9978\n0 .001984\n0 .005188\n\n\n\n4\n7\n0.9989\n0.9972\n0 .002423\n0 .006388\n\n\n\n5\n8\n0.9989\n0.9972\n0 .002423\n0 .006388\n\n\n\n\nIn summary, the subset model achieved an Accuracy of 88.58% and a Kappa Index of 0.6338. These metrics closely align with the results of the original model, suggesting minimal or no loss in predictive power despite using fewer predictors. Similarly, high-performing classes of Forest maintained sensitivity and specificity (SE = 0.9667, SP = 0.8462). Given that the reduction in complexity offered by the subsetted model does not provide significant benefits in this context, we recommend proceeding with the original model to make spatial predictions.\nThese modelling operations were repeated for 2019 and 2024 (see Appendix).\nSpatial predictions were made using their respective models and outputs of classified LULC rasters were saved in the same Google Drive folder linked above in previous sections.\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction = counties |&gt; dplyr::filter(\n  name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" ) |&gt; terra::vect()\njurisdiction$name = 'Grand Cape Mount & Gharpolu Counties'\n\nLULC_COUNTY_2014=terra::rast(\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\nLULC_COUNTY_2019=terra::rast(\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\nLULC_COUNTY_2024=terra::rast(\"./data/LULC/LULC_LIBERIA_2024-01-16.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\n\ncode_dict &lt;- data.frame(id = c(1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Bareground\", \"Cropland\", \"Forest\", \"Shrubland\", \"Wetland\", \"Urban\", \"Water\"))\nlevels(LULC_COUNTY_2014) &lt;- code_dict\nlevels(LULC_COUNTY_2019) &lt;- code_dict\nlevels(LULC_COUNTY_2024) &lt;- code_dict\n\nLULC_COUNTY_2014 = terra::project(LULC_COUNTY_2014, \"EPSG:32629\")\nLULC_COUNTY_2019 = terra::project(LULC_COUNTY_2019, \"EPSG:32629\")\nLULC_COUNTY_2024 = terra::project(LULC_COUNTY_2024, \"EPSG:32629\")\njurisdiction = jurisdiction |&gt; terra::project(\"EPSG:32629\")\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\n\ncompute_land_cover_summary &lt;- function(jurisdiction, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(jurisdiction) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(jurisdiction$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        jurisdiction[jurisdiction$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2014\" = LULC_COUNTY_2014,\n  \"2019\" = LULC_COUNTY_2019,\n  \"2024\" = LULC_COUNTY_2024\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(jurisdiction, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_stats.csv\", row.names = F)\nland_cover_summary\n\n\nLULC_LIBERIA_2014=terra::rast(\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\")\nLULC_LIBERIA_2019=terra::rast(\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\")\nLULC_LIBERIA_2024=terra::rast(\"./data/LULC/LULC_LIBERIA_2024-01-16.tif\")\n\ncode_dict &lt;- data.frame(id = c(1, 2, 3, 4, 5, 6, 7),\n  label = c(\n    \"Bareground\", \"Cropland\", \n    \"Forest\", \"Shrubland\", \n    \"Wetland\", \"Urban\", \n    \"Water\"))\n\nlevels(LULC_LIBERIA_2014) &lt;- code_dict\nlevels(LULC_LIBERIA_2019) &lt;- code_dict\nlevels(LULC_LIBERIA_2024) &lt;- code_dict\n\nLULC_LIBERIA_2014 = terra::project(LULC_LIBERIA_2014, \"EPSG:32629\")\nLULC_LIBERIA_2019 = terra::project(LULC_LIBERIA_2019, \"EPSG:32629\")\nLULC_LIBERIA_2024 = terra::project(LULC_LIBERIA_2024, \"EPSG:32629\")\ncountry_metric = sf::st_transform(country, 32629) |&gt; terra::vect()\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\n\ncompute_land_cover_summary &lt;- function(country_metric, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(country_metric) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(country_metric$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        country_metric[country_metric$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2014\" = LULC_LIBERIA_2014,\n  \"2019\" = LULC_LIBERIA_2019,\n  \"2024\" = LULC_LIBERIA_2024\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(country_metric, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_country.csv\", row.names = F)\nland_cover_summary\n\n\ncountry_merc = sf::st_transform(country, 3857) |&gt; terra::vect()\nLULC_LIBERIA_2017=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2017.tif\") |&gt; terra::crop(country_merc, mask=T)\nLULC_LIBERIA_2023=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2023.tif\") |&gt; terra::crop(country_merc, mask=T)\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\nlevels(LULC_LIBERIA_2017) &lt;- code_dict\nlevels(LULC_LIBERIA_2023) &lt;- code_dict\n\npixel_area_ha &lt;- res(LULC_LIBERIA_2017)[1] * res(LULC_LIBERIA_2017)[2] / 10000\ncompute_land_cover_summary &lt;- function(country_merc, rasters, pixel_area) {\n  results &lt;- list()\n  if (terra::nrow(country_merc) == 0)\n    {stop(\"The provided SpatVector jurisdiction is empty.\")}\n  for (region in unique(country_merc$name)) \n    {for (year in names(rasters)) \n      {cropped_raster &lt;- terra::crop(rasters[[year]],\n        country_merc[country_merc$name == region, ],\n        mask = TRUE)\n      if (terra::ncell(cropped_raster) == 0) \n        {warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))next}\n      freq = terra::freq(cropped_raster)\n      freq$area_ha = freq$count * pixel_area\n      freq$percentage = (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region = region\n      freq$year = year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n      }\n    }\n  return(do.call(rbind, results))\n  }\n\n# Organize rasters into a named list\nrasters &lt;- list(\"2017\" = LULC_LIBERIA_2017,\n                \"2023\" = LULC_LIBERIA_2023)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(country_merc, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_country_io.csv\", row.names = F)\nland_cover_summary\n\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction_merc = counties |&gt; dplyr::filter(\n  name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" ) |&gt; \n  terra::vect() |&gt; \n  terra::project(\"EPSG:3857\")\njurisdiction_merc$name = 'Grand Cape Mount & Gharpolu Counties'\nvoi = sf::st_transform(aoi, 3857) |&gt; terra::vect()\n\ncountry_merc = sf::st_transform(country, 3857) |&gt; terra::vect()\nLULC_LIBERIA_2017=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2017.tif\") |&gt; terra::crop(country_merc, mask=T)\nLULC_LIBERIA_2023=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2023.tif\") |&gt; terra::crop(country_merc, mask=T)\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\nlevels(LULC_LIBERIA_2017) &lt;- code_dict\nlevels(LULC_LIBERIA_2023) &lt;- code_dict\n\nLULC_PROJECT_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(voi, mask=T)\nLULC_PROJECT_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(voi, mask=T)\nLULC_COUNTY_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(jurisdiction_merc, mask=T)\nLULC_COUNTY_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(jurisdiction_merc, mask=T)\n\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\n\nlevels(LULC_COUNTY_2017) &lt;- code_dict\nlevels(LULC_COUNTY_2023) &lt;- code_dict\nlevels(LULC_PROJECT_2017) &lt;- code_dict\nlevels(LULC_PROJECT_2023) &lt;- code_dict\n\ncompute_land_cover_summary &lt;- function(jurisdiction_merc, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(jurisdiction_merc) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(jurisdiction_merc$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        jurisdiction_merc[jurisdiction_merc$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2017\" = LULC_COUNTY_2017,\n  \"2023\" = LULC_COUNTY_2023\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(jurisdiction_merc, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_county_io.csv\", row.names = F)\nland_cover_summary\n\n\nland_cover_summary$value &lt;- factor(land_cover_summary$value,\n  levels = c(\"Forest\", \"Water\", \"Rangeland\", \"Built\", \"Cropland\", \"Bareground\", \"Wetland\")\n  )\n\nggplot(land_cover_summary, aes(x = year, y = percentage, fill = value)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.4) +\n  ggrepel::geom_text_repel(\n  aes(label = paste0(round(percentage, 1), \"%\")),  \n  size = 2.5,  # Smaller text size\n  max.overlaps = Inf,\n  box.padding = 0.3,  \n  point.padding = 0.2,  \n  segment.size = 0.2\n  ) + \n  labs(title = \"Land cover change in Grand Cape Mount & Gharpolu counties\",\n       x = NULL,\n       y = \"Proportion (%)\",\n       fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 11, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text.x = element_text(size = 9, angle = 0, face = \"bold\", hjust = 0.5),\n    axis.text.y = element_text(size = 10),\n    legend.position = \"bottom\"\n  )\n\n\nggplot(land_cover_summary, aes(x = year, y = percentage, fill = value)) + \n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.4) + \n  ggrepel::geom_text_repel(\n    aes(label = paste0(round(percentage, 1), \"%\")),  \n    size = 3, \n    color = \"black\",\n    box.padding = 0.3,  \n    point.padding = 0.2,  \n    direction = \"x\",  # Adjust text to move horizontally\n    max.overlaps = Inf  \n  ) + \n  coord_flip() +  # Flip the chart\n  labs(\n    title = \"Land cover change of project jurisdictions, 2017-2023\", \n    x = \"Year\", \n    y = \"Proportion (%)\", \n    fill = \"Land Cover Class\"\n  ) + \n  theme_minimal()\n\n`mask_gola = terra::rast(“./data/BINARY/mask_gola.tif”) mask_tong = terra::rast(“./data/BINARY/mask_tong.tif”) mask_norm = terra::rast(“./data/BINARY/mask_norm.tif”) mask_project = terra::rast(“./data/BINARY/mask_project.tif”) mask_gola=terra::resample(mask_gola, LULC_PROJECT_2014) mask_tong=terra::resample(mask_tong, LULC_PROJECT_2014) mask_norm=terra::resample(mask_norm, LULC_PROJECT_2014) mask_project=terra::resample(mask_project, LULC_PROJECT_2014)\n\n\nForest area estimates\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction = counties |&gt; dplyr::filter(name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" )\njurisdiction$name = 'Grand Cape Mount & Gharpolu Counties'\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(jurisdiction) + tmap::tm_borders(lwd = 1.2, col=\"green\") + tmap::tm_text(\"name\", col=\"black\", size=0.9) \n\n # project for hectares\nLULC_LIBERIA_2014 = terra::project(LULC_LIBERIA_2014, \"EPSG:32629\")\nLULC_LIBERIA_2019 = terra::project(LULC_LIBERIA_2019, \"EPSG:32629\")\nLULC_LIBERIA_2024 = terra::project(LULC_LIBERIA_2024, \"EPSG:32629\")\n# Forest binary maps\nforest_class = 3\nforest_2014 &lt;- LULC_LIBERIA_2014 == forest_class\nforest_2019 &lt;- LULC_LIBERIA_2019 == forest_class\nforest_2024 &lt;- LULC_LIBERIA_2024 == forest_class\n# Forest loss maps\nforest_loss_2014_2019_gross &lt;- forest_2014 & !forest_2019\nforest_loss_2019_2024_gross &lt;- forest_2019 & !forest_2024\nforest_gain_2014_2019_gross &lt;- !forest_2014 & forest_2019\nforest_gain_2019_2024_gross &lt;- !forest_2019 & forest_2024\nforest_loss_2014_2019 &lt;- forest_loss_2014_2019_gross & !forest_gain_2014_2019_gross\nforest_loss_2019_2024 &lt;- forest_loss_2019_2024_gross & !forest_gain_2019_2024_gross\n# Write to disk\nraster::writeRaster(forest_2014, \"./data/BINARY/forest_2014.tif\",overwrite=T)\nraster::writeRaster(forest_2019, \"./data/BINARY/forest_2019.tif\",overwrite=T)\nraster::writeRaster(forest_2024, \"./data/BINARY/forest_2024.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2014_2019, \"./data/BINARY/forest_loss_2014_2019.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2019_2024, \"./data/BINARY/forest_loss_2019_2024.tif\",overwrite=T)\n\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024.tif\n\n\nError: object 'forest_2014' not found\n\n\nError: object 'forest_2019' not found\n\n\nError: object 'forest_2024' not found\n\n\nError: object 'forest_loss_2014_2019' not found\n\n\nError: object 'forest_loss_2019_2024' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2014' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2019' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2024' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_loss_2014_2019' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_loss_2019_2024' not found\n\n\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_project.tif\n\n\n\n# Calculate total number of forest pixels for each year\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_estimate &lt;- sum(forest_2014[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_estimate &lt;- sum(forest_2019[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_estimate &lt;- sum(forest_2024[], na.rm = TRUE) * resolution^2 / 10000\nforest_loss_2014_2019_estimate &lt;- sum(forest_loss_2014_2019[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_estimate &lt;- sum(forest_loss_2019_2024[],na.rm=T)*resolution^2/10000\ncat(\"Total forest area across Liberia in 2014:\", forest_2014_estimate, \"hectares\\n\")\ncat(\"Total forest area across Liberia in 2019:\", forest_2019_estimate, \"hectares\\n\")\ncat(\"Total forest area across Liberia in 2024:\", forest_2024_estimate, \"hectares\\n\")\ncat(\"Total forest Loss across Liberia (2014-2019):\", forest_loss_2014_2019_estimate, \"hectares\\n\")\ncat(\"Total forest Loss across Liberia (2019-2024):\", forest_loss_2019_2024_estimate, \"hectares\\n\")\n\n\n# Calculate forest area for each sub-region (in hectares) for all years\nforest_2014=terra::rast(\"./data/BINARY/forest_2014.tif\")\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_gola_estimate &lt;- sum(forest_2014_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_tong_estimate &lt;- sum(forest_2014_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_norm_estimate &lt;- sum(forest_2014_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_project_estimate &lt;- sum(forest_2014_project[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_gola_estimate &lt;- sum(forest_2019_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_tong_estimate &lt;- sum(forest_2019_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_norm_estimate &lt;- sum(forest_2019_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_project_estimate &lt;- sum(forest_2019_project[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_gola_estimate &lt;- sum(forest_2024_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_tong_estimate &lt;- sum(forest_2024_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_norm_estimate &lt;- sum(forest_2024_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_project_estimate &lt;- sum(forest_2024_project[], na.rm = TRUE) * resolution^2 / 10000\n\n# Calculate forest loss for each sub-region (in hectares) for all periods\nforest_loss_2014_2019_gola_estimate&lt;-sum(forest_loss_2014_2019_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_tong_estimate &lt;- sum(forest_loss_2014_2019_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_norm_estimate &lt;- sum(forest_loss_2014_2019_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_project_estimate &lt;- sum(forest_loss_2014_2019_project[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_gola_estimate&lt;- sum(forest_loss_2019_2024_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_tong_estimate &lt;- sum(forest_loss_2019_2024_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_norm_estimate &lt;- sum(forest_loss_2019_2024_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_project_estimate &lt;- sum(forest_loss_2019_2024_project[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_gola_estimate &lt;- sum(forest_loss_2014_2024_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_tong_estimate &lt;- sum(forest_loss_2014_2024_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_norm_estimate &lt;- sum(forest_loss_2014_2024_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_project_estimate &lt;- sum(forest_loss_2014_2024_project[],na.rm=T)*resolution^2/10000\n\n# Print out the forest area and loss estimates for each region and year\ncat(\"Forest Area in Gola NP (2014):\", forest_2014_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2014):\", forest_2014_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2014):\", forest_2014_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2014):\", forest_2014_project_estimate, \"hectares\\n\")\ncat(\"Forest Area in Gola NP (2019):\", forest_2019_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2019):\", forest_2019_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2019):\", forest_2019_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2019):\", forest_2019_project_estimate, \"hectares\\n\")\ncat(\"Forest Area in Gola NP (2024):\", forest_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2024):\", forest_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2024):\", forest_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2024):\", forest_2024_project_estimate, \"hectares\\n\")\n\ncat(\"Forest Loss in Gola NP (2014-2019):\", forest_loss_2014_2019_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2014-2019):\", forest_loss_2014_2019_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2014-2019):\", forest_loss_2014_2019_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2014-2019):\", forest_loss_2014_2019_project_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Gola NP (2019-2024):\", forest_loss_2019_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2019-2024):\", forest_loss_2019_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2019-2024):\", forest_loss_2019_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2019-2024):\", forest_loss_2019_2024_project_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Gola NP (2014-2024):\", forest_loss_2014_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2014-2024):\", forest_loss_2014_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2014-2024):\", forest_loss_2014_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2014-2024):\", forest_loss_2014_2024_project_estimate, \"hectares\\n\")"
  },
  {
    "objectID": "deforisk.html#allocated-deforestation-risk",
    "href": "deforisk.html#allocated-deforestation-risk",
    "title": "Deforestation Risk Mapping",
    "section": "Allocated deforestation risk",
    "text": "Allocated deforestation risk\nThe following spatial covariates were imported and processed as potential drivers of deforestation risk. Covariates were merged between sociodemographic and geographic datasets surrounding the project area and national level datasets beyond the project area in order to enable jurisdictions analysis.\nFurther updates are expected to these spatial coveriates pending delivery of proprietary data from the client. We also recommend that these mapping and risk assessments be revised or replaced prior to submission of PD, and following the release of Liberia’s Activity Data and jurisdictional deforestation risk maps planned by Verra in Q3 of 2025. For collective review, final covariates were visualized in the following interactive map.\n\nDemography & topography\n\n##############################\n##### Covariate wrangling#####\n##############################\n\n##### Download sociodemography\npop_url &lt;- \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_GLOBE_R2023A/GHS_POP_E2025_GLOBE_R2023A_54009_1000/V1-0/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.zip\" \nosm_url &lt;- \"https://download.geofabrik.de/africa/liberia-latest-free.shp.zip\" \n\n##### Built Environment\nplaces_points_project=sf::st_read(\"./data/Winrock_GIS/Communities_8km.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;dplyr::select(name,fclass)|&gt;rename(place=fclass)|&gt;\n  mutate(place = as.factor(place)) |&gt; mutate(name = as.character(name))\n\nplaces_points_liberia_1=sf::st_read(\"./data/liberia-osmdata/liberia_point.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,place)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_points_liberia_2 &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_places_free_1.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(place=fclass)|&gt;\n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_worship &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_pofw_free_1.shp\") |&gt;\n  sf::st_intersection(country)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(creed=fclass) |&gt; \n  dplyr::mutate(creed=as.factor(creed))  |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt; \n  st_cast(\"POINT\")\n\nplaces_points &lt;- places_points_project %&gt;%\n  bind_rows(places_points_liberia_1,places_points_liberia_2, places_worship) %&gt;%\n  group_by(across(-geometry)) %&gt;%\n  summarise(geometry = st_union(geometry), .groups = \"drop\")\nplaces_points = sf::st_cast(places_points, \"POINT\")\nsf::st_write(places_points, \"./data/covariates/places_points.shp\", delete_dsn=T)\n\n##### Administrative Boundaries\nplaces_poly_liberia &lt;- sf::st_read(\"./data/liberia-osmdata/liberia_poly.shp\")|&gt;st_cast(\"GEOMETRY\")\nplaces_poly_county &lt;- places_poly_liberia[st_geometry_type(places_poly_liberia) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_intersection(country)|&gt;\n  dplyr::select(name,place,admin_leve)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  dplyr::rename(admin_level = admin_leve) |&gt;\n  dplyr::filter(admin_level == \"4\") \nplaces_poly_county &lt;- places_poly_county[st_geometry_type(places_poly_county) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_cast(\"MULTIPOLYGON\")\nsf::st_write(places_poly_county, \"./data/covariates/places_poly_county.shp\", delete_dsn=T)  \n\nplaces_poly_district &lt;- places_poly_liberia[st_geometry_type(places_poly_liberia) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  st_cast(\"POLYGON\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,place,admin_leve)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  dplyr::rename(admin_level = admin_leve) |&gt;\n  dplyr::filter(admin_level == \"6\")\nplaces_poly_district &lt;- places_poly_district[st_geometry_type(places_poly_district) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_cast(\"MULTIPOLYGON\")\nsf::st_write(places_poly_district, \"./data/covariates/places_poly_district.shp\", delete_dsn=T)  \n\nbuildings_private &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_buildings_a_free_1.shp\") |&gt; \n  sf::st_intersection(country) |&gt; sf::st_simplify(preserveTopology = FALSE, dTolerance = 1000) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::rename(place = fclass) |&gt; \n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  st_cast(\"MULTIPOLYGON\") \nsf::st_write(buildings_private, \"./data/covariates/buildings_private.shp\", delete_dsn=T)\n\nbuildings_public &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_pois_a_free_1.shp\")  |&gt;\n  sf::st_intersection(country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::rename(place = fclass) |&gt; \n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  st_cast(\"MULTIPOLYGON\") \nsf::st_write(buildings_public, \"./data/covariates/buildings_public.shp\", delete_dsn=T)\n\nbuildings_merged &lt;- buildings_private |&gt; bind_rows(buildings_public) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nbuildings_merged = sf::st_cast(buildings_merged, \"POLYGON\")\nsf::st_write(buildings_merged, \"./data/covariates/buildings.shp\", delete_dsn=T)\n\n\n###### Waterways \nwaterways_liberia = sf::st_read(\"./data/liberia-osmdata/gis_osm_waterways_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterways_liberia &lt;- waterways_liberia[st_geometry_type(waterways_liberia) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n\nwaterways_project = sf::st_read(\"./data/Winrock_GIS/PA_river.shp\") |&gt;\n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterways_project &lt;- waterways_project[st_geometry_type(waterways_project) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n\nwaterways_hydrosheds = sf::st_read(\"/Users/seamus/repos/rspb-redd-risk-new/data/hydro/HydroRIVERS_v10_af.shp\") |&gt; \n  sf::st_intersection(bbox_country)\nwaterways_hydrosheds &lt;- waterways_hydrosheds[st_geometry_type(waterways_hydrosheds) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n    \nwaterways_merged &lt;- waterways_liberia |&gt; bind_rows(waterways_project) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nwaterways_merged = sf::st_cast(waterways_merged, \"MULTILINESTRING\")\nsf::st_write(waterways_merged, \"./data/covariates/waterways_merged.shp\", delete_dsn=T)\n\nwaterbodies_collection = sf::st_read(\"./data/liberia-osmdata/gis_osm_water_a_free_1.shp\") |&gt; \n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterbodies_poly &lt;- waterbodies_collection[st_geometry_type(waterbodies_collection) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] \nwaterbodies_lines &lt;- waterbodies_collection[st_geometry_type(waterbodies_collection) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] \nwaterbodies_poly_lines = sf::st_boundary(waterbodies_poly)\n\nwaterbodies_waterways_merged &lt;- waterbodies_lines |&gt; bind_rows(waterbodies_poly_lines, waterways_merged) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nwaterbodies_waterways_merged = sf::st_cast(waterbodies_waterways_merged, \"MULTILINESTRING\")\nsf::st_write(waterbodies_waterways_merged, \"./data/covariates/waterbodies_waterways_merged.shp\", delete_dsn=T)\n\n\n###### Transport & Infrastructure\ntransport=sf::st_read(\"./data/liberia-osmdata/gis_osm_transport_a_free_1.shp\")|&gt; st_boundary()|&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nrailways = sf::st_read(\"./data/liberia-osmdata/gis_osm_railways_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_liberia = sf::st_read(\"./data/liberia-osmdata/gis_osm_roads_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_project = sf::st_read(\"./data/Winrock_GIS/PA_roads.shp\") |&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_rail_transport_merged &lt;- transport |&gt; \n  bind_rows(railways, roads_liberia, roads_project) |&gt;\n  group_by(across(-geometry)) |&gt; \n  summarise(geometry = st_union(geometry), .groups = \"drop\")\n\nroads = sf::st_cast(roads_rail_transport_merged, \"MULTILINESTRING\")\nsf::st_write(roads, \"./data/covariates/roads_rail_transport_merged.shp\", delete_dsn=T)\n\nroads &lt;- roads |&gt; bind_rows(roads_sle) |&gt; group_by(across(-geometry)) |&gt; \n  summarise(geometry = st_union(geometry), .groups = \"drop\")\nsf::st_write(roads, \"./data/covariates/roads_intl.shp\", delete_dsn=T)\n\nroads_lib = sf::st_read(\"./data/covariates/roads_intl.shp\") |&gt; st_cast(\"MULTILINESTRING\")\nroads_sle = sf::st_read(\"./data/liberia-osmdata/hotosm_sle_roads_lines_shp.shp\") |&gt;st_cast(\"MULTILINESTRING\")\nroads_lib   = sf::st_intersection(roads_lib, bbox_aoi_2)|&gt;dplyr::select(name)\nroads_sle   = sf::st_intersection(roads_sle, bbox_aoi_2)|&gt;dplyr::select(name)\nroads   = rbind(roads_lib, roads_sle)\nsf::st_write(roads, \"./data/ROADS/roads.shp\", delete_layer=T)\n\nroads_lib = sf::st_intersection(roads_lib, bbox_aoi_2)\nroads_sle = sf::st_intersection(roads_sle, bbox_aoi_2)\n\ntmap::tm_shape(roads_clip) + tmap::tm_lines(col=\"orange\", lwd=0.6) + tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=1.7)\n\n##### Slope / Elevation\ndem   = raster::subset(STACK, \"DEM\")\nslope_tangent = raster::terrain(\n  dem, opt=\"slope\",unit=\"tangent\",neighbors=8,filename=\"./data/DEM/slope_tangent.tif\")\nslope_tangent = terra::rast(\"./data/DEM/slope_tangent.tif\")\nslope_percent = slope_tangent * 100\nslope_percent = terra::clamp(slope_percent, 0, 100) \nslope_percent = raster::raster(slope_percent)\nraster::writeRaster(slope_percent, \"./data/covariates/slope_percent.tif\")\n\nurban &lt;- terra::mask(LULC_LIBERIA_2024, LULC_LIBERIA_2024 == 4, maskvalue = FALSE)\nurban &lt;- raster::raster(urban)\nraster::writeRaster(urban, \"./data/covariates/urban.tif\", overwrite=T)\n\n\n\nAnnualized deforestation\n\n# Assign zones\nzones_sf = counties |&gt; sf::st_transform(\"EPSG:32629\")\nzones_sf$zone_id &lt;- 1:nrow(zones_sf)\nzones_sv &lt;- terra::vect(zones_sf)\n\n# Calculate zonal annualization by jurisdiction\nforest_2024 = terra::rast(\"./data/BINARY/forest_2024.tif\")\nforest_loss_2014_2019 = terra::rast(\"./data/BINARY/forest_loss_2014_2019.tif\")\nforest_loss_2019_2024 = terra::rast(\"./data/BINARY/forest_loss_2019_2024.tif\")\nforest_loss_2014_2024 = terra::rast(\"./data/BINARY/forest_loss_2014_2024.tif\")\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\nzonal_2014_2019 &lt;- terra::extract(forest_loss_2014_2019,zones_sv,fun=sum,na.rm=T)\nzonal_2019_2024 &lt;- terra::extract(forest_loss_2019_2024,zones_sv,fun=sum,na.rm=T)\nnames(zonal_2014_2019) &lt;- c(\"zone_id\", \"loss_2014_2019\")\nnames(zonal_2019_2024) &lt;- c(\"zone_id\", \"loss_2019_2024\")\nzonal_2014_2019$loss_2014_2019 &lt;- zonal_2014_2019$loss_2014_2019 * pixel_area_ha\nzonal_2019_2024$loss_2019_2024 &lt;- zonal_2019_2024$loss_2019_2024 * pixel_area_ha\n\n# Merge baseline years\nzonal_stats &lt;- merge(\n  zonal_2014_2019,      # e.g. (zone_id, loss_2014_2019)\n  zonal_2019_2024,      # e.g. (zone_id, loss_2019_2024)\n  by = \"zone_id\",       # Common ID column\n  all = TRUE            # Keep all rows if zones differ\n)\n# Annualize 10-year total & rejoin to sf object\nzonal_stats$loss_10yr &lt;- zonal_stats$loss_2014_2019 + zonal_stats$loss_2019_2024\nzonal_stats$annual_loss_10yr &lt;- zonal_stats$loss_10yr / 10\nzones_sf &lt;- merge(zones_sf, zonal_stats, by=\"zone_id\", all.x=TRUE)\nhead(zones_sf[, c(\"zone_id\", \"loss_2014_2019\", \"loss_2019_2024\", \n                  \"loss_10yr\", \"annual_loss_10yr\")])\n\n# Derive 10-yr annualized raster\nzones_sv &lt;- terra::vect(zones_sf)\nannual_loss_10yr_raster &lt;- rasterize(\n  zones_sv,                  # polygon SpatVector\n  forest_loss_2014_2019,     # template raster for resolution/extent\n  field = \"annual_loss_10yr\") # the column to rasterize\nnames(annual_loss_10yr_raster) &lt;- (\"annual_loss_10yr\")\nraster::writeRaster(annual_loss_10yr_raster,\"./data/BINARY/annual_loss_2014_2024_zonal.tif\",overwrite=T)\n\n\n\nDistance covariates\n\n# Derive distance-to-edge raster \nforest_2024 = terra::rast(\"./data/BINARY/forest_2024.tif\")\nforest_mask &lt;- terra::classify(forest_2024, cbind(c(1,0), c(1,NA)))\nnonForest_mask &lt;- terra::classify(forest_2024, cbind(c(1,0), c(NA,1)))\nwriteRaster(forest_mask, \"./data/BINARY/forest_mask.tif\", overwrite=T)\nwriteRaster(nonForest_mask, \"./data/BINARY/nonForest_mask.tif\", overwrite=T)\n\nforest_for_distance &lt;- forest_mask\nforest_for_distance_raster &lt;- raster::raster(forest_for_distance) \ndistance_to_edge &lt;- distance(forest_for_distance_raster, filename=\"./data/BINARY/distance_to_edge_unix.tif\")\n\n# Derive distance-to-feature rasters\ntemplate &lt;- forest_2024\nroads_rast &lt;- rasterize(vect(transport), template, field=1, background=0)\nroads_rast &lt;- subst(roads_rast, from=0, to=NA)\ndistance_to_roads &lt;- distance(roads_rast)\nwriteRaster(distance_to_roads, \"./data/LULC/distance_to_roads.tif\", overwrite=T)\n\nplaces_vect   &lt;- sf::st_read(\"./data/BINARY/places.shp\") |&gt; terra::vect()\nplaces_rast   &lt;- rasterize(places_vect,template,field=1,background=0,touches=T)\nplaces_rast   &lt;- subst(places_rast, from=0, to=NA)\ndistance_to_places&lt;- distance(places_rast)\nwriteRaster(distance_to_places, \"./data/LULC/distance_to_places.tif\", overwrite=T)\n\nwaterways_rast&lt;-rasterize(vect(waterways_rast), template, field=1, background=0)\nwaterways_rast&lt;-subst(waterways_rast, from=0, to=NA)\ndistance_to_waterways&lt;-distance(waterways_rast)\nwriteRaster(distance_to_waterways, \"./data/LULC/distance_to_waterways.tif\", overwrite=T)\n\nurban_rast    &lt;- raster::raster(urban)\nurban_rast    &lt;- subst(urban_rast, from=0, to=NA)\ndistance_to_urban &lt;- distance(urban_rast)\nwriteRaster(distance_to_urban, \"./data/LULC/distance_to_urban.tif\", overwrite=T)\n\n# Normalize covariates for quicker computing\nnormalize &lt;- function(x){\n  (x-global(x,\"min\",na.rm=T))/\n    (global(x,\"max\",na.rm=T) -\n       global(x, \"min\",na.rm=T))}\n\npopulation= raster::raster(population)\npopulation= normalize_function(population)\nslope     = raster::raster(slope)\nslope     = normalize_function(slope)\n\ndistance_to_forest    = normalize_function(distance_to_forest)\ndistance_to_roads     = normalize_function(distance_to_roads)\ndistance_to_places    = normalize_function(distance_to_places)\ndistance_to_water     = normalize_function(distance_to_waterways)\ndistance_to_urban     = normalize_function(distance_to_urban)\n\n# invert all risk-producing covariates\ndistance_to_edge_inv &lt;- 1 - distance_to_forest\ndistance_to_roads_inv  &lt;- 1 - distance_to_roads\ndistance_to_places_inv &lt;- 1 - distance_to_places\ndistance_to_water_inv &lt;- 1 -  distance_to_waterways\ndistance_to_urban_inv   &lt;- 1 - distance_to_urban\n\nwriteRaster(distance_to_edge_inv, \"./data/BINARY/distance_to_edge_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_roads_inv, \"./data/BINARY/distance_to_roads_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_places_inv, \"./data/BINARY/distance_to_places_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_water_inv, \"./data/BINARY/distance_to_water_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_urban_inv, \"./data/BINARY/distance_to_urban_inverted.tif\", overwrite=T)\nwriteRaster(slope_norm, \"./data/BINARY/slope_norm.tif\", overwrite=T)\n\n\n\nDeforestation risk & allocation\nTwo methods were explored for weighting variables and creating a generalized deforestation risk index. We could consider developing a spatial risk model using the spatstat package or logistic regression, as has been cited in recent Verra guides. In addition, some of the heavy lifting with input formatting and data wrangling has already been completed.\nHowever, spatial modelling has tended to produce challenges when fitting such large country-wide covariates. Moreover, these kinds of spatialy driven models tend to require longer training procedures due to their intercept-based spatial kernels and slower resampling patterns.\nAlternatively, we have drafted a tentative risk indexing approach based on a weighted sum of subjectively scored covariate effects. While each variable would still need a carefully reasoned score, this option offers a more streamlined method that is easier to adjust. We applied this risk index to inform a risk weighted allocation of the 10-year deforestation rate, first by multiplying the fraction of pixel risk by zonal forest loss, and second by factoring out annual zonal loss by multiplying by pixel risk values, as shown below\n\\[\n\\mathrm{AllocatedLoss}_{\\mathrm{pixel}}\n=\n\\left(\n  \\frac{\\mathrm{risk}_{\\mathrm{pixel}}}{\\sum \\mathrm{risk}_{\\mathrm{zone}}}\n\\right)\n\\times\n\\mathrm{annual\\_loss\\_10yr}_{\\mathrm{zone}}\n\\]\n\\[\n\\mathrm{allocated\\_loss}_{\\mathrm{pixel}}\n=\n\\mathrm{risk}_{\\mathrm{pixel}}\n\\times\n\\left(\n  \\frac{\\mathrm{annual\\_loss\\_10yr}_{\\mathrm{zone}}}{\\sum \\mathrm{risk}_{\\mathrm{zone}}}\n\\right)\n\\]\nBoth formulas describe the same operation in different orders of multiplication: each pixel in a given zone Z receives a share of annual_loss_10yrZ based on its proportional risk (the pixel’s risk relative to the sum of all pixel risks in that zone). This ensures that higher-risk pixels are allocated more deforestation, in line with the Verra guidance for an allocated deforestation risk map.\nWe intend to present both of these approaches for broader review and discussion in our upcoming meeting.\n\nrisk_index &lt;- (0.2 * distance_to_edge) +\n              (0.2 * distance_to_roads) +\n              (0.2 * distance_to_places) +\n              (0.1 * distance_to_urban) +\n              (0.1 * distance_to_water) +\n              (0.1 * slope)\n\n# Re-normalize the index to between 0 and 1\nrmin &lt;- global(risk_index, \"min\", na.rm=TRUE)[1]\nrmax &lt;- global(risk_index, \"max\", na.rm=TRUE)[1]\nrisk_index_norm &lt;- (risk_index - rmin) / (rmax - rmin)\nwriteRaster(risk_index_norm, \"./data/BINARY/deforestation_risk_index.tif\",overwrite=T)\n\n# Returns a data.frame with columns: ID, risk_index_norm_sum\nrisk_sum &lt;- extract(risk_index_norm, zones_sv, fun = sum, na.rm=TRUE)\ncolnames(risk_sum) &lt;- c(\"zone_id\",\"sum_risk\")\nzones_stats &lt;- merge(zones_sf, risk_sum, by=\"zone_id\", all.x=TRUE)\nzones_rast &lt;- rasterize(vect(zones_stats), risk_index_norm, field=\"zone_id\")\nzones_stats$loss_factor &lt;- zones_stats$annual_loss_10yr / zones_stats$sum_risk\nloss_factor_rast &lt;- rasterize(vect(zones_stats), risk_index_norm, field=\"loss_factor\")\nallocated_loss &lt;- risk_index_norm * loss_factor_rast\nwriteRaster(allocated_loss, \"./data/BINARY/allocated_deforestation.tif\", overwrite=T)\n\n# Visualize\nterra::plot(risk_index_norm, main=\"Deforestation risk map\")\nterra::plot(allocated_loss, main=\"Allocated deforestation map\")\n\n\n\nAppendix I: Reference Period Classifiers\nTo run these, you may change eval=F to eval=T at the top of chunk in the .Rmd or .R file saved in the OneDrive folder.\n\n########################### 2019\n# extract signatures\nsignatures_2019 = raster::extract(STACK_2019, samples ,df=T) # watch for data formats\nsamples_signatures_2019 &lt;- dplyr::inner_join(signatures_2019, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2019$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2019 &lt;- stratified_partition(samples_signatures_2019,group_col=\"label\", train_ratio=0.7)\ntrainData_2019 &lt;- partitioned_data_2019$train\ntestData_2019 &lt;- partitioned_data_2019$test\ntable(trainData_2019$label)\ntable(testData_2019$label)\n\n# synthetic minority oversampling technique\ntrainData_2019&lt;-performanceEstimation::smote(label ~ .,data=trainData_2019,perc.over=10, perc.under=100)\ntestData_2019&lt;-performanceEstimation::smote(label ~ .,data=testData_2019,perc.over=10,perc.under=100)\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2019 &lt;- trainData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2019 &lt;- testData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2019 &lt;- c(\n  \"NDVI_2019\", \"BLUE_2019\", \"GREEN_2019\", \"RED_2019\", \n  \"NIR08_2019\", \"SWIR16_2019\", \"SWIR22_2019\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2019 &lt;- caret::train(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2019 &lt;- predict(rf_model_2019, testData_2019)\nprint(rf_model_2019) # cv results\nconfusionMatrix(rf_test_2019,testData_2019$label) # blind test results\n\nindex_feature_2019 &lt;- createMultiFolds(trainData_2019$label, times=5) \npredictor_seq_2019 &lt;-seq(from=1, to=length(predictors_2019),by=2)\n\nsubset_regime_2019 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2019\n  )\n\nrf_model_subset_2019 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], \n  sizes = predictor_seq_2019,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2019\n  )\n\nrf_subset_test_2019 &lt;- predict(rf_model_subset_2019,testData_2019)\nprint(rf_model_subset_2019)\nconfusionMatrix(rf_subset_test_2019$pred,testData_2019$label)\n\n######################### 2024\n# extract signatures\nsignatures_2024 = raster::extract(STACK_2024, samples ,df=T) # watch for data formats\nsamples_signatures_2024 &lt;- dplyr::inner_join(signatures_2024, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2024$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2024 &lt;- stratified_partition(samples_signatures_2024,group_col=\"label\", train_ratio=0.7)\ntrainData_2024 &lt;- partitioned_data_2024$train\ntestData_2024 &lt;- partitioned_data_2024$test\ntable(trainData_2024$label)\ntable(testData_2024$label)\n\n# synthetic minority oversampling technique\ntrainData_2024&lt;-performanceEstimation::smote(label ~ .,data=trainData_2024,perc.over=10, perc.under=100)\ntestData_2024&lt;-performanceEstimation::smote(label ~ .,data=testData_2024,perc.over=10,perc.under=100)\n# interpolate missing cloud pixels with class-median-normalization\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\nwater_2014 &lt;- trainData_2014[trainData_2014$label == \"Water\", ]\nwater_ids &lt;- water_2014$ID\nwater_2024 &lt;- samples_signatures_2024[samples_signatures_2024$ID %in% water_ids, ]\ntrainData_2024 &lt;- rbind(trainData_2024, water_2024)\ntable(trainData_2024$label)\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2024 &lt;- c(\n  \"NDVI_2024\", \"BLUE_2024\", \"GREEN_2024\", \"RED_2024\", \n  \"NIR08_2024\", \"SWIR16_2024\", \"SWIR22_2024\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2024 &lt;- caret::train(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2024 &lt;- predict(rf_model_2024, testData_2024)\nprint(rf_model_2024) # cv results\nconfusionMatrix(rf_test_2024,testData_2024$label) # blind test results\n\nindex_feature_2024 &lt;- createMultiFolds(trainData_2024$label, times=5) \npredictor_seq_2024 &lt;-seq(from=1, to=length(predictors_2024),by=2)\n\nsubset_regime_2024 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2024\n  )\n\nrf_model_subset_2024 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], \n  sizes = predictor_seq_2024,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2024\n  )\n\nrf_subset_test_2024 &lt;- predict(rf_model_subset_2024,testData_2024)\nprint(rf_model_subset_2024)\nconfusionMatrix(rf_subset_test_2024$pred,testData_2024$label)\n\n\nLULC_LIBERIA_2014 &lt;- raster::predict(STACK_2014,rf_model_2014, na.rm=TRUE) |&gt; raster::raster()\nraster::writeRaster(LULC_LIBERIA_2014,\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\",\n  format = \"GTiff\", overwrite = T)\n\nLULC_LIBERIA_2019 &lt;- raster::predict(STACK_2019,rf_model_2019, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2019,\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\",\n  format = \"GTiff\",overwrite = T)\n\nLULC_LIBERIA_2024 &lt;- raster::predict(STACK_2024,rf_model_2014, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2024,\"./data/LULC/LULC_LIBERIA_2024-01-16x.tif\",\n  format = \"GTiff\",overwrite = T)\n\n\n\nAppendix II: Runtime snapshot\n\ndevtools::session_info()\n\n\nLULC_PROJECT_2015=terra::rast(\"./data/LULC/LULC_PROJECT_2015.tif\")\nLULC_PROJECT_2019=terra::rast(\"./data/LULC/LULC_PROJECT_2019.tif\")\nLULC_PROJECT_2024=terra::rast(\"./data/LULC/LULC_PROJECT_2024.tif\")\nLULC_PROJECT_2015=terra::project(LULC_PROJECT_2015, \"EPSG:32629\")\nLULC_PROJECT_2024=terra::project(LULC_PROJECT_2024, \"EPSG:32629\")\nLULC_PROJECT_2019=terra::project(LULC_PROJECT_2019, \"EPSG:32629\")\n\nvoi = sf::st_transform(aoi, 32629) |&gt; terra::vect() \nLULC_PROJECT_2015 = terra::crop(LULC_PROJECT_2015, voi, mask=T)\nLULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, voi, mask=T)\nLULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, voi, mask=T)\n\ncode_dict &lt;- data.frame(\n  id = c(0, 1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Water\", \"Forest\", \"Grassland\", \n            \"Wetland\", \"Croplan\", \"Shrubland\", \n            \"Urban\", \"Bareground\"))\n\nlevels(LULC_PROJECT_2015) &lt;- code_dict\nlevels(LULC_PROJECT_2019) &lt;- code_dict\nlevels(LULC_PROJECT_2024) &lt;- code_dict\n\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2015\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2019\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2024\")\n\nraster_res &lt;- terra::res(LULC_PROJECT_2015) # 9.933065 x 9.933065 m2\npixel_area_ha &lt;- (raster_res[1] * raster_res[2]) / 10000  # Convert m² to hectares\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2015$area_ha &lt;- freq_2015$count * pixel_area_ha\nfreq_2015$percentage &lt;- (freq_2015$area_ha / sum(freq_2015$area_ha)) * 100\nfreq_2015$year &lt;- 2015\n\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2019$area_ha &lt;- freq_2019$count * pixel_area_ha\nfreq_2019$percentage &lt;- (freq_2019$area_ha / sum(freq_2019$area_ha)) * 100\nfreq_2019$year &lt;- 2019\n\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\nfreq_2024$area_ha &lt;- freq_2024$count * pixel_area_ha\nfreq_2024$percentage &lt;- (freq_2024$area_ha / sum(freq_2024$area_ha)) * 100\nfreq_2024$year &lt;- 2024\n\nland_cover_summary=bind_rows(freq_2015, freq_2019, freq_2024)\nland_cover_summary=merge(land_cover_summary,code_dict, by.x=\"value\",by.y=\"id\",all.x=T)\n\nland_cover_summary_wide &lt;- land_cover_summary %&gt;%\n  select(label, year, area_ha, percentage) %&gt;%\n  pivot_wider(names_from = year, values_from = c(area_ha, percentage))\nprint(land_cover_summary_wide)\n\n\nunique_values_2015 &lt;- terra::unique(LULC_PROJECT_2015)\nunique_values_2019 &lt;- terra::unique(LULC_PROJECT_2019)\nunique_values_2024 &lt;- terra::unique(LULC_PROJECT_2024)\n\nprint(unique_values_2015)\nprint(unique_values_2019)\nprint(unique_values_2024)\n\nprint(terra::is.factor(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2019))\nprint(terra::levels(LULC_PROJECT_2024))\n\n\nlevels(LULC_PROJECT_2015) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2019) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2024) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\n\nprint(freq_2015)\nprint(freq_2019)\nprint(freq_2024)\n\nprint(LULC_PROJECT_2015)\nprint(LULC_PROJECT_2019)\nprint(LULC_PROJECT_2024)\n\nplot(LULC_PROJECT_2015, main = \"LULC 2015\")\nplot(LULC_PROJECT_2019, main = \"LULC 2019\")\nplot(LULC_PROJECT_2024, main = \"LULC 2024\")",
    "crumbs": [
      "Home",
      "Deforestation Risk Mapping"
    ]
  },
  {
    "objectID": "deforisk.html#appendix",
    "href": "deforisk.html#appendix",
    "title": "Jurisidictional Deforestation Risk Mapping",
    "section": "Appendix",
    "text": "Appendix\n\nReference Period Classifiers\nTo run these, you may change eval=F to eval=T at the top of chunk in the .Rmd or .R file saved in the OneDrive folder.\n\n########################### 2019\n# extract signatures\nsignatures_2019 = raster::extract(STACK_2019, samples ,df=T) # watch for data formats\nsamples_signatures_2019 &lt;- dplyr::inner_join(signatures_2019, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2019$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2019 &lt;- stratified_partition(samples_signatures_2019,group_col=\"label\", train_ratio=0.7)\ntrainData_2019 &lt;- partitioned_data_2019$train\ntestData_2019 &lt;- partitioned_data_2019$test\ntable(trainData_2019$label)\ntable(testData_2019$label)\n\n# synthetic minority oversampling technique\ntrainData_2019&lt;-performanceEstimation::smote(label ~ .,data=trainData_2019,perc.over=10, perc.under=100)\ntestData_2019&lt;-performanceEstimation::smote(label ~ .,data=testData_2019,perc.over=10,perc.under=100)\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2019 &lt;- trainData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2019 &lt;- testData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2019 &lt;- c(\n  \"NDVI_2019\", \"BLUE_2019\", \"GREEN_2019\", \"RED_2019\", \n  \"NIR08_2019\", \"SWIR16_2019\", \"SWIR22_2019\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2019 &lt;- caret::train(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2019 &lt;- predict(rf_model_2019, testData_2019)\nprint(rf_model_2019) # cv results\nconfusionMatrix(rf_test_2019,testData_2019$label) # blind test results\n\nindex_feature_2019 &lt;- createMultiFolds(trainData_2019$label, times=5) \npredictor_seq_2019 &lt;-seq(from=1, to=length(predictors_2019),by=2)\n\nsubset_regime_2019 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2019\n  )\n\nrf_model_subset_2019 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], \n  sizes = predictor_seq_2019,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2019\n  )\n\nrf_subset_test_2019 &lt;- predict(rf_model_subset_2019,testData_2019)\nprint(rf_model_subset_2019)\nconfusionMatrix(rf_subset_test_2019$pred,testData_2019$label)\n\n######################### 2024\n# extract signatures\nsignatures_2024 = raster::extract(STACK_2024, samples ,df=T) # watch for data formats\nsamples_signatures_2024 &lt;- dplyr::inner_join(signatures_2024, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2024$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2024 &lt;- stratified_partition(samples_signatures_2024,group_col=\"label\", train_ratio=0.7)\ntrainData_2024 &lt;- partitioned_data_2024$train\ntestData_2024 &lt;- partitioned_data_2024$test\ntable(trainData_2024$label)\ntable(testData_2024$label)\n\n# synthetic minority oversampling technique\ntrainData_2024&lt;-performanceEstimation::smote(label ~ .,data=trainData_2024,perc.over=10, perc.under=100)\ntestData_2024&lt;-performanceEstimation::smote(label ~ .,data=testData_2024,perc.over=10,perc.under=100)\n# interpolate missing cloud pixels with class-median-normalization\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\nwater_2014 &lt;- trainData_2014[trainData_2014$label == \"Water\", ]\nwater_ids &lt;- water_2014$ID\nwater_2024 &lt;- samples_signatures_2024[samples_signatures_2024$ID %in% water_ids, ]\ntrainData_2024 &lt;- rbind(trainData_2024, water_2024)\ntable(trainData_2024$label)\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2024 &lt;- c(\n  \"NDVI_2024\", \"BLUE_2024\", \"GREEN_2024\", \"RED_2024\", \n  \"NIR08_2024\", \"SWIR16_2024\", \"SWIR22_2024\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2024 &lt;- caret::train(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2024 &lt;- predict(rf_model_2024, testData_2024)\nprint(rf_model_2024) # cv results\nconfusionMatrix(rf_test_2024,testData_2024$label) # blind test results\n\nindex_feature_2024 &lt;- createMultiFolds(trainData_2024$label, times=5) \npredictor_seq_2024 &lt;-seq(from=1, to=length(predictors_2024),by=2)\n\nsubset_regime_2024 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2024\n  )\n\nrf_model_subset_2024 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], \n  sizes = predictor_seq_2024,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2024\n  )\n\nrf_subset_test_2024 &lt;- predict(rf_model_subset_2024,testData_2024)\nprint(rf_model_subset_2024)\nconfusionMatrix(rf_subset_test_2024$pred,testData_2024$label)\n\n\nLULC_LIBERIA_2014 &lt;- raster::predict(STACK_2014,rf_model_2014, na.rm=TRUE) |&gt; raster::raster()\nraster::writeRaster(LULC_LIBERIA_2014,\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\",\n  format = \"GTiff\", overwrite = T)\n\nLULC_LIBERIA_2019 &lt;- raster::predict(STACK_2019,rf_model_2019, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2019,\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\",\n  format = \"GTiff\",overwrite = T)\n\nLULC_LIBERIA_2024 &lt;- raster::predict(STACK_2024,rf_model_2014, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2024,\"./data/LULC/LULC_LIBERIA_2024-01-16x.tif\",\n  format = \"GTiff\",overwrite = T)\n\n\n\nRuntime snapshot\n\ndevtools::session_info()\n\n\nLULC_PROJECT_2015=terra::rast(\"./data/LULC/LULC_PROJECT_2015.tif\")\nLULC_PROJECT_2019=terra::rast(\"./data/LULC/LULC_PROJECT_2019.tif\")\nLULC_PROJECT_2024=terra::rast(\"./data/LULC/LULC_PROJECT_2024.tif\")\nLULC_PROJECT_2015=terra::project(LULC_PROJECT_2015, \"EPSG:32629\")\nLULC_PROJECT_2024=terra::project(LULC_PROJECT_2024, \"EPSG:32629\")\nLULC_PROJECT_2019=terra::project(LULC_PROJECT_2019, \"EPSG:32629\")\n\nvoi = sf::st_transform(aoi, 32629) |&gt; terra::vect() \nLULC_PROJECT_2015 = terra::crop(LULC_PROJECT_2015, voi, mask=T)\nLULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, voi, mask=T)\nLULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, voi, mask=T)\n\ncode_dict &lt;- data.frame(\n  id = c(0, 1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Water\", \"Forest\", \"Grassland\", \n            \"Wetland\", \"Croplan\", \"Shrubland\", \n            \"Urban\", \"Bareground\"))\n\nlevels(LULC_PROJECT_2015) &lt;- code_dict\nlevels(LULC_PROJECT_2019) &lt;- code_dict\nlevels(LULC_PROJECT_2024) &lt;- code_dict\n\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2015\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2019\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2024\")\n\nraster_res &lt;- terra::res(LULC_PROJECT_2015) # 9.933065 x 9.933065 m2\npixel_area_ha &lt;- (raster_res[1] * raster_res[2]) / 10000  # Convert m² to hectares\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2015$area_ha &lt;- freq_2015$count * pixel_area_ha\nfreq_2015$percentage &lt;- (freq_2015$area_ha / sum(freq_2015$area_ha)) * 100\nfreq_2015$year &lt;- 2015\n\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2019$area_ha &lt;- freq_2019$count * pixel_area_ha\nfreq_2019$percentage &lt;- (freq_2019$area_ha / sum(freq_2019$area_ha)) * 100\nfreq_2019$year &lt;- 2019\n\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\nfreq_2024$area_ha &lt;- freq_2024$count * pixel_area_ha\nfreq_2024$percentage &lt;- (freq_2024$area_ha / sum(freq_2024$area_ha)) * 100\nfreq_2024$year &lt;- 2024\n\nland_cover_summary=bind_rows(freq_2015, freq_2019, freq_2024)\nland_cover_summary=merge(land_cover_summary,code_dict, by.x=\"value\",by.y=\"id\",all.x=T)\n\nland_cover_summary_wide &lt;- land_cover_summary %&gt;%\n  select(label, year, area_ha, percentage) %&gt;%\n  pivot_wider(names_from = year, values_from = c(area_ha, percentage))\nprint(land_cover_summary_wide)\n\n\nunique_values_2015 &lt;- terra::unique(LULC_PROJECT_2015)\nunique_values_2019 &lt;- terra::unique(LULC_PROJECT_2019)\nunique_values_2024 &lt;- terra::unique(LULC_PROJECT_2024)\n\nprint(unique_values_2015)\nprint(unique_values_2019)\nprint(unique_values_2024)\n\nprint(terra::is.factor(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2019))\nprint(terra::levels(LULC_PROJECT_2024))\n\n\nlevels(LULC_PROJECT_2015) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2019) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2024) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\n\nprint(freq_2015)\nprint(freq_2019)\nprint(freq_2024)\n\nprint(LULC_PROJECT_2015)\nprint(LULC_PROJECT_2019)\nprint(LULC_PROJECT_2024)\n\nplot(LULC_PROJECT_2015, main = \"LULC 2015\")\nplot(LULC_PROJECT_2019, main = \"LULC 2019\")\nplot(LULC_PROJECT_2024, main = \"LULC 2024\")\n\n\n\nWorking placemark\n\n#mask_gola = terra::rast(\"./data/BINARY/mask_gola.tif\")\n#mask_tong = terra::rast(\"./data/BINARY/mask_tong.tif\")\n#mask_norm = terra::rast(\"./data/BINARY/mask_norm.tif\")\n#mask_project = terra::rast(\"./data/BINARY/mask_project.tif\")\n#mask_gola=terra::resample(mask_gola, LULC_PROJECT_2015)\n#mask_tong=terra::resample(mask_tong, LULC_PROJECT_2015)\n#mask_norm=terra::resample(mask_norm, LULC_PROJECT_2015)\n#mask_project=terra::resample(mask_project, LULC_PROJECT_2015)\n#LULC_PROJECT_2015=terra::resample(LULC_PROJECT_2019, LULC_PROJECT_2019)\n#LULC_PROJECT_2019=terra::resample(LULC_PROJECT_2019, LULC_PROJECT_2015)\n#LULC_PROJECT_2024=terra::resample(LULC_PROJECT_2024, LULC_PROJECT_2015)\n#LULC_PROJECT_2015 = terra::crop(LULC_PROJECT_2015, mask_project, mask=T)\n#LULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, mask_project, mask=T)\n#LULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, mask_project, mask=T)\n#terra::plot(LULC_PROJECT_2015, main=\"Land Cover, 2015\")\n#terra::plot(LULC_PROJECT_2019, main=\"Land Cover, 2019\")\n#terra::plot(LULC_PROJECT_2024, main=\"Land Cover, 2024\")\n#LULC_PROJECT_2015 = terra::crop(LULC_PROJECT_2015, voi, mask=T)\n#LULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, voi, mask=T)\n#LULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, voi, mask=T)\n\n\n\nurban         = terra::rast(\"./data/covariates/urban.tif\")\nurban_dict    = data.frame(id = c(0, 1), label = c(\"Non-Urban\", \"Urban\"))\nlevels(urban) = urban_dict\ncounties      = sf::st_read(\"./data/covariates/places_poly_county.shp\")\nplaces        = sf::st_read(\"./data/covariates/places_points.shp\")\nplaces_buff   = sf::st_read(\"./data/covariates/places_points_buff.shp\")\nroads_lib     = sf::st_read(\"./data/covariates/roads_rail_transport_merged.shp\") |&gt; \n  rmapshaper::ms_simplify(keep = 0.5)\nroads_lib     = sf::st_intersection(roads_lib, bbox_aoi_2) |&gt; sf::st_cast(\"MULTILINESTRING\")\nroads_sle     = sf::st_read(\"./data/covariates/hotosm_sle_roads_lines_shp.shp\") |&gt;\n  rmapshaper::ms_simplify(keep = 0.5)\nroads_sle     = sf::st_intersection(roads_sle, bbox_aoi_2) |&gt; sf::st_cast(\"MULTILINESTRING\")\nwaterways     = sf::st_read(\"./data/covariates/waterbodies_waterways_merged.shp\")\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction_merc = counties |&gt; dplyr::filter(\n  name == \"Grand Cape Mount County\" | name == \"Gbarpolu County\" ) |&gt; \n  terra::vect() |&gt; \n  terra::project(\"EPSG:3857\")\njurisdiction_merc$name = 'Grand Cape Mount & Gharpolu Counties'\nvoi = sf::st_transform(aoi, 3857) |&gt; terra::vect()\n\ncountry_merc = sf::st_transform(country, 3857) |&gt; terra::vect()\nLULC_LIBERIA_2017=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2017.tif\") |&gt; terra::crop(country_merc, mask=T)\nLULC_LIBERIA_2023=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2023.tif\") |&gt; terra::crop(country_merc, mask=T)\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\nlevels(LULC_LIBERIA_2017) &lt;- code_dict\nlevels(LULC_LIBERIA_2023) &lt;- code_dict\n\nLULC_PROJECT_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(voi, mask=T)\nLULC_PROJECT_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(voi, mask=T)\nLULC_COUNTY_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(jurisdiction_merc, mask=T)\nLULC_COUNTY_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(jurisdiction_merc, mask=T)\n\nLULC_COUNTY_2017 = terra::project(LULC_COUNTY_2017, \"EPSG:4326\") \nLULC_COUNTY_2023 = terra::project(LULC_COUNTY_2023, \"EPSG:4326\")\nLULC_PROJECT_2017 = terra::project(LULC_PROJECT_2017, \"EPSG:4326\") \nLULC_PROJECT_2023 = terra::project(LULC_PROJECT_2023, \"EPSG:4326\")\n\n#mask_project = terra::rast(\"./data/BINARY/mask_project.tif\") |&gt; terra::project(\"EPSG:4326\")\n#mask_project=terra::resample(mask_project, LULC_PROJECT_2017)\n#LULC_PROJECT_2017 = terra::crop(LULC_COUNTY_2017, mask_project, mask=T)\n#LULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, mask_project, mask=T)\n#LULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, mask_project, mask=T)\n#terra::plot(LULC_PROJECT_2015, main=\"Land Cover, 2015\")\n#terra::plot(LULC_PROJECT_2019, main=\"Land Cover, 2019\")\n#terra::plot(LULC_PROJECT_2024, main=\"Land Cover, 2024\")\n\n\n#roads_lib     = sf::st_read(\"./data/covariates/roads_intl.shp\") \n# sf leakage buffering needs utm/metric\naoi_metric = sf::st_transform(aoi, 32629)\nleakage_buffer = sf::st_buffer(aoi_metric, dist = 5500, endCapStyle=\"ROUND\")\nleakage_belt_7 &lt;- sf::st_buffer(aoi_metric, dist = 7500, endCapStyle=\"ROUND\")\nleakage_belt_7 &lt;- sf::st_transform(leakage_belt_7, 4326)\nplaces_buff = sf::st_intersection(places_buff, leakage_belt_7)\nleakage_belt_7 &lt;- sf::st_transform(leakage_belt_7, 32629)\n\naoi_metric = sf::st_transform(aoi, 32629) |&gt; sf::st_combine()\nleakage_buffer = sf::st_buffer(aoi_metric, dist = 5500, endCapStyle=\"ROUND\") |&gt; sf::st_as_sf()\nleakage_belt   &lt;- concaveman::concaveman(leakage_buffer, concavity=5) |&gt; sf::st_zm()\nleakage_belt_7 &lt;- sf::st_buffer(leakage_belt, dist = 2000, endCapStyle=\"ROUND\")\n\nmask(x, mask, inverse=FALSE)\n\n\nleakage_belt_7 &lt;- sf::st_difference(leakage_belt_7, leakage_belt)\nleakage_belt   &lt;- sf::st_difference(leakage_belt, aoi_metric)\nleakage_belt_7 &lt;- sf::st_transform(leakage_belt_7, 4326)\nleakage_belt &lt;- sf::st_transform(leakage_belt, 4326)\n\n\nroads_lib_clip = sf::st_intersection(roads_lib, leakage_belt)\nroads_sle_clip = sf::st_intersection(roads_sle, leakage_belt)\nroads_length = sum(sf::st_length(roads_lib_clip)) + sum(sf::st_length(roads_sle_clip))\nroads_length\n\nwaterways_hydrosheds = sf::st_read(\"/Users/seamus/repos/rspb-redd-risk-new/data/hydro/HydroRIVERS_v10_af.shp\") |&gt; \n  sf::st_intersection(bbox_country)\nwaterways_hydrosheds &lt;- waterways_hydrosheds[st_geometry_type(waterways_hydrosheds) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \nwaterways_count = sf::st_intersection(waterways, leakage_belt)\nwaterways_length = sum(sf::st_length(waterways_count))\nwaterways_hydrosheds_count = sf::st_intersection(waterways_hydrosheds, leakage_belt)\nwaterways_hydrosheds_length = sum(sf::st_length(waterways_hydrosheds_count))\nwaterways_hydrosheds_length\nwaterways_length\nplaces_count = sf::st_intersection(places, leakage_belt)\nplaces_buff_count = sf::st_intersection(places_buff, leakage_belt)\n\n#FOREST_COUNTY_2013=terra::rast(\"./data/LULC/FOREST_COUNTY_2013.tif\")\n#FOREST_COUNTY_2023=terra::rast(\"./data/LULC/FOREST_COUNTY_2023.tif\")\n#FOREST_COUNTY_2013 = terra::crop(FOREST_COUNTY_2013, jurisdiction, mask=T)\n#FOREST_COUNTY_2023 = terra::crop(FOREST_COUNTY_2023, jurisdiction, mask=T)\n#terra::plot(FOREST_COUNTY_2013)\n#terra::plot(FOREST_COUNTY_2023)\n\ntmap::tmap_mode(\"plot\")\ntmap_options(max.raster = c(plot = 800000, view = 8000000))\nbasemap_osm   = tmaptools::read_osm(bbox_aoi_1,type=\"esri-natgeo\",ext=1.8, zoom=12) # \"esri-natgeo\"\nbasemap = st_transform(basemap_osm, crs = 4326)\nbbox_aoi_3    = terra::vect(terra::ext(terra::vect(bbox_aoi)) * 1.6) |&gt; sf::st_as_sf()\n\nspecies_rarity = terra::rast(\"./data/IUCN/Combined_RWR_2024.tif\")\nspecies_threat = terra::rast(\"./data/IUCN/Combined_THR_RWR_2024.tif\")\nhabitat_threat = terra::rast(\"./data/HABITAT/Basic_Critical_Habitat_Raster.tif\")\nhabitat_class = terra::rast(\"./data/HABITAT/Drill_Down_Critical_Habitat.tif\")\n\nhabitat_threat = terra::crop(habitat_threat, jurisdiction, mask=T)\nhabitat_class = terra::crop(habitat_class, jurisdiction, mask=T)\n\nsf::st_crs(bbox_aoi_3) = 4326\nsf::st_crs(leakage_belt) = 4326\nsf::st_crs(leakage_belt_7) = 4326\nsf::st_crs(roads_lib) = 4326\nsf::st_crs(roads_sle) = 4326\nsf::st_crs(places_buff) = 4326\nsf::st_crs(places) = 4326\nsf::st_crs(waterways) = 4326\nsf::st_crs(waterways_hydrosheds) = 4326\nsf::st_crs(counties) = 4326\n\ntm21 &lt;- tmap::tm_shape(bbox_aoi_3) + tmap::tm_borders(lwd=0) +\n   tmap::tm_shape(basemap) + tmap::tm_rgb() +\n   tmap::tm_shape(LULC_PROJECT_2017) + \n   tmap::tm_raster(\n     \"label\",col.scale = tm_scale_categorical(), title=\"\", \n     values = c(\"yellow\", \"red\", \"darkolivegreen\", \"pink\", \"green\", \"purple\", \"blue\")) +\n   tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (5.5km)\") +  \n   tmap::tm_shape(leakage_belt_7) + tmap::tm_polygons(col=\"lightblue\", fill=\"lightblue\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"lightblue\", labels = \"Leakage Belt (7.5km)\") +  \n   tmap::tm_shape(roads_lib) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) + \n   tmap::tm_shape(roads_sle) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) +       \n   tmap::tm_add_legend(type=\"lines\", col=\"orange\", labels = \"Roads\") +\n   tmap::tm_shape(waterways) + tmap::tm_lines(col = \"blue\", lwd = 2.5) +\n   tmap::tm_add_legend(type=\"lines\", col=\"blue\", labels = \"Waterways\") +\n   tmap::tm_shape(waterways_hydrosheds) + tmap::tm_lines(col = \"blue\", lwd = 0.5, col_alpha=0.5) +\n   tmap::tm_shape(counties) + tmap::tm_borders(lwd = 1, col=\"black\") +\n   tmap::tm_add_legend(type=\"lines\", col=\"black\", labels = \"County Border\") +  \n   tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=2.5) + \n   tmap::tm_add_legend(type=\"lines\", col=\"red\", labels = \"Project Boundary\") +  \n   tmap::tm_shape(places_buff) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"purple\",col = \"white\") + \n   tmap::tm_text(\"name\", just = \"center\", col=\"black\", size=0.3, auto.placement=T, print.tiny=T) +\n   tmap::tm_add_legend(type=\"symbols\", col=\"purple\", fill=\"purple\", size=0.8, labels = \"Communities\") +\n   tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n   tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n   tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n   tmap::tm_layout(legend.position=c(\"left\", \"top\"), legend.bg.color = \"white\") +\n   tmap::tm_title(\"Land Cover Map, 2017\", size=2)\ntmap::tmap_save(tm21, \"./data/site_maps/site_map_2017.png\", height=15000, asp=0, dpi=2500)\n\ntm211 &lt;- tmap::tm_shape(bbox_aoi_3) + tmap::tm_borders(lwd=0) +\n   tmap::tm_shape(basemap) + tmap::tm_rgb() +\n   tmap::tm_shape(LULC_COUNTY_2017) + \n   tmap::tm_raster(\n     \"label\",col.scale = tm_scale_categorical(), title=\"\", \n     values = c(\"yellow\", \"red\", \"darkolivegreen\", \"pink\", \"green\", \"purple\", \"blue\")) +\n   tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (5.5km)\") +  \n   tmap::tm_shape(leakage_belt_7) + tmap::tm_polygons(col=\"lightblue\", fill=\"lightblue\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"lightblue\", labels = \"Leakage Belt (7.5km)\") +  \n   tmap::tm_shape(roads_lib) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) + \n   tmap::tm_shape(roads_sle) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) +       \n   tmap::tm_add_legend(type=\"lines\", col=\"orange\", labels = \"Roads\") +\n   tmap::tm_shape(waterways) + tmap::tm_lines(col = \"blue\", lwd = 2.5) +\n   tmap::tm_add_legend(type=\"lines\", col=\"blue\", labels = \"Waterways\") +\n   tmap::tm_shape(waterways_hydrosheds) + tmap::tm_lines(col = \"blue\", lwd = 0.5, col_alpha=0.5) +\n   tmap::tm_shape(counties) + tmap::tm_borders(lwd = 1, col=\"black\") +\n   tmap::tm_add_legend(type=\"lines\", col=\"black\", labels = \"County Border\") +  \n   tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=2.5) + \n   tmap::tm_add_legend(type=\"lines\", col=\"red\", labels = \"Project Boundary\") +  \n   tmap::tm_shape(places_buff) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"purple\",col = \"white\") + \n   tmap::tm_text(\"name\", just = \"center\", col=\"black\", size=0.3, auto.placement=T, print.tiny=T) +\n   tmap::tm_add_legend(type=\"symbols\", col=\"purple\", fill=\"purple\", size=0.8, labels = \"Communities\") +\n   tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n   tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n   tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n   tmap::tm_layout(legend.position=c(\"left\", \"top\"), legend.bg.color = \"white\") +\n   tmap::tm_title(\"Land Cover Map, 2017\", size=2)\ntmap::tmap_save(tm211, \"./data/site_maps/site_map_2017_lulc_ext.png\", height=15000, asp=0, dpi=2000)\n\ntm22 &lt;- tmap::tm_shape(leakage_belt_7) + tmap::tm_borders(lwd=0) +\n   tmap::tm_shape(basemap) + tmap::tm_rgb() +\n   tmap::tm_shape(LULC_PROJECT_2023) + \n   tmap::tm_raster(\"label\",col.scale = tm_scale_categorical(), title=\"\", \n     values = c(\"yellow\", \"red\", \"darkolivegreen\", \"pink\", \"green\", \"purple\", \"blue\")) +\n   tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (5.5km)\") +  \n   tmap::tm_shape(leakage_belt_7) + tmap::tm_polygons(col=\"lightblue\", fill=\"lightblue\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"lightblue\", labels = \"Leakage Belt (7.5km)\") +  \n   tmap::tm_shape(roads_lib) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) + \n   tmap::tm_shape(roads_sle) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) +       \n   tmap::tm_add_legend(type=\"lines\", col=\"orange\", labels = \"Roads\") +\n   tmap::tm_shape(waterways) + tmap::tm_lines(col = \"blue\", lwd = 2.5) +\n   tmap::tm_add_legend(type=\"lines\", col=\"blue\", labels = \"Waterways\") +\n   tmap::tm_shape(waterways_hydrosheds) + tmap::tm_lines(col = \"blue\", lwd = 0.5, col_alpha=0.5) +\n   tmap::tm_shape(counties) + tmap::tm_borders(lwd = 1, col=\"black\") +\n   tmap::tm_add_legend(type=\"lines\", col=\"black\", labels = \"County Border\") +  \n   tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=2.5) + \n   tmap::tm_add_legend(type=\"lines\", col=\"red\", labels = \"Project Boundary\") +  \n   tmap::tm_shape(places_buff) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"purple\",col = \"white\") +\n   tmap::tm_text(\"name\", just = \"center\", col=\"black\", size=0.45, auto.placement=T, print.tiny=T) +\n   tmap::tm_add_legend(type=\"symbols\", col=\"purple\", fill=\"purple\", size=0.8, labels = \"Communities\") +\n   tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n   tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n   tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n   tmap::tm_layout(legend.position=c(\"left\", \"top\"), legend.bg.color = \"white\") +\n   tmap::tm_title(\"Land Cover Map, 2023\", size=2)\ntmap::tmap_save(tm22, \"./data/site_maps/site_map_2023.png\", height=15000, asp=0, dpi=2000)\n\ntm222 &lt;- tmap::tm_shape(leakage_belt) + tmap::tm_borders(lwd=0) +\n   tmap::tm_shape(basemap) + tmap::tm_rgb() +\n   tmap::tm_shape(LULC_COUNTY_2023) + \n   tmap::tm_raster(\"label\",col.scale = tm_scale_categorical(), title=\"\", \n     values = c(\"yellow\", \"red\", \"darkolivegreen\", \"pink\", \"green\", \"purple\", \"blue\")) +\n   tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (5.5km)\") +  \n   tmap::tm_shape(leakage_belt_7) + tmap::tm_polygons(col=\"lightblue\", fill=\"lightblue\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"lightblue\", labels = \"Leakage Belt (7.5km)\") +  \n   tmap::tm_shape(roads_lib) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) + \n   tmap::tm_shape(roads_sle) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) +       \n   tmap::tm_add_legend(type=\"lines\", col=\"orange\", labels = \"Roads\") +\n   tmap::tm_shape(waterways) + tmap::tm_lines(col = \"blue\", lwd = 2.5) +\n   tmap::tm_add_legend(type=\"lines\", col=\"blue\", labels = \"Waterways\") +\n   tmap::tm_shape(waterways_hydrosheds) + tmap::tm_lines(col = \"blue\", lwd = 0.5, col_alpha=0.5) +\n   tmap::tm_shape(counties) + tmap::tm_borders(lwd = 1, col=\"black\") +\n   tmap::tm_add_legend(type=\"lines\", col=\"black\", labels = \"County Border\") +  \n   tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=2.5) + \n   tmap::tm_add_legend(type=\"lines\", col=\"red\", labels = \"Project Boundary\") +  \n   tmap::tm_shape(places_buff) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"purple\",col = \"white\") +\n   tmap::tm_text(\"name\", just = \"center\", col=\"black\", size=0.45, auto.placement=T) +\n   tmap::tm_add_legend(type=\"symbols\", col=\"purple\", fill=\"purple\", size=0.8, labels = \"Communities\") +\n   tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n   tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n   tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n   tmap::tm_layout(legend.position=c(\"left\", \"top\"), legend.bg.color = \"white\") +\n   tmap::tm_title(\"Land Cover Map, 2023\", size=2)\ntmap::tmap_save(tm222, \"./data/site_maps/site_map_2023_ext.png\", height=15000, asp=0, dpi=2000)\n\ntm23 &lt;- tmap::tm_shape(bbox_aoi_3) + tmap::tm_borders(lwd = 0) +\n   tmap::tm_shape(basemap) + tmap::tm_rgb() +\n   tmap::tm_shape(LULC_PROJECT_2024) + \n   tmap::tm_raster(\"label\",col.scale = tm_scale_categorical(), title=\"\", \n             values = c(\"yellow\", \"red\", \"darkolivegreen\", \"pink\", \"green\", \"purple\", \"blue\")) +\n   tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n   tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (10km)\") +  \n   tmap::tm_shape(roads_lib) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) + \n   tmap::tm_shape(roads_sle) + tmap::tm_lines(col=\"darkorange\", lwd=1.5) +       \n   tmap::tm_add_legend(type=\"lines\", col=\"orange\", labels = \"Roads\") +\n   tmap::tm_shape(waterways) + tmap::tm_lines(col = \"blue\", lwd = 2.5) +\n   tmap::tm_add_legend(type=\"lines\", col=\"blue\", labels = \"Waterways\") +\n   tmap::tm_shape(counties) + tmap::tm_borders(lwd = 1, col=\"black\") +\n   tmap::tm_add_legend(type=\"lines\", col=\"black\", labels = \"County Border\") +  \n   tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=2.5) + \n   tmap::tm_add_legend(type=\"lines\", col=\"red\", labels = \"Project Boundary\") +  \n   tmap::tm_shape(places_buff) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"purple\",col = \"white\") +\n   tmap::tm_add_legend(type=\"symbols\", col=\"purple\", labels = \"Communities\") +\n   tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n   tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n   tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n   tmap::tm_layout(legend.position=c(\"left\", \"top\"), legend.bg.color = \"white\") +\n   tmap::tm_title(\"Land Cover Map, 2024\", size=2)\ntmap::tmap_save(tm23, \"./data/site_maps/site_map_2024.png\", height=12000, asp=0, dpi=1200)\n\n\n\n##### Built Environment\nplaces_points_project=sf::st_read(\"./data/Winrock_GIS/Communities_8km.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;dplyr::select(name,fclass)|&gt;rename(place=fclass)|&gt;\n  mutate(place = as.factor(place)) |&gt; mutate(name = as.character(name))\n\nplaces_points_liberia_1=sf::st_read(\"./data/liberia-osmdata/liberia_point.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(bbox_country_1)|&gt;\n  dplyr::select(name,place)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_points_liberia_2 &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_places_free_1.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(bbox_country_1)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(place=fclass)|&gt;\n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_worship &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_pofw_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_1)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(creed=fclass) |&gt; \n  dplyr::mutate(creed=as.factor(creed))  |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt; \n  st_cast(\"POINT\")\n\nplaces_points &lt;- places_points_project |&gt;\n  bind_rows(places_points_liberia_1,places_points_liberia_2, places_worship) |&gt;\n  group_by(across(-geometry)) |&gt;\n  summarise(geometry = st_union(geometry), groups = \"drop\") |&gt;\n  sf::st_cast(places_points, \"POINT\")\nsf::st_write(places_points, \"./data/covariates/places_points_buff.shp\", delete_dsn=T)\n\n\n###### Transport & Infrastructure\ntransport=sf::st_read(\"./data/liberia-osmdata/gis_osm_transport_a_free_1.shp\")|&gt; st_boundary()|&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nrailways = sf::st_read(\"./data/liberia-osmdata/gis_osm_railways_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_liberia = sf::st_read(\"./data/liberia-osmdata/gis_osm_roads_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_project = sf::st_read(\"./data/Winrock_GIS/PA_roads.shp\") |&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_rail_transport_merged &lt;- transport |&gt; \n  bind_rows(railways, roads_liberia, roads_project) |&gt;\n  group_by(across(-geometry)) |&gt; \n  summarise(geometry = st_union(geometry), .groups = \"drop\")\n\nroads = sf::st_cast(roads_rail_transport_merged, \"MULTILINESTRING\")\nsf::st_write(roads, \"./data/covariates/roads_rail_transport_merged.shp\", delete_dsn=T)\n\n##### Slope / Elevation\ndem   = raster::subset(STACK, \"DEM\")\nslope_tangent = raster::terrain(\n  dem, opt=\"slope\",unit=\"tangent\",neighbors=8,filename=\"./data/DEM/slope_tangent.tif\")\nslope_tangent = terra::rast(\"./data/DEM/slope_tangent.tif\")\nslope_percent = slope_tangent * 100\nslope_percent = terra::clamp(slope_percent, 0, 100) \nslope_percent = raster::raster(slope_percent)\nraster::writeRaster(slope_percent, \"./data/covariates/slope_percent.tif\")\n\nbuffer_ring &lt;- sf::st_buffer(aoi, dist = 20000)\nsf::st_write(buffer_ring, \"./data/covariates/buffer_ring.shp\", delete_layer = TRUE)\nbuffer_ring = st_read(\"./data/covariates/buffer_ring.shp\")\nterra::plot(basemap)\ntmap::tm_shape(basemap) + tmap::tm_rgb()\n\ntmap::tm_shape(jurisdiction) + tmap::tm_borders(lwd=0) +\n   tmap::tm_shape(FOREST_COUNTY_2013) + \n   tmap::tm_raster(\n     \"treecover2000\", col.scale = tm_scale_categorical(values = c(\"#FF000000\", \"purple\"))) +\n  tmap::tm_shape(leakage_belt) + tmap::tm_polygons(col=\"yellow\", fill=\"yellow\",fill_alpha=0.05,lwd=1)+\n  tmap::tm_add_legend(type=\"lines\", col=\"yellow\", labels = \"Leakage Belt (8km)\") +\n  tmap::tm_shape(places_buff) + tm_symbols(size = 0.7,lwd = 0.5,fill = \"purple\",col = \"orange\") +\n  tmap::tm_add_legend(type=\"symbols\", col=\"purple\", labels = \"Communities\") +\n  tmap::tm_shape(places) + tm_symbols(size = 0.35,lwd = 0.5,fill = \"orange\",col = \"white\") +\n  tmap::tm_add_legend(type=\"symbols\", col=\"orange\", labels = \"Communities\") +\n  tmap::tm_shape(jurisdiction) + tmap::tm_borders(col=\"red\", lwd=2)\n\n\n  #leave buckets for iterative procedures in this step, assuming revision in mapping\n\n\nplaces_a = sf::st_read(\"./data/POP/places_points.shp\") |&gt; sf::st_intersection(aoi) |&gt; dplyr::select(name)\nplaces_b = sf::st_read(\"./data/POP/Villages.shp\") |&gt; sf::st_transform(4326) |&gt; dplyr::select(Settlement) |&gt; dplyr::rename(name = Settlement)\nplaces = places_a |&gt; bind_rows(places_b) |&gt; group_by(across(-geometry)) |&gt;\n  summarise(geometry = st_union(geometry), groups = \"drop\") |&gt; sf::st_cast(\"POINT\") \nsf::st_write(places, \"./data/POP/places.shp\", delete_dsn=T)"
  },
  {
    "objectID": "deforisk.html#footnotes",
    "href": "deforisk.html#footnotes",
    "title": "Deforestation Risk",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPlease note that model performance metrics differ slightly with each runtime due to Monte Carlo resampling and the number of randomForest decision trees. This is to say that accuracy results in the chunk below may not be precisely matching the in-text reporting here if a new run has been implemented locally on your machine.↩︎",
    "crumbs": [
      "Home",
      "Deforestation Risk"
    ]
  },
  {
    "objectID": "deforisk.html#activity-data",
    "href": "deforisk.html#activity-data",
    "title": "Deforestation Risk",
    "section": "Activity data",
    "text": "Activity data\nThis section documents inputs and procedures used to derive national and project-level deforestation maps. This follows three main steps:\n\nCompare land cover training samples for Liberia;\nClassify & assess accuracy of forest cover maps for 2014, 2019, and 2024;\nSpatially map deforestation risk, allocate jurisdictional deforestation & compare with FREL.\n\n\nTraining samples\nTraining samples for the country and project area were extracted from two gold standard global land cover time series datasets: the GLanCE dataset (Stanimirova et al. 2023) and TimeSpec4LULC dataset. Both training datasets were processed with continuous change and class migration algorithms. While Verra is yet to establish requirements for addressing feature class migration in classification of baseline activity data (verraVM0048ReducingEmissions2023a?; verraVMD0055EstimationEmission2024?; Verra 2021), we may recommend incorporating this remote sensing best practice or showcase its improvements to accuracy metrics, as follows.\nTable 2: Class conversions of training samples\n\nLevel-1 classes in the GLanCE and TimeSpec4LULC datasets were recoded below to match class labels cited in the “Lookups” sheet of “ER_Workbook_Gola_Liberia.xlsx”, and the report titled “Liberia’s Forest Reference Emission Level Submission to the UNFCCC (Woodcock et al., n.d.; governmentofliberiaLiberiasForestReference2019?).\nTo address class imbalances, the Winrock team derived additional training samples and appended to the GLanCE datapoint collection. This sampling aimed to improve class-to-country proportionality while targeting plot-to-pixel dimensions and homogenous rule throughout training sample selection.\n\n# import & tidy samples\nsamples_raw = read.csv(\"./data/training_samples/glance_training.csv\")\nsamples_clean = samples_raw |&gt;\n  dplyr::select(Lon, Lat, Glance_Class_ID_level1, Start_Year, End_Year)|&gt;\n  dplyr::rename(longitude = Lon) |&gt;\n  dplyr::rename(latitude = Lat) |&gt;\n  dplyr::rename(label_old = Glance_Class_ID_level1) |&gt;\n  dplyr::mutate(start_date = as.Date(paste(Start_Year,\"01\",\"01\",sep = \"-\")))|&gt;\n  dplyr::mutate(end_date = as.Date(paste(End_Year, \"01\", \"01\", sep = \"-\")))|&gt;\n  dplyr::select(longitude, latitude, start_date, end_date, label_old)|&gt;\n  dplyr::mutate(code = case_when(\n    label_old == '4' ~ 0, \n    label_old == '7' ~ 1, \n    label_old == '6' ~ 2, \n    label_old == '5' ~ 3, \n    label_old == '1' ~ 4, \n    label_old == '3' ~ 99, \n    label_old == '2' ~ 88)\n    ) |&gt;\n  dplyr::mutate(label = case_when(\n    code == '0'  ~ \"Bareground\", \n    code == '1'  ~ \"Regrowth\", \n    code == '2'  ~ \"Farmbush\", \n    code == '3'  ~ \"Forest\", \n    code == '4'  ~ \"Water\", \n    code == '99' ~ \"Urban\", \n    code == '88' ~ \"Snow\")\n    ) |&gt; \n  dplyr::mutate(label = as.factor(label)) |&gt;\n  dplyr::mutate(id = row_number()) |&gt; \n  dplyr::select(-label_old)\n\n# filter to project area\nsamples_sf       = sf::st_as_sf(samples_clean, crs = 4326, coords = c(\"longitude\", \"latitude\"))\nsamples_clipped  = sf::st_intersection(samples_sf, country) # n = 364\nsamples_country  = samples_sf[samples_clipped, ] |&gt; sf::st_transform(4326)\nsamples          = sf::st_crop(samples_country, st_bbox(country))\nsf::st_write(samples, \"./data/training_samples/glance_spatial_clip.shp\", delete_dsn = T)\nwrite.csv(samples, \"./data/training_samples/glance_spatial_clip.csv\", row.names = F)\ndplyr::count(samples, label)\n\n# Winrock training samples\nsamples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock3.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\n#samples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock2.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\n#samples_winrock &lt;- sf::st_read(\"./data/training_samples/samples_winrock.shp\") |&gt; sf::st_cast() |&gt; sf::st_transform(4326)\nsamples_winrock &lt;- samples_winrock |&gt;\n  dplyr::select(Name)|&gt;\n  dplyr::mutate(\n    start_date = as.Date(\"2014-01-01\"),\n    end_date = as.Date(\"2024-01-01\"),\n    id = row_number()\n  )\n\nsamples_winrock$label &lt;- case_when(\n  stringr::str_detect(samples_winrock$Name, \"^Bareland\")  ~ \"Bareground\",\n  stringr::str_detect(samples_winrock$Name, \"^Regrowth\")  ~ \"Regrowth\",\n  stringr::str_detect(samples_winrock$Name, \"^Farmbush\")  ~ \"Farmbush\",\n  stringr::str_detect(samples_winrock$Name, \"^Forest\")  ~ \"Forest\",\n  stringr::str_detect(samples_winrock$Name, \"^Water\")   ~ \"Water\",\n  stringr::str_detect(samples_winrock$Name, \"^Swamp\")   ~ \"Swamp\",\n  TRUE ~ \"MISSING\"\n  ) |&gt; as.factor()\n\nsamples_winrock$code &lt;- case_when(\n  samples_winrock$label == \"Bareground\" ~ 0,\n  samples_winrock$label == \"Regrowth\"   ~ 1,\n  samples_winrock$label == \"Farmbush\"   ~ 2,\n  samples_winrock$label == \"Water\"      ~ 4,\n  samples_winrock$label == \"Swamp\"      ~ 5,\n  TRUE                                  ~ NA_real_  # Use NA_real_ for numeric NA\n)\n\nsamples_winrock &lt;- samples_winrock[!(samples_winrock$label == \"Forest\"), ]\nsamples_winrock$label &lt;- droplevels(samples_winrock$label)\n\nsamples_winrock &lt;- samples_winrock |&gt;\n  dplyr::select(-Name)\nsamples_combined &lt;- rbind(samples, samples_winrock)\nst_write(samples_combined, \"./data/training_samples/samples_combined.shp\", delete_dsn=T)\nsamples = sf::st_read(\"./data/training_samples/samples_combined.shp\")\ndplyr::count(samples, label)\n\n\n\nRaster collection\nThe dataset of STAC-formatted Landsat Collection-2-Level-2 was extracted from the Google Earth Engine Catalog and processed using a cloudless and pixel quality ranking mask before back-filling with median normalization. This was implemented in a Colab python runtime here. The collection of unclassified rasters was temporarily stored in a Google Drive folder and the consolidated, resampled and labelled full stack is available to download directly from here. In addition, full script and all runtime setups are available from the project’s github repository here\nLandsat data was acquired instead of Sentinel imagery due to start date of project’s 10-year baseline occurring before the launch of the Sentinel 2 satellite. The following chunk provides an alternative worflow, though less reliable, R-native workflow for acquiring, aligning, and processing rasters for the extent of Liberia.\nThe processes above were repeated for three baseline interval years of 2014, 2019, and 2024 and then saved into consolidated raster stack and visualized below.\n\n# import\nNDVI_2014=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2014-01-04.tif\")\nNDVI_2019=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2019-01-02.tif\")\nNDVI_2024=terra::rast(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_NDVI_2024-01-16.tif\")\nSTACK=raster::brick(\"./data/STACK/LANDSAT_TM-ETM-OLI_198055_STACK-&-DEM_2014-01-04_2024-01-16_INTERP.tif\")\n\n# visualize\nhist(NDVI_2014, main = \"NDVI Distribution, 2014\", col = \"springgreen\") \nhist(NDVI_2019, main = \"NDVI Distribution, 2019\", col = \"springgreen\")\nhist(NDVI_2024, main = \"NDVI Distribution, 2024\", col = \"springgreen\")\nplot(NDVI_2014,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\nplot(NDVI_2019,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\nplot(NDVI_2024,main=\"NDVI, 2014\",xlim=c(-11.5,-7.5),ylim=c(4.1,8.6),border=\"gray\")\nplot(st_geometry(samples), add=T)\n\n\n\nImage classification\nWe trained a Random Forest model fitted with 500 decision trees. The dataset was partitioned using a 70:30 ratio which was which was trained using Monte Carlo resampling regime (k=100). Accuracy assessments were reported using a confusion matrix. Uncertainty metrics were then used to explore best subset of variables according to magnitude and performances of recursive modeling, which informed final model selection.\n\n# extract signatures\nsignatures_2014 = raster::extract(STACK_2014, samples ,df=T) # watch for data formats\nsamples_signatures_2014 &lt;- dplyr::inner_join(signatures_2014, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2014$geometry &lt;- NULL # set geometry to NULL for model training\n\n# Stratify to ensure all classes are present in both train and test\nstratified_partition &lt;- function(data, group_col, train_ratio = 0.7) {\n  split_data &lt;- lapply(split(data, data[[group_col]]), function(df) {\n    train_size &lt;- max(1, floor(train_ratio * nrow(df)))\n    train_idx &lt;- sample(seq_len(nrow(df)), size = train_size)\n    list(train = df[train_idx, ], test = df[-train_idx, ])\n  })\n  train_data &lt;- do.call(rbind, lapply(split_data, `[[`, \"train\"))\n  test_data &lt;- do.call(rbind, lapply(split_data, `[[`, \"test\"))\n  list(train = train_data, test = test_data)\n  }\npartitioned_data_2014 &lt;- stratified_partition(samples_signatures_2014,group_col=\"label\", train_ratio=0.7)\ntrainData_2014 &lt;- partitioned_data_2014$train\ntestData_2014 &lt;- partitioned_data_2014$test\n#table(trainData_2014$label)\n#table(testData_2014$label)\n\n# synthetic minotrity oversampling technique\ntrainData_2014&lt;-performanceEstimation::smote(label ~ .,data=trainData_2014,perc.over=30,perc.under=30)\ntestData_2014&lt;-performanceEstimation::smote(label ~ .,data=testData_2014,perc.over=30,perc.under=30)\n# interpolate missing cloud pixels with class-median-normalization\ntrainData_2014 &lt;- trainData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = T), .))) |&gt; ungroup()\ntestData_2014 &lt;- testData_2014 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = T), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2014 &lt;- c(\n  \"NDVI_2014\", \"BLUE_2014\", \"GREEN_2014\", \"RED_2014\", \n  \"NIR08_2014\", \"SWIR16_2014\", \"SWIR22_2014\", \"DEM\"\n  )\n# set training parameters\ncv_regime &lt;- caret::trainControl(\n  method          = 'LGOCV',\n  number          = 100,\n  savePredictions = T,\n  verboseIter     = F\n  )\n\n# train classifier\nrf_model_2014 &lt;- caret::train(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nAccuracy assessments1\nResults suggested a moderate concordance between observed and predicted classes with optimal model performance during cross-validation at mtry of 3. Overall statistics reported Kappa Index of 71.04%, Accuracy of 88.61% (0.95CI 84.46%, 95.71%), and a smaller No Information Rate of 0.8158 (p&lt;0.01). In addition, key classes of Forest were predicted with robust Sensitivity (98.92%) and Specificity (76.16%).\nTo address model weaknesses, the team recommends sourcing additional verified training samples, or alternatively applying a weighted Random Forest, Gradient Boosting or Support Vector Machines kernels (SVM) to improve performance of underrepresented classes. Note, these modeling updates will require substantial runtimes.\n\nrf_test_2014 &lt;- predict(rf_model_2014, testData_2014)\nprint(rf_model_2014) # cv results\ncaret::confusionMatrix(rf_test_2014,testData_2014$label) # blind test results\n\nRandom Forest \n\n1862 samples\n   8 predictor\n   7 classes: 'Bareground', 'Farmbush', 'Forest', 'Regrowth', 'Swamp', 'Urban', 'Water' \n\nNo pre-processing\nResampling: Repeated Train/Test Splits Estimated (100 reps, 75%) \nSummary of sample sizes: 1399, 1399, 1399, 1399, 1399, 1399, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n  2     0.9976674  0.9935532\n  3     0.9976674  0.9935535\n  4     0.9976674  0.9935553\n  5     0.9976674  0.9935596\n  6     0.9976674  0.9935626\n  8     0.9976674  0.9935652\n\nKappa was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 8.\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         28        8      0        0     0     3     0\n  Farmbush            0       10      0        0     0     0     0\n  Forest              4        0    696        8     0     0     0\n  Regrowth            0        0      8       41     0     0     0\n  Swamp               0        0      0        0    31     0     0\n  Urban               0        4      0        0     0    80     0\n  Water               0        0      0        0     0     0    10\n\nOverall Statistics\n                                          \n               Accuracy : 0.9624          \n                 95% CI : (0.9481, 0.9737)\n    No Information Rate : 0.7562          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.9086          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest Class: Regrowth Class: Swamp Class: Urban\nSensitivity                    0.87500         0.45455        0.9886         0.83673       1.0000      0.96386\nSpecificity                    0.98776         1.00000        0.9471         0.99093       1.0000      0.99528\nPos Pred Value                 0.71795         1.00000        0.9831         0.83673       1.0000      0.95238\nNeg Pred Value                 0.99552         0.98697        0.9641         0.99093       1.0000      0.99646\nPrevalence                     0.03437         0.02363        0.7562         0.05263       0.0333      0.08915\nDetection Rate                 0.03008         0.01074        0.7476         0.04404       0.0333      0.08593\nDetection Prevalence           0.04189         0.01074        0.7605         0.05263       0.0333      0.09023\nBalanced Accuracy              0.93138         0.72727        0.9679         0.91383       1.0000      0.97957\n                     Class: Water\nSensitivity               1.00000\nSpecificity               1.00000\nPos Pred Value            1.00000\nNeg Pred Value            1.00000\nPrevalence                0.01074\nDetection Rate            0.01074\nDetection Prevalence      0.01074\nBalanced Accuracy         1.00000\n\n\nModel calibration\nWe employed recursive predictor subsetting to identify predictors of greatest magnitude and non-informative features to enhance model performance and reduce model complexity, respectively. This aims to limit potential of multicolinearity, despite inherent robustness of randomForest algorithms against such violations. The subsetted model was evaluated on the test dataset. The confusion matrix and performance metrics were summarized below.\n\nindex_feature_2014 &lt;- createMultiFolds(trainData_2014$label, times=5) \npredictor_seq_2014 &lt;-seq(from=1, to=length(predictors_2014),by=2)\n\nsubset_regime_2014 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2014\n  )\n\nrf_model_subset_2014 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2014[, c(predictors_2014, \"label\")], \n  sizes = predictor_seq_2014,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2014\n  )\n\nrf_subset_test_2014 &lt;- predict(rf_model_subset_2014,testData_2014)\nprint(rf_model_subset_2014)\ncaret::confusionMatrix(rf_subset_test_2014$pred,testData_2014$label)\n\nRecursive feature selection\n\nOuter resampling method: Repeated Train/Test Splits Estimated (50 reps, 75%) \n\nResampling performance over subset size:\n\n\nThe top 3 variables (out of 3):\n   BLUE_2014, DEM, SWIR22_2014\n\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Bareground Farmbush Forest Regrowth Swamp Urban Water\n  Bareground         28        8     12        0     0     3     0\n  Farmbush            0       10      8        0     0     0     0\n  Forest              4        4    679       32    31     9     0\n  Regrowth            0        0      0        0     0     0     0\n  Swamp               0        0      0        0     0    10     0\n  Urban               0        0      5       17     0    61     0\n  Water               0        0      0        0     0     0    10\n\nOverall Statistics\n                                         \n               Accuracy : 0.8464         \n                 95% CI : (0.8216, 0.869)\n    No Information Rate : 0.7562         \n    P-Value [Acc &gt; NIR] : 1.085e-11      \n                                         \n                  Kappa : 0.5879         \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: Bareground Class: Farmbush Class: Forest Class: Regrowth Class: Swamp Class: Urban Class: Water\nSensitivity                    0.87500         0.45455        0.9645         0.00000      0.00000      0.73494      1.00000\nSpecificity                    0.97442         0.99120        0.6476         1.00000      0.98889      0.97406      1.00000\nPos Pred Value                 0.54902         0.55556        0.8946             NaN      0.00000      0.73494      1.00000\nNeg Pred Value                 0.99545         0.98686        0.8547         0.94737      0.96634      0.97406      1.00000\nPrevalence                     0.03437         0.02363        0.7562         0.05263      0.03330      0.08915      0.01074\nDetection Rate                 0.03008         0.01074        0.7293         0.00000      0.00000      0.06552      0.01074\nDetection Prevalence           0.05478         0.01933        0.8153         0.00000      0.01074      0.08915      0.01074\nBalanced Accuracy              0.92471         0.72287        0.8060         0.50000      0.49444      0.85450      1.00000\n\n\n \n \nVariables Accuracy Kappa AccuracySD KappaSD Selected\n1   1   0.9981  0.9949  0.003389    0.008870    \n2   3   0.9994  0.9983  0.001759    0.004588    *\n3   5   0.9991  0.9978  0.001984    0.005188    \n4   7   0.9989  0.9972  0.002423    0.006388    \n5   8   0.9989  0.9972  0.002423    0.006388    \n\n\n\n\n\n\n\n\n\n\n\n\n\nVa riables\n&lt;S3: AsIs&gt;\nA ccuracy\n&lt;S3: AsIs&gt;\nKappa\n&lt;S3: AsIs&gt;\nAcc uracySD\n&lt;S3: AsIs&gt;\nKappaSD\n&lt;S3: AsIs&gt;\nS elected\n&lt;S3: AsIs&gt;\n\n\n\n\n1\n1\n0.9981\n0.9949\n0 .003389\n0 .008870\n\n\n\n2\n3\n0.9994\n0.9983\n0 .001759\n0 .004588\n*\n\n\n3\n5\n0.9991\n0.9978\n0 .001984\n0 .005188\n\n\n\n4\n7\n0.9989\n0.9972\n0 .002423\n0 .006388\n\n\n\n5\n8\n0.9989\n0.9972\n0 .002423\n0 .006388\n\n\n\n\nIn summary, the subset model achieved an Accuracy of 88.58% and a Kappa Index of 0.6338. These metrics closely align with the results of the original model, suggesting minimal or no loss in predictive power despite using fewer predictors. Similarly, high-performing classes of Forest maintained sensitivity and specificity (SE = 0.9667, SP = 0.8462). Given that the reduction in complexity offered by the subsetted model does not provide significant benefits in this context, we recommend proceeding with the original model to make spatial predictions.\nThese modelling operations were repeated for 2019 and 2024 (see Appendix).\nSpatial predictions were made using their respective models and outputs of classified LULC rasters were saved in the same Google Drive folder linked above in previous sections.\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction = counties |&gt; dplyr::filter(\n  name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" ) |&gt; terra::vect()\njurisdiction$name = 'Grand Cape Mount & Gharpolu Counties'\n\nLULC_COUNTY_2014=terra::rast(\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\nLULC_COUNTY_2019=terra::rast(\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\nLULC_COUNTY_2024=terra::rast(\"./data/LULC/LULC_LIBERIA_2024-01-16.tif\") |&gt; \n  terra::crop(jurisdiction, mask=T) |&gt; terra::trim()\n\ncode_dict &lt;- data.frame(id = c(1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Bareground\", \"Cropland\", \"Forest\", \"Shrubland\", \"Wetland\", \"Urban\", \"Water\"))\nlevels(LULC_COUNTY_2014) &lt;- code_dict\nlevels(LULC_COUNTY_2019) &lt;- code_dict\nlevels(LULC_COUNTY_2024) &lt;- code_dict\n\nLULC_COUNTY_2014 = terra::project(LULC_COUNTY_2014, \"EPSG:32629\")\nLULC_COUNTY_2019 = terra::project(LULC_COUNTY_2019, \"EPSG:32629\")\nLULC_COUNTY_2024 = terra::project(LULC_COUNTY_2024, \"EPSG:32629\")\njurisdiction = jurisdiction |&gt; terra::project(\"EPSG:32629\")\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\n\ncompute_land_cover_summary &lt;- function(jurisdiction, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(jurisdiction) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(jurisdiction$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        jurisdiction[jurisdiction$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2014\" = LULC_COUNTY_2014,\n  \"2019\" = LULC_COUNTY_2019,\n  \"2024\" = LULC_COUNTY_2024\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(jurisdiction, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_stats.csv\", row.names = F)\nland_cover_summary\n\n\nLULC_LIBERIA_2014=terra::rast(\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\")\nLULC_LIBERIA_2019=terra::rast(\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\")\nLULC_LIBERIA_2024=terra::rast(\"./data/LULC/LULC_LIBERIA_2024-01-16.tif\")\n\ncode_dict &lt;- data.frame(id = c(1, 2, 3, 4, 5, 6, 7),\n  label = c(\n    \"Bareground\", \"Cropland\", \n    \"Forest\", \"Shrubland\", \n    \"Wetland\", \"Urban\", \n    \"Water\"))\n\nlevels(LULC_LIBERIA_2014) &lt;- code_dict\nlevels(LULC_LIBERIA_2019) &lt;- code_dict\nlevels(LULC_LIBERIA_2024) &lt;- code_dict\n\nLULC_LIBERIA_2014 = terra::project(LULC_LIBERIA_2014, \"EPSG:32629\")\nLULC_LIBERIA_2019 = terra::project(LULC_LIBERIA_2019, \"EPSG:32629\")\nLULC_LIBERIA_2024 = terra::project(LULC_LIBERIA_2024, \"EPSG:32629\")\ncountry_metric = sf::st_transform(country, 32629) |&gt; terra::vect()\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\n\ncompute_land_cover_summary &lt;- function(country_metric, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(country_metric) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(country_metric$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        country_metric[country_metric$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2014\" = LULC_LIBERIA_2014,\n  \"2019\" = LULC_LIBERIA_2019,\n  \"2024\" = LULC_LIBERIA_2024\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(country_metric, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_country.csv\", row.names = F)\nland_cover_summary\n\n\ncountry_merc = sf::st_transform(country, 3857) |&gt; terra::vect()\nLULC_LIBERIA_2017=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2017.tif\") |&gt; terra::crop(country_merc, mask=T)\nLULC_LIBERIA_2023=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2023.tif\") |&gt; terra::crop(country_merc, mask=T)\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\nlevels(LULC_LIBERIA_2017) &lt;- code_dict\nlevels(LULC_LIBERIA_2023) &lt;- code_dict\n\npixel_area_ha &lt;- res(LULC_LIBERIA_2017)[1] * res(LULC_LIBERIA_2017)[2] / 10000\ncompute_land_cover_summary &lt;- function(country_merc, rasters, pixel_area) {\n  results &lt;- list()\n  if (terra::nrow(country_merc) == 0)\n    {stop(\"The provided SpatVector jurisdiction is empty.\")}\n  for (region in unique(country_merc$name)) \n    {for (year in names(rasters)) \n      {cropped_raster &lt;- terra::crop(rasters[[year]],\n        country_merc[country_merc$name == region, ],\n        mask = TRUE)\n      if (terra::ncell(cropped_raster) == 0) \n        {warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))next}\n      freq = terra::freq(cropped_raster)\n      freq$area_ha = freq$count * pixel_area\n      freq$percentage = (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region = region\n      freq$year = year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n      }\n    }\n  return(do.call(rbind, results))\n  }\n\n# Organize rasters into a named list\nrasters &lt;- list(\"2017\" = LULC_LIBERIA_2017,\n                \"2023\" = LULC_LIBERIA_2023)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(country_merc, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_country_io.csv\", row.names = F)\nland_cover_summary\n\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction_merc = counties |&gt; dplyr::filter(\n  name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" ) |&gt; \n  terra::vect() |&gt; \n  terra::project(\"EPSG:3857\")\njurisdiction_merc$name = 'Grand Cape Mount & Gharpolu Counties'\nvoi = sf::st_transform(aoi, 3857) |&gt; terra::vect()\n\ncountry_merc = sf::st_transform(country, 3857) |&gt; terra::vect()\nLULC_LIBERIA_2017=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2017.tif\") |&gt; terra::crop(country_merc, mask=T)\nLULC_LIBERIA_2023=terra::rast(\"./data/LULC/IO_LULC_LIBERIA_2023.tif\") |&gt; terra::crop(country_merc, mask=T)\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\nlevels(LULC_LIBERIA_2017) &lt;- code_dict\nlevels(LULC_LIBERIA_2023) &lt;- code_dict\n\nLULC_PROJECT_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(voi, mask=T)\nLULC_PROJECT_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(voi, mask=T)\nLULC_COUNTY_2017 = LULC_LIBERIA_2017 |&gt; terra::crop(jurisdiction_merc, mask=T)\nLULC_COUNTY_2023 = LULC_LIBERIA_2023 |&gt; terra::crop(jurisdiction_merc, mask=T)\n\ncode_dict &lt;- data.frame(id = c(1, 2, 4, 5, 7, 10, 11),  \n  label = c(\"Water\", \"Forest\", \"Wetland\", \"Bareground\",\n            \"Built\", \"Cropland\", \"Rangeland\"))\n\nlevels(LULC_COUNTY_2017) &lt;- code_dict\nlevels(LULC_COUNTY_2023) &lt;- code_dict\nlevels(LULC_PROJECT_2017) &lt;- code_dict\nlevels(LULC_PROJECT_2023) &lt;- code_dict\n\ncompute_land_cover_summary &lt;- function(jurisdiction_merc, rasters, pixel_area) {\n  results &lt;- list()\n    if (terra::nrow(jurisdiction_merc) == 0) {\n    stop(\"The provided SpatVector jurisdiction is empty.\")\n  }\n  for (region in unique(jurisdiction_merc$name)) {\n    for (year in names(rasters)) {\n      cropped_raster &lt;- terra::crop(\n        rasters[[year]],\n        jurisdiction_merc[jurisdiction_merc$name == region, ],\n        mask = TRUE\n      )\n      if (terra::ncell(cropped_raster) == 0) {\n        warning(paste(\"Cropped raster for\", region, year, \"is empty. Skipping.\"))\n        next\n      }\n      freq &lt;- terra::freq(cropped_raster)\n      freq$area_ha &lt;- freq$count * pixel_area\n      freq$percentage &lt;- (freq$area_ha / sum(freq$area_ha)) * 100\n      freq$region &lt;- region\n      freq$year &lt;- year\n      results[[paste(region, year, sep = \"_\")]] &lt;- freq\n    }\n  }\n  \n  return(do.call(rbind, results))\n}\n\n# Organize rasters into a named list\nrasters &lt;- list(\n  \"2017\" = LULC_COUNTY_2017,\n  \"2023\" = LULC_COUNTY_2023\n)\n\n# Compute land cover summary\nland_cover_summary &lt;- compute_land_cover_summary(jurisdiction_merc, rasters, pixel_area_ha)\nwrite.csv(land_cover_summary, \"./data/tables/land_cover_county_io.csv\", row.names = F)\nland_cover_summary\n\n\nland_cover_summary$value &lt;- factor(land_cover_summary$value,\n  levels = c(\"Forest\", \"Water\", \"Rangeland\", \"Built\", \"Cropland\", \"Bareground\", \"Wetland\")\n  )\n\nggplot(land_cover_summary, aes(x = year, y = percentage, fill = value)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.4) +\n  ggrepel::geom_text_repel(\n  aes(label = paste0(round(percentage, 1), \"%\")),  \n  size = 2.5,  # Smaller text size\n  max.overlaps = Inf,\n  box.padding = 0.3,  \n  point.padding = 0.2,  \n  segment.size = 0.2\n  ) + \n  labs(title = \"Land cover change in Grand Cape Mount & Gharpolu counties\",\n       x = NULL,\n       y = \"Proportion (%)\",\n       fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 11, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text.x = element_text(size = 9, angle = 0, face = \"bold\", hjust = 0.5),\n    axis.text.y = element_text(size = 10),\n    legend.position = \"bottom\"\n  )\n\n\nggplot(land_cover_summary, aes(x = year, y = percentage, fill = value)) + \n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.4) + \n  ggrepel::geom_text_repel(\n    aes(label = paste0(round(percentage, 1), \"%\")),  \n    size = 3, \n    color = \"black\",\n    box.padding = 0.3,  \n    point.padding = 0.2,  \n    direction = \"x\",  # Adjust text to move horizontally\n    max.overlaps = Inf  \n  ) + \n  coord_flip() +  # Flip the chart\n  labs(\n    title = \"Land cover change of project jurisdictions, 2017-2023\", \n    x = \"Year\", \n    y = \"Proportion (%)\", \n    fill = \"Land Cover Class\"\n  ) + \n  theme_minimal()\n\n`mask_gola = terra::rast(“./data/BINARY/mask_gola.tif”) mask_tong = terra::rast(“./data/BINARY/mask_tong.tif”) mask_norm = terra::rast(“./data/BINARY/mask_norm.tif”) mask_project = terra::rast(“./data/BINARY/mask_project.tif”) mask_gola=terra::resample(mask_gola, LULC_PROJECT_2014) mask_tong=terra::resample(mask_tong, LULC_PROJECT_2014) mask_norm=terra::resample(mask_norm, LULC_PROJECT_2014) mask_project=terra::resample(mask_project, LULC_PROJECT_2014)\n\n\nForest area\n\ncounties = sf::st_read(\"./data/covariates/places_poly_county.shp\")\njurisdiction = counties |&gt; dplyr::filter(name == \"Grand Cape Mount County\" | name == \"Gharpolu County\" )\njurisdiction$name = 'Grand Cape Mount & Gharpolu Counties'\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(jurisdiction) + tmap::tm_borders(lwd = 1.2, col=\"green\") + tmap::tm_text(\"name\", col=\"black\", size=0.9) \n\n # project for hectares\nLULC_LIBERIA_2014 = terra::project(LULC_LIBERIA_2014, \"EPSG:32629\")\nLULC_LIBERIA_2019 = terra::project(LULC_LIBERIA_2019, \"EPSG:32629\")\nLULC_LIBERIA_2024 = terra::project(LULC_LIBERIA_2024, \"EPSG:32629\")\n# Forest binary maps\nforest_class = 3\nforest_2014 &lt;- LULC_LIBERIA_2014 == forest_class\nforest_2019 &lt;- LULC_LIBERIA_2019 == forest_class\nforest_2024 &lt;- LULC_LIBERIA_2024 == forest_class\n# Forest loss maps\nforest_loss_2014_2019_gross &lt;- forest_2014 & !forest_2019\nforest_loss_2019_2024_gross &lt;- forest_2019 & !forest_2024\nforest_gain_2014_2019_gross &lt;- !forest_2014 & forest_2019\nforest_gain_2019_2024_gross &lt;- !forest_2019 & forest_2024\nforest_loss_2014_2019 &lt;- forest_loss_2014_2019_gross & !forest_gain_2014_2019_gross\nforest_loss_2019_2024 &lt;- forest_loss_2019_2024_gross & !forest_gain_2019_2024_gross\n# Write to disk\nraster::writeRaster(forest_2014, \"./data/BINARY/forest_2014.tif\",overwrite=T)\nraster::writeRaster(forest_2019, \"./data/BINARY/forest_2019.tif\",overwrite=T)\nraster::writeRaster(forest_2024, \"./data/BINARY/forest_2024.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2014_2019, \"./data/BINARY/forest_loss_2014_2019.tif\",overwrite=T)\nraster::writeRaster(forest_loss_2019_2024, \"./data/BINARY/forest_loss_2019_2024.tif\",overwrite=T)\n\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024.tif\n\n\nError: object 'forest_2014' not found\n\n\nError: object 'forest_2019' not found\n\n\nError: object 'forest_2024' not found\n\n\nError: object 'forest_loss_2014_2019' not found\n\n\nError: object 'forest_loss_2019_2024' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2014' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2019' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_2024' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_loss_2014_2019' not found\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'forest_loss_2019_2024' not found\n\n\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2014_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2019_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_2024_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2019_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2019_2024_project.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_gola.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_tong.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_norm.tif\n\n\nError: [rast] file does not exist: ./data/BINARY/forest_loss_2014_2024_project.tif\n\n\n\n# Calculate total number of forest pixels for each year\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_estimate &lt;- sum(forest_2014[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_estimate &lt;- sum(forest_2019[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_estimate &lt;- sum(forest_2024[], na.rm = TRUE) * resolution^2 / 10000\nforest_loss_2014_2019_estimate &lt;- sum(forest_loss_2014_2019[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_estimate &lt;- sum(forest_loss_2019_2024[],na.rm=T)*resolution^2/10000\ncat(\"Total forest area across Liberia in 2014:\", forest_2014_estimate, \"hectares\\n\")\ncat(\"Total forest area across Liberia in 2019:\", forest_2019_estimate, \"hectares\\n\")\ncat(\"Total forest area across Liberia in 2024:\", forest_2024_estimate, \"hectares\\n\")\ncat(\"Total forest Loss across Liberia (2014-2019):\", forest_loss_2014_2019_estimate, \"hectares\\n\")\ncat(\"Total forest Loss across Liberia (2019-2024):\", forest_loss_2019_2024_estimate, \"hectares\\n\")\n\n\n# Calculate forest area for each sub-region (in hectares) for all years\nforest_2014=terra::rast(\"./data/BINARY/forest_2014.tif\")\nresolution &lt;- terra::res(forest_2014)[1]\nforest_2014_gola_estimate &lt;- sum(forest_2014_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_tong_estimate &lt;- sum(forest_2014_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_norm_estimate &lt;- sum(forest_2014_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2014_project_estimate &lt;- sum(forest_2014_project[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_gola_estimate &lt;- sum(forest_2019_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_tong_estimate &lt;- sum(forest_2019_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_norm_estimate &lt;- sum(forest_2019_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2019_project_estimate &lt;- sum(forest_2019_project[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_gola_estimate &lt;- sum(forest_2024_gola[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_tong_estimate &lt;- sum(forest_2024_tong[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_norm_estimate &lt;- sum(forest_2024_norm[], na.rm = TRUE) * resolution^2 / 10000\nforest_2024_project_estimate &lt;- sum(forest_2024_project[], na.rm = TRUE) * resolution^2 / 10000\n\n# Calculate forest loss for each sub-region (in hectares) for all periods\nforest_loss_2014_2019_gola_estimate&lt;-sum(forest_loss_2014_2019_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_tong_estimate &lt;- sum(forest_loss_2014_2019_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_norm_estimate &lt;- sum(forest_loss_2014_2019_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2019_project_estimate &lt;- sum(forest_loss_2014_2019_project[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_gola_estimate&lt;- sum(forest_loss_2019_2024_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_tong_estimate &lt;- sum(forest_loss_2019_2024_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_norm_estimate &lt;- sum(forest_loss_2019_2024_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2019_2024_project_estimate &lt;- sum(forest_loss_2019_2024_project[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_gola_estimate &lt;- sum(forest_loss_2014_2024_gola[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_tong_estimate &lt;- sum(forest_loss_2014_2024_tong[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_norm_estimate &lt;- sum(forest_loss_2014_2024_norm[],na.rm=T)*resolution^2/10000\nforest_loss_2014_2024_project_estimate &lt;- sum(forest_loss_2014_2024_project[],na.rm=T)*resolution^2/10000\n\n# Print out the forest area and loss estimates for each region and year\ncat(\"Forest Area in Gola NP (2014):\", forest_2014_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2014):\", forest_2014_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2014):\", forest_2014_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2014):\", forest_2014_project_estimate, \"hectares\\n\")\ncat(\"Forest Area in Gola NP (2019):\", forest_2019_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2019):\", forest_2019_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2019):\", forest_2019_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2019):\", forest_2019_project_estimate, \"hectares\\n\")\ncat(\"Forest Area in Gola NP (2024):\", forest_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Area in Tonglay (2024):\", forest_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Area in Norman (2024):\", forest_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Area in Project (2024):\", forest_2024_project_estimate, \"hectares\\n\")\n\ncat(\"Forest Loss in Gola NP (2014-2019):\", forest_loss_2014_2019_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2014-2019):\", forest_loss_2014_2019_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2014-2019):\", forest_loss_2014_2019_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2014-2019):\", forest_loss_2014_2019_project_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Gola NP (2019-2024):\", forest_loss_2019_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2019-2024):\", forest_loss_2019_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2019-2024):\", forest_loss_2019_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2019-2024):\", forest_loss_2019_2024_project_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Gola NP (2014-2024):\", forest_loss_2014_2024_gola_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Tonglay (2014-2024):\", forest_loss_2014_2024_tong_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Norman (2014-2024):\", forest_loss_2014_2024_norm_estimate, \"hectares\\n\")\ncat(\"Forest Loss in Project (2014-2024):\", forest_loss_2014_2024_project_estimate, \"hectares\\n\")",
    "crumbs": [
      "Home",
      "Deforestation Risk"
    ]
  },
  {
    "objectID": "deforisk.html#deforestation-allocation",
    "href": "deforisk.html#deforestation-allocation",
    "title": "Deforestation Risk",
    "section": "Deforestation allocation",
    "text": "Deforestation allocation\nThe following spatial covariates were imported and processed as potential drivers of deforestation risk. Covariates were merged between sociodemographic and geographic datasets surrounding the project area and national level datasets beyond the project area in order to enable jurisdictions analysis.\nFurther updates are expected to these spatial coveriates pending delivery of proprietary data from the client. We also recommend that these mapping and risk assessments be revised or replaced prior to submission of PD, and following the release of Liberia’s Activity Data and jurisdictional deforestation risk maps planned by Verra in Q3 of 2025. For collective review, final covariates were visualized in the following interactive map.\n\nDemography & topography\n\n##############################\n##### Covariate wrangling#####\n##############################\n\n##### Download sociodemography\npop_url &lt;- \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_GLOBE_R2023A/GHS_POP_E2025_GLOBE_R2023A_54009_1000/V1-0/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.zip\" \nosm_url &lt;- \"https://download.geofabrik.de/africa/liberia-latest-free.shp.zip\" \n\n##### Built Environment\nplaces_points_project=sf::st_read(\"./data/Winrock_GIS/Communities_8km.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;dplyr::select(name,fclass)|&gt;rename(place=fclass)|&gt;\n  mutate(place = as.factor(place)) |&gt; mutate(name = as.character(name))\n\nplaces_points_liberia_1=sf::st_read(\"./data/liberia-osmdata/liberia_point.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,place)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_points_liberia_2 &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_places_free_1.shp\")|&gt;\n  st_cast(\"POINT\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(place=fclass)|&gt;\n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nplaces_worship &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_pofw_free_1.shp\") |&gt;\n  sf::st_intersection(country)|&gt;\n  dplyr::select(name,fclass)|&gt;\n  dplyr::rename(creed=fclass) |&gt; \n  dplyr::mutate(creed=as.factor(creed))  |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt; \n  st_cast(\"POINT\")\n\nplaces_points &lt;- places_points_project %&gt;%\n  bind_rows(places_points_liberia_1,places_points_liberia_2, places_worship) %&gt;%\n  group_by(across(-geometry)) %&gt;%\n  summarise(geometry = st_union(geometry), .groups = \"drop\")\nplaces_points = sf::st_cast(places_points, \"POINT\")\nsf::st_write(places_points, \"./data/covariates/places_points.shp\", delete_dsn=T)\n\n##### Administrative Boundaries\nplaces_poly_liberia &lt;- sf::st_read(\"./data/liberia-osmdata/liberia_poly.shp\")|&gt;st_cast(\"GEOMETRY\")\nplaces_poly_county &lt;- places_poly_liberia[st_geometry_type(places_poly_liberia) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_intersection(country)|&gt;\n  dplyr::select(name,place,admin_leve)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  dplyr::rename(admin_level = admin_leve) |&gt;\n  dplyr::filter(admin_level == \"4\") \nplaces_poly_county &lt;- places_poly_county[st_geometry_type(places_poly_county) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_cast(\"MULTIPOLYGON\")\nsf::st_write(places_poly_county, \"./data/covariates/places_poly_county.shp\", delete_dsn=T)  \n\nplaces_poly_district &lt;- places_poly_liberia[st_geometry_type(places_poly_liberia) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  st_cast(\"POLYGON\")|&gt;sf::st_intersection(country)|&gt;\n  dplyr::select(name,place,admin_leve)|&gt;\n  dplyr::mutate(place = as.factor(place)) |&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  dplyr::rename(admin_level = admin_leve) |&gt;\n  dplyr::filter(admin_level == \"6\")\nplaces_poly_district &lt;- places_poly_district[st_geometry_type(places_poly_district) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] |&gt;\n  sf::st_cast(\"MULTIPOLYGON\")\nsf::st_write(places_poly_district, \"./data/covariates/places_poly_district.shp\", delete_dsn=T)  \n\nbuildings_private &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_buildings_a_free_1.shp\") |&gt; \n  sf::st_intersection(country) |&gt; sf::st_simplify(preserveTopology = FALSE, dTolerance = 1000) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::rename(place = fclass) |&gt; \n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  st_cast(\"MULTIPOLYGON\") \nsf::st_write(buildings_private, \"./data/covariates/buildings_private.shp\", delete_dsn=T)\n\nbuildings_public &lt;- sf::st_read(\"./data/liberia-osmdata/gis_osm_pois_a_free_1.shp\")  |&gt;\n  sf::st_intersection(country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::rename(place = fclass) |&gt; \n  dplyr::mutate(place = as.factor(place))|&gt; \n  dplyr::mutate(name = as.character(name)) |&gt;\n  st_cast(\"MULTIPOLYGON\") \nsf::st_write(buildings_public, \"./data/covariates/buildings_public.shp\", delete_dsn=T)\n\nbuildings_merged &lt;- buildings_private |&gt; bind_rows(buildings_public) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nbuildings_merged = sf::st_cast(buildings_merged, \"POLYGON\")\nsf::st_write(buildings_merged, \"./data/covariates/buildings.shp\", delete_dsn=T)\n\n\n###### Waterways \nwaterways_liberia = sf::st_read(\"./data/liberia-osmdata/gis_osm_waterways_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterways_liberia &lt;- waterways_liberia[st_geometry_type(waterways_liberia) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n\nwaterways_project = sf::st_read(\"./data/Winrock_GIS/PA_river.shp\") |&gt;\n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterways_project &lt;- waterways_project[st_geometry_type(waterways_project) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n\nwaterways_hydrosheds = sf::st_read(\"/Users/seamus/repos/rspb-redd-risk-new/data/hydro/HydroRIVERS_v10_af.shp\") |&gt; \n  sf::st_intersection(bbox_country)\nwaterways_hydrosheds &lt;- waterways_hydrosheds[st_geometry_type(waterways_hydrosheds) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] |&gt;\n  st_cast(\"MULTILINESTRING\") \n    \nwaterways_merged &lt;- waterways_liberia |&gt; bind_rows(waterways_project) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nwaterways_merged = sf::st_cast(waterways_merged, \"MULTILINESTRING\")\nsf::st_write(waterways_merged, \"./data/covariates/waterways_merged.shp\", delete_dsn=T)\n\nwaterbodies_collection = sf::st_read(\"./data/liberia-osmdata/gis_osm_water_a_free_1.shp\") |&gt; \n  sf::st_intersection(bbox_country) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\nwaterbodies_poly &lt;- waterbodies_collection[st_geometry_type(waterbodies_collection) %in% c(\"POLYGON\", \"MULTIPOLYGON\"), ] \nwaterbodies_lines &lt;- waterbodies_collection[st_geometry_type(waterbodies_collection) %in% c(\"LINESTRING\", \"MULTILINESTRING\"), ] \nwaterbodies_poly_lines = sf::st_boundary(waterbodies_poly)\n\nwaterbodies_waterways_merged &lt;- waterbodies_lines |&gt; bind_rows(waterbodies_poly_lines, waterways_merged) |&gt;\n  group_by(across(-geometry)) |&gt; summarise(geometry = st_union(geometry), .groups = \"drop\")\nwaterbodies_waterways_merged = sf::st_cast(waterbodies_waterways_merged, \"MULTILINESTRING\")\nsf::st_write(waterbodies_waterways_merged, \"./data/covariates/waterbodies_waterways_merged.shp\", delete_dsn=T)\n\n\n###### Transport & Infrastructure\ntransport=sf::st_read(\"./data/liberia-osmdata/gis_osm_transport_a_free_1.shp\")|&gt; st_boundary()|&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nrailways = sf::st_read(\"./data/liberia-osmdata/gis_osm_railways_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_liberia = sf::st_read(\"./data/liberia-osmdata/gis_osm_roads_free_1.shp\") |&gt;\n  sf::st_intersection(bbox_country_2) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_project = sf::st_read(\"./data/Winrock_GIS/PA_roads.shp\") |&gt;\n  sf::st_intersection(bbox_country_1) |&gt;\n  dplyr::select(name,fclass) |&gt;\n  dplyr::mutate(fclass = as.factor(fclass))|&gt; \n  dplyr::mutate(name = as.character(name))\n\nroads_rail_transport_merged &lt;- transport |&gt; \n  bind_rows(railways, roads_liberia, roads_project) |&gt;\n  group_by(across(-geometry)) |&gt; \n  summarise(geometry = st_union(geometry), .groups = \"drop\")\n\nroads = sf::st_cast(roads_rail_transport_merged, \"MULTILINESTRING\")\nsf::st_write(roads, \"./data/covariates/roads_rail_transport_merged.shp\", delete_dsn=T)\n\nroads &lt;- roads |&gt; bind_rows(roads_sle) |&gt; group_by(across(-geometry)) |&gt; \n  summarise(geometry = st_union(geometry), .groups = \"drop\")\nsf::st_write(roads, \"./data/covariates/roads_intl.shp\", delete_dsn=T)\n\nroads_lib = sf::st_read(\"./data/covariates/roads_intl.shp\") |&gt; st_cast(\"MULTILINESTRING\")\nroads_sle = sf::st_read(\"./data/liberia-osmdata/hotosm_sle_roads_lines_shp.shp\") |&gt;st_cast(\"MULTILINESTRING\")\nroads_lib   = sf::st_intersection(roads_lib, bbox_aoi_2)|&gt;dplyr::select(name)\nroads_sle   = sf::st_intersection(roads_sle, bbox_aoi_2)|&gt;dplyr::select(name)\nroads   = rbind(roads_lib, roads_sle)\nsf::st_write(roads, \"./data/ROADS/roads.shp\", delete_layer=T)\n\nroads_lib = sf::st_intersection(roads_lib, bbox_aoi_2)\nroads_sle = sf::st_intersection(roads_sle, bbox_aoi_2)\n\ntmap::tm_shape(roads_clip) + tmap::tm_lines(col=\"orange\", lwd=0.6) + tmap::tm_shape(aoi) + tm_borders(col=\"red\", lwd=1.7)\n\n##### Slope / Elevation\ndem   = raster::subset(STACK, \"DEM\")\nslope_tangent = raster::terrain(\n  dem, opt=\"slope\",unit=\"tangent\",neighbors=8,filename=\"./data/DEM/slope_tangent.tif\")\nslope_tangent = terra::rast(\"./data/DEM/slope_tangent.tif\")\nslope_percent = slope_tangent * 100\nslope_percent = terra::clamp(slope_percent, 0, 100) \nslope_percent = raster::raster(slope_percent)\nraster::writeRaster(slope_percent, \"./data/covariates/slope_percent.tif\")\n\nurban &lt;- terra::mask(LULC_LIBERIA_2024, LULC_LIBERIA_2024 == 4, maskvalue = FALSE)\nurban &lt;- raster::raster(urban)\nraster::writeRaster(urban, \"./data/covariates/urban.tif\", overwrite=T)\n\n\n\nAnnualized deforestation\n\n# Assign zones\nzones_sf = counties |&gt; sf::st_transform(\"EPSG:32629\")\nzones_sf$zone_id &lt;- 1:nrow(zones_sf)\nzones_sv &lt;- terra::vect(zones_sf)\n\n# Calculate zonal annualization by jurisdiction\nforest_2024 = terra::rast(\"./data/BINARY/forest_2024.tif\")\nforest_loss_2014_2019 = terra::rast(\"./data/BINARY/forest_loss_2014_2019.tif\")\nforest_loss_2019_2024 = terra::rast(\"./data/BINARY/forest_loss_2019_2024.tif\")\nforest_loss_2014_2024 = terra::rast(\"./data/BINARY/forest_loss_2014_2024.tif\")\npixel_area_ha &lt;- 0.088914  # 29.80124 x 29.80124 m² converted to hectares\n\nzonal_2014_2019 &lt;- terra::extract(forest_loss_2014_2019,zones_sv,fun=sum,na.rm=T)\nzonal_2019_2024 &lt;- terra::extract(forest_loss_2019_2024,zones_sv,fun=sum,na.rm=T)\nnames(zonal_2014_2019) &lt;- c(\"zone_id\", \"loss_2014_2019\")\nnames(zonal_2019_2024) &lt;- c(\"zone_id\", \"loss_2019_2024\")\nzonal_2014_2019$loss_2014_2019 &lt;- zonal_2014_2019$loss_2014_2019 * pixel_area_ha\nzonal_2019_2024$loss_2019_2024 &lt;- zonal_2019_2024$loss_2019_2024 * pixel_area_ha\n\n# Merge baseline years\nzonal_stats &lt;- merge(\n  zonal_2014_2019,      # e.g. (zone_id, loss_2014_2019)\n  zonal_2019_2024,      # e.g. (zone_id, loss_2019_2024)\n  by = \"zone_id\",       # Common ID column\n  all = TRUE            # Keep all rows if zones differ\n)\n# Annualize 10-year total & rejoin to sf object\nzonal_stats$loss_10yr &lt;- zonal_stats$loss_2014_2019 + zonal_stats$loss_2019_2024\nzonal_stats$annual_loss_10yr &lt;- zonal_stats$loss_10yr / 10\nzones_sf &lt;- merge(zones_sf, zonal_stats, by=\"zone_id\", all.x=TRUE)\nhead(zones_sf[, c(\"zone_id\", \"loss_2014_2019\", \"loss_2019_2024\", \n                  \"loss_10yr\", \"annual_loss_10yr\")])\n\n# Derive 10-yr annualized raster\nzones_sv &lt;- terra::vect(zones_sf)\nannual_loss_10yr_raster &lt;- rasterize(\n  zones_sv,                  # polygon SpatVector\n  forest_loss_2014_2019,     # template raster for resolution/extent\n  field = \"annual_loss_10yr\") # the column to rasterize\nnames(annual_loss_10yr_raster) &lt;- (\"annual_loss_10yr\")\nraster::writeRaster(annual_loss_10yr_raster,\"./data/BINARY/annual_loss_2014_2024_zonal.tif\",overwrite=T)\n\n\n\nDistance covariates\n\n# Derive distance-to-edge raster \nforest_2024 = terra::rast(\"./data/BINARY/forest_2024.tif\")\nforest_mask &lt;- terra::classify(forest_2024, cbind(c(1,0), c(1,NA)))\nnonForest_mask &lt;- terra::classify(forest_2024, cbind(c(1,0), c(NA,1)))\nwriteRaster(forest_mask, \"./data/BINARY/forest_mask.tif\", overwrite=T)\nwriteRaster(nonForest_mask, \"./data/BINARY/nonForest_mask.tif\", overwrite=T)\n\nforest_for_distance &lt;- forest_mask\nforest_for_distance_raster &lt;- raster::raster(forest_for_distance) \ndistance_to_edge &lt;- distance(forest_for_distance_raster, filename=\"./data/BINARY/distance_to_edge_unix.tif\")\n\n# Derive distance-to-feature rasters\ntemplate &lt;- forest_2024\nroads_rast &lt;- rasterize(vect(transport), template, field=1, background=0)\nroads_rast &lt;- subst(roads_rast, from=0, to=NA)\ndistance_to_roads &lt;- distance(roads_rast)\nwriteRaster(distance_to_roads, \"./data/LULC/distance_to_roads.tif\", overwrite=T)\n\nplaces_vect   &lt;- sf::st_read(\"./data/BINARY/places.shp\") |&gt; terra::vect()\nplaces_rast   &lt;- rasterize(places_vect,template,field=1,background=0,touches=T)\nplaces_rast   &lt;- subst(places_rast, from=0, to=NA)\ndistance_to_places&lt;- distance(places_rast)\nwriteRaster(distance_to_places, \"./data/LULC/distance_to_places.tif\", overwrite=T)\n\nwaterways_rast&lt;-rasterize(vect(waterways_rast), template, field=1, background=0)\nwaterways_rast&lt;-subst(waterways_rast, from=0, to=NA)\ndistance_to_waterways&lt;-distance(waterways_rast)\nwriteRaster(distance_to_waterways, \"./data/LULC/distance_to_waterways.tif\", overwrite=T)\n\nurban_rast    &lt;- raster::raster(urban)\nurban_rast    &lt;- subst(urban_rast, from=0, to=NA)\ndistance_to_urban &lt;- distance(urban_rast)\nwriteRaster(distance_to_urban, \"./data/LULC/distance_to_urban.tif\", overwrite=T)\n\n# Normalize covariates for quicker computing\nnormalize &lt;- function(x){\n  (x-global(x,\"min\",na.rm=T))/\n    (global(x,\"max\",na.rm=T) -\n       global(x, \"min\",na.rm=T))}\n\npopulation= raster::raster(population)\npopulation= normalize_function(population)\nslope     = raster::raster(slope)\nslope     = normalize_function(slope)\n\ndistance_to_forest    = normalize_function(distance_to_forest)\ndistance_to_roads     = normalize_function(distance_to_roads)\ndistance_to_places    = normalize_function(distance_to_places)\ndistance_to_water     = normalize_function(distance_to_waterways)\ndistance_to_urban     = normalize_function(distance_to_urban)\n\n# invert all risk-producing covariates\ndistance_to_edge_inv &lt;- 1 - distance_to_forest\ndistance_to_roads_inv  &lt;- 1 - distance_to_roads\ndistance_to_places_inv &lt;- 1 - distance_to_places\ndistance_to_water_inv &lt;- 1 -  distance_to_waterways\ndistance_to_urban_inv   &lt;- 1 - distance_to_urban\n\nwriteRaster(distance_to_edge_inv, \"./data/BINARY/distance_to_edge_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_roads_inv, \"./data/BINARY/distance_to_roads_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_places_inv, \"./data/BINARY/distance_to_places_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_water_inv, \"./data/BINARY/distance_to_water_inverted.tif\", overwrite=T)\nwriteRaster(distance_to_urban_inv, \"./data/BINARY/distance_to_urban_inverted.tif\", overwrite=T)\nwriteRaster(slope_norm, \"./data/BINARY/slope_norm.tif\", overwrite=T)\n\n\n\nDeforestation risk\nTwo methods were explored for weighting variables and creating a generalized deforestation risk index. We could consider developing a spatial risk model using the spatstat package or logistic regression, as has been cited in recent Verra guides. In addition, some of the heavy lifting with input formatting and data wrangling has already been completed.\nHowever, spatial modelling has tended to produce challenges when fitting such large country-wide covariates. Moreover, these kinds of spatialy driven models tend to require longer training procedures due to their intercept-based spatial kernels and slower resampling patterns.\nAlternatively, we have drafted a tentative risk indexing approach based on a weighted sum of subjectively scored covariate effects. While each variable would still need a carefully reasoned score, this option offers a more streamlined method that is easier to adjust. We applied this risk index to inform a risk weighted allocation of the 10-year deforestation rate, first by multiplying the fraction of pixel risk by zonal forest loss, and second by factoring out annual zonal loss by multiplying by pixel risk values, as shown below\n\\[\n\\mathrm{AllocatedLoss}_{\\mathrm{pixel}}\n=\n\\left(\n  \\frac{\\mathrm{risk}_{\\mathrm{pixel}}}{\\sum \\mathrm{risk}_{\\mathrm{zone}}}\n\\right)\n\\times\n\\mathrm{annual\\_loss\\_10yr}_{\\mathrm{zone}}\n\\]\n\\[\n\\mathrm{allocated\\_loss}_{\\mathrm{pixel}}\n=\n\\mathrm{risk}_{\\mathrm{pixel}}\n\\times\n\\left(\n  \\frac{\\mathrm{annual\\_loss\\_10yr}_{\\mathrm{zone}}}{\\sum \\mathrm{risk}_{\\mathrm{zone}}}\n\\right)\n\\]\nBoth formulas describe the same operation in different orders of multiplication: each pixel in a given zone Z receives a share of annual_loss_10yrZ based on its proportional risk (the pixel’s risk relative to the sum of all pixel risks in that zone). This ensures that higher-risk pixels are allocated more deforestation, in line with the Verra guidance for an allocated deforestation risk map.\nWe intend to present both of these approaches for broader review and discussion in our upcoming meeting.\n\nrisk_index &lt;- (0.2 * distance_to_edge) +\n              (0.2 * distance_to_roads) +\n              (0.2 * distance_to_places) +\n              (0.1 * distance_to_urban) +\n              (0.1 * distance_to_water) +\n              (0.1 * slope)\n\n# Re-normalize the index to between 0 and 1\nrmin &lt;- global(risk_index, \"min\", na.rm=TRUE)[1]\nrmax &lt;- global(risk_index, \"max\", na.rm=TRUE)[1]\nrisk_index_norm &lt;- (risk_index - rmin) / (rmax - rmin)\nwriteRaster(risk_index_norm, \"./data/BINARY/deforestation_risk_index.tif\",overwrite=T)\n\n# Returns a data.frame with columns: ID, risk_index_norm_sum\nrisk_sum &lt;- extract(risk_index_norm, zones_sv, fun = sum, na.rm=TRUE)\ncolnames(risk_sum) &lt;- c(\"zone_id\",\"sum_risk\")\nzones_stats &lt;- merge(zones_sf, risk_sum, by=\"zone_id\", all.x=TRUE)\nzones_rast &lt;- rasterize(vect(zones_stats), risk_index_norm, field=\"zone_id\")\nzones_stats$loss_factor &lt;- zones_stats$annual_loss_10yr / zones_stats$sum_risk\nloss_factor_rast &lt;- rasterize(vect(zones_stats), risk_index_norm, field=\"loss_factor\")\nallocated_loss &lt;- risk_index_norm * loss_factor_rast\nwriteRaster(allocated_loss, \"./data/BINARY/allocated_deforestation.tif\", overwrite=T)\n\n# Visualize\nterra::plot(risk_index_norm, main=\"Deforestation risk map\")\nterra::plot(allocated_loss, main=\"Allocated deforestation map\")\n\n\n\nAppendix I: Reference Period Classifiers\nTo run these, you may change eval=F to eval=T at the top of chunk in the .Rmd or .R file saved in the OneDrive folder.\n\n########################### 2019\n# extract signatures\nsignatures_2019 = raster::extract(STACK_2019, samples ,df=T) # watch for data formats\nsamples_signatures_2019 &lt;- dplyr::inner_join(signatures_2019, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2019$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2019 &lt;- stratified_partition(samples_signatures_2019,group_col=\"label\", train_ratio=0.7)\ntrainData_2019 &lt;- partitioned_data_2019$train\ntestData_2019 &lt;- partitioned_data_2019$test\ntable(trainData_2019$label)\ntable(testData_2019$label)\n\n# synthetic minority oversampling technique\ntrainData_2019&lt;-performanceEstimation::smote(label ~ .,data=trainData_2019,perc.over=10, perc.under=100)\ntestData_2019&lt;-performanceEstimation::smote(label ~ .,data=testData_2019,perc.over=10,perc.under=100)\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2019 &lt;- trainData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2019 &lt;- testData_2019 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2019 &lt;- c(\n  \"NDVI_2019\", \"BLUE_2019\", \"GREEN_2019\", \"RED_2019\", \n  \"NIR08_2019\", \"SWIR16_2019\", \"SWIR22_2019\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2019 &lt;- caret::train(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2019 &lt;- predict(rf_model_2019, testData_2019)\nprint(rf_model_2019) # cv results\nconfusionMatrix(rf_test_2019,testData_2019$label) # blind test results\n\nindex_feature_2019 &lt;- createMultiFolds(trainData_2019$label, times=5) \npredictor_seq_2019 &lt;-seq(from=1, to=length(predictors_2019),by=2)\n\nsubset_regime_2019 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2019\n  )\n\nrf_model_subset_2019 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2019[, c(predictors_2019, \"label\")], \n  sizes = predictor_seq_2019,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2019\n  )\n\nrf_subset_test_2019 &lt;- predict(rf_model_subset_2019,testData_2019)\nprint(rf_model_subset_2019)\nconfusionMatrix(rf_subset_test_2019$pred,testData_2019$label)\n\n######################### 2024\n# extract signatures\nsignatures_2024 = raster::extract(STACK_2024, samples ,df=T) # watch for data formats\nsamples_signatures_2024 &lt;- dplyr::inner_join(signatures_2024, samples, by=c(\"ID\"=\"id\"))\nsamples_signatures_2024$geometry &lt;- NULL # set geometry to NULL for model training\n\n# training-test split, p=0.7 -&gt; 70% split\npartitioned_data_2024 &lt;- stratified_partition(samples_signatures_2024,group_col=\"label\", train_ratio=0.7)\ntrainData_2024 &lt;- partitioned_data_2024$train\ntestData_2024 &lt;- partitioned_data_2024$test\ntable(trainData_2024$label)\ntable(testData_2024$label)\n\n# synthetic minority oversampling technique\ntrainData_2024&lt;-performanceEstimation::smote(label ~ .,data=trainData_2024,perc.over=10, perc.under=100)\ntestData_2024&lt;-performanceEstimation::smote(label ~ .,data=testData_2024,perc.over=10,perc.under=100)\n# interpolate missing cloud pixels with class-median-normalization\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\n\n# interpolate NAs with class-median-normalization (NAs -&gt; missing cloud pixels)\ntrainData_2024 &lt;- trainData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\ntestData_2024 &lt;- testData_2024 |&gt; group_by(label) |&gt; mutate(across(where(is.numeric),\n    ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) |&gt; ungroup()\nwater_2014 &lt;- trainData_2014[trainData_2014$label == \"Water\", ]\nwater_ids &lt;- water_2014$ID\nwater_2024 &lt;- samples_signatures_2024[samples_signatures_2024$ID %in% water_ids, ]\ntrainData_2024 &lt;- rbind(trainData_2024, water_2024)\ntable(trainData_2024$label)\n\n# assign model variables\nresponse  &lt;- c(\"label\")\npredictors_2024 &lt;- c(\n  \"NDVI_2024\", \"BLUE_2024\", \"GREEN_2024\", \"RED_2024\", \n  \"NIR08_2024\", \"SWIR16_2024\", \"SWIR22_2024\", \"DEM\"\n  )\n\n# train classifier\nrf_model_2024 &lt;- caret::train(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], # drop ID var\n  trControl = cv_regime,\n  method    = \"rf\", \n  metric    = 'Kappa', \n  ntree     = 500,\n  tuneLength= 6,\n  importance= T\n  )\n\nrf_test_2024 &lt;- predict(rf_model_2024, testData_2024)\nprint(rf_model_2024) # cv results\nconfusionMatrix(rf_test_2024,testData_2024$label) # blind test results\n\nindex_feature_2024 &lt;- createMultiFolds(trainData_2024$label, times=5) \npredictor_seq_2024 &lt;-seq(from=1, to=length(predictors_2024),by=2)\n\nsubset_regime_2024 &lt;- rfeControl(\n  method=\"LGOCV\",\n  number = 10,\n  verbose=FALSE,\n  functions=rfFuncs,\n  index=index_feature_2024\n  )\n\nrf_model_subset_2024 &lt;- caret::rfe(\n  label~.,\n  data = trainData_2024[, c(predictors_2024, \"label\")], \n  sizes = predictor_seq_2024,\n  metric = \"Kappa\",\n  ntree=500,\n  method=\"rf\",\n  rfeControl = subset_regime_2024\n  )\n\nrf_subset_test_2024 &lt;- predict(rf_model_subset_2024,testData_2024)\nprint(rf_model_subset_2024)\nconfusionMatrix(rf_subset_test_2024$pred,testData_2024$label)\n\n\nLULC_LIBERIA_2014 &lt;- raster::predict(STACK_2014,rf_model_2014, na.rm=TRUE) |&gt; raster::raster()\nraster::writeRaster(LULC_LIBERIA_2014,\"./data/LULC/LULC_LIBERIA_2014-01-04.tif\",\n  format = \"GTiff\", overwrite = T)\n\nLULC_LIBERIA_2019 &lt;- raster::predict(STACK_2019,rf_model_2019, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2019,\"./data/LULC/LULC_LIBERIA_2019-01-02.tif\",\n  format = \"GTiff\",overwrite = T)\n\nLULC_LIBERIA_2024 &lt;- raster::predict(STACK_2024,rf_model_2014, na.rm=TRUE) |&gt; raster::raster() \nraster::writeRaster(LULC_LIBERIA_2024,\"./data/LULC/LULC_LIBERIA_2024-01-16x.tif\",\n  format = \"GTiff\",overwrite = T)\n\n\n\nAppendix II: Runtime snapshot\n\ndevtools::session_info()\n\n\nLULC_PROJECT_2015=terra::rast(\"./data/LULC/LULC_PROJECT_2015.tif\")\nLULC_PROJECT_2019=terra::rast(\"./data/LULC/LULC_PROJECT_2019.tif\")\nLULC_PROJECT_2024=terra::rast(\"./data/LULC/LULC_PROJECT_2024.tif\")\nLULC_PROJECT_2015=terra::project(LULC_PROJECT_2015, \"EPSG:32629\")\nLULC_PROJECT_2024=terra::project(LULC_PROJECT_2024, \"EPSG:32629\")\nLULC_PROJECT_2019=terra::project(LULC_PROJECT_2019, \"EPSG:32629\")\n\nvoi = sf::st_transform(aoi, 32629) |&gt; terra::vect() \nLULC_PROJECT_2015 = terra::crop(LULC_PROJECT_2015, voi, mask=T)\nLULC_PROJECT_2019 = terra::crop(LULC_PROJECT_2019, voi, mask=T)\nLULC_PROJECT_2024 = terra::crop(LULC_PROJECT_2024, voi, mask=T)\n\ncode_dict &lt;- data.frame(\n  id = c(0, 1, 2, 3, 4, 5, 6, 7),\n  label = c(\"Water\", \"Forest\", \"Grassland\", \n            \"Wetland\", \"Croplan\", \"Shrubland\", \n            \"Urban\", \"Bareground\"))\n\nlevels(LULC_PROJECT_2015) &lt;- code_dict\nlevels(LULC_PROJECT_2019) &lt;- code_dict\nlevels(LULC_PROJECT_2024) &lt;- code_dict\n\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2015\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2019\")\nterra::plot(LULC_PROJECT_2015, main = \"LULC 2024\")\n\nraster_res &lt;- terra::res(LULC_PROJECT_2015) # 9.933065 x 9.933065 m2\npixel_area_ha &lt;- (raster_res[1] * raster_res[2]) / 10000  # Convert m² to hectares\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2015$area_ha &lt;- freq_2015$count * pixel_area_ha\nfreq_2015$percentage &lt;- (freq_2015$area_ha / sum(freq_2015$area_ha)) * 100\nfreq_2015$year &lt;- 2015\n\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2019$area_ha &lt;- freq_2019$count * pixel_area_ha\nfreq_2019$percentage &lt;- (freq_2019$area_ha / sum(freq_2019$area_ha)) * 100\nfreq_2019$year &lt;- 2019\n\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\nfreq_2024$area_ha &lt;- freq_2024$count * pixel_area_ha\nfreq_2024$percentage &lt;- (freq_2024$area_ha / sum(freq_2024$area_ha)) * 100\nfreq_2024$year &lt;- 2024\n\nland_cover_summary=bind_rows(freq_2015, freq_2019, freq_2024)\nland_cover_summary=merge(land_cover_summary,code_dict, by.x=\"value\",by.y=\"id\",all.x=T)\n\nland_cover_summary_wide &lt;- land_cover_summary %&gt;%\n  select(label, year, area_ha, percentage) %&gt;%\n  pivot_wider(names_from = year, values_from = c(area_ha, percentage))\nprint(land_cover_summary_wide)\n\n\nunique_values_2015 &lt;- terra::unique(LULC_PROJECT_2015)\nunique_values_2019 &lt;- terra::unique(LULC_PROJECT_2019)\nunique_values_2024 &lt;- terra::unique(LULC_PROJECT_2024)\n\nprint(unique_values_2015)\nprint(unique_values_2019)\nprint(unique_values_2024)\n\nprint(terra::is.factor(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2015))\nprint(terra::levels(LULC_PROJECT_2019))\nprint(terra::levels(LULC_PROJECT_2024))\n\n\nlevels(LULC_PROJECT_2015) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2019) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nlevels(LULC_PROJECT_2024) &lt;- data.frame(ID = code_dict$id, label = code_dict$label)\nfreq_2015 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2015))\nfreq_2019 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2019))\nfreq_2024 &lt;- as.data.frame(terra::freq(LULC_PROJECT_2024))\n\nprint(freq_2015)\nprint(freq_2019)\nprint(freq_2024)\n\nprint(LULC_PROJECT_2015)\nprint(LULC_PROJECT_2019)\nprint(LULC_PROJECT_2024)\n\nplot(LULC_PROJECT_2015, main = \"LULC 2015\")\nplot(LULC_PROJECT_2019, main = \"LULC 2019\")\nplot(LULC_PROJECT_2024, main = \"LULC 2024\")",
    "crumbs": [
      "Home",
      "Deforestation Risk"
    ]
  }
]